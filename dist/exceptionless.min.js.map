{"version":3,"sources":["tracekit.js","exceptionless.ts"],"names":["window","_oldOnerrorHandler","_onErrorHandlerInstalled","handlers","lastException","lastExceptionStack","debug","sourceCache","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","subscribe","handler","onerror","traceKitWindowOnError","push","unsubscribe","i","length","splice","computeStackTrace","augmentStackTraceWithInitialElement","computeStackTraceFromStackProp","guessFunctionName","gatherContext","ofCaller","depth","Error","ex","getSource","extendToAsynchronousCallbacks","_helper","fnName","originalFn","args","call","originalCallback","remoteFetching","collectWindowErrors","linesOfContext","define","amd","module","exports","_has","object","key","Object","prototype","hasOwnProperty","_isUndefined","what","notifyHandlers","stack","isWindowError","error","exception","inner","message","url","lineNo","columnNo","errorObj","processLastException","name","location","line","column","msg","toString","groups","match","context","mode","_lastExceptionStack","_lastException","setTimeout","incomplete","source","domain","document","exec","request","XMLHttpRequest","ActiveXObject","getXHR","open","send","responseText","loadSource","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","script","src","event","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","item","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromStacktraceProp","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","relativeLine","pos","innerText","midline","computeStackTraceFromOperaMultiLineMessage","global","__","constructor","d","b","create","__spreadArrays","il","r","Array","k","a","jl","defineProperty","value","DefaultSubmissionAdapter","BrowserStorageProvider","DefaultRequestInfoCollector","DefaultModuleCollector","DefaultErrorParser","BrowserStorage","KeyValueStorageBase","InMemoryStorage","SubmissionMethodPlugin","RequestInfoPlugin","ModuleInfoPlugin","EventExclusionPlugin","ErrorPlugin","EnvironmentInfoPlugin","DuplicateCheckerPlugin","ConfigurationDefaultsPlugin","EventBuilder","SettingsResponse","Configuration","ContextData","ExceptionlessClient","SubmissionResponse","SettingsManager","Utils","DefaultSubmissionClient","InMemoryStorageProvider","DefaultEventQueue","EventPluginManager","EventPluginContext","ReferenceIdPlugin","HeartbeatPlugin","NullLog","ConsoleLog","DefaultLastReferenceIdManager","getLast","_lastReferenceId","clearLast","setLast","eventId","trace","log","info","warn","level","console","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","_interval","heartbeatInterval","priority","reference_id","type","guid","get","config","contextData","callback","plugin","cancelled","plugins","wrappedPlugins","addDefaultPlugins","addPlugin","enqueue","eventWillNotBeQueued","_config","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","storage","queue","save","logText","process","isAppExiting","_this","queueNotProcessed","_processingQueue","events_1","submissionBatchSize","serverUrl","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","Date","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","_handlers","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","noSubmission","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","maxQueueItems","settings","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","getSettings","version","configServerUrl","status","headers","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","settingsVersion","parseInt","configurationVersionHeader","checkVersion","target","values","_a","values_1","getHashCode","hash","charCodeAt","getCookies","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","undefined","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","toLowerCase","trim","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","applySavedServerSettings","savedSettings","getSavedServerSettings","changed","getVersion","currentVersion","updateSettings","_isUpdatingSettings","unableToUpdateMessage","savedServerSettings","newSettings","handlers_2","statusCode","createException","pluginContextData","setException","createEvent","setType","submitException","submit","createUnhandledException","submissionMethod","builder","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","date","submitEvent","eventPluginContext","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","updateSettingsTimer","initialDelay","_timeoutId","clearTimeout","updateSettingsWhenIdleInterval","interval","_instance","settingsOrApiKey","enumerable","getException","configurable","getSubmissionMethod","_apiKey","set","_serverUrl","_configServerUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","concat","addDataExclusions","addRange","_includePrivateInformation","val","_includeUserName","_includeMachineName","_includeIpAddress","_includeCookies","_includePostData","_includeQueryString","_userAgentBotPatterns","addUserAgentBotPatterns","userAgentBotPatterns","_plugins","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","defaultData","setUserIdentity","userInfoOrIdentity","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","handlers_3","_defaultSettings","includePrivateInformation","configSettings","inject","fn","defaultTags","defaults","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","setReferenceId","isValidIdentifier","_validIdentifierErrorMessage","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","defaultTags_1","tag","stack_trace","count","now_1","_getCurrentTime","merged","_mergedEvents","filter","hashCode","incrementCount","updateDate","_processedHashcodes","h","MergedEvent","shift","getCurrentTime","now","resubmit","_count","_context","ENVIRONMENT_KEY","collector","environmentInfo","getEnvironmentInfo","parser","additionalData","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","loggerName","getLogLevel","logLevel","minLogLevel","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","user_agent","items","lastTimestamp","maxItems","limit","single","ensureIndex","getKey","json","write","delete","read","parseDate","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","_super","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","namespace","getParameters","parameters","params_1","param","TRACEKIT_STACK_TRACE_KEY","stackTrace","stackFrames","ANONYMOUS","frames","stackFrames_1","frame","file_name","line_number","getStackFrames","module_id","innerHTML","navigator","is_secure","protocol","host","hostname","port","pathname","includeCookies","includeQueryString","query_string","parseQueryString","search","referrer","xhrRequest","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","parseResponseHeaders","getAllResponseHeaders","uri","xmlRequest","xhr","setRequestHeader","XDomainRequest","useSetTimeout","timeout","WITH_CREDENTIALS","onreadystatechange","readyState","complete","onprogress","ontimeout","onload","pop","getDefaultsSettingsFromScriptTag","options","default"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from \"TraceKit\";\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log(\"debug\", message);\n  }\n\n  public info(message: string): void {\n    this.log(\"info\", message);\n  }\n\n  public warn(message: string): void {\n    this.log(\"warn\", message);\n  }\n\n  public error(message: string): void {\n    this.log(\"error\", message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\nexport class NullLog implements ILog {\n  public trace(message: string): void {}\n  public info(message: string): void {}\n  public warn(message: string): void {}\n  public error(message: string): void {}\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = \"HeartbeatPlugin\";\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval >= 30000 ? heartbeatInterval : 60000;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data[\"@user\"];\n    if (user && user.identity) {\n      this._intervalId = setInterval(\n        () => context.client.submitSessionHeartbeat(user.identity),\n        this._interval\n      );\n    }\n\n    next && next();\n  }\n}\n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = \"ReferenceIdPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if (\n      (!context.event.reference_id ||\n        context.event.reference_id.length === 0) &&\n      context.event.type === \"error\"\n    ) {\n      context.event.reference_id = Utils.guid()\n        .replace(\"-\", \"\")\n        .substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(\n    client: ExceptionlessClient,\n    event: IEvent,\n    contextData?: ContextData\n  ) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nexport class EventPluginManager {\n  public static run(\n    context: EventPluginContext,\n    callback: (context?: EventPluginContext) => void\n  ): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): (() => void) => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(\n            `Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`\n          );\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap(\n        { name: \"cb\", priority: 9007199254740992, run: callback },\n        null\n      );\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(\n        plugins[index],\n        !!callback || index < plugins.length - 1\n          ? wrappedPlugins[index + 1]\n          : null\n      );\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<\n    (events: IEvent[], response: SubmissionResponse) => void\n  > = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = \"The event will not be queued.\"; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(\n        `Queue items are currently being discarded. ${eventWillNotBeQueued}`\n      );\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${\n      !!event.reference_id ? \"refid=\" + event.reference_id : \"\"\n    }`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = \"The queue will not be processed.\"; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info(\"Processing queue...\");\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(\n        events.map((e) => e.value),\n        config,\n        (response: SubmissionResponse) => {\n          this.processSubmissionResponse(response, events);\n          this.eventsPosted(\n            events.map((e) => e.value),\n            response\n          );\n          log.info(\"Finished processing queue.\");\n          this._processingQueue = false;\n        },\n        isAppExiting\n      );\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(\n    durationInMinutes?: number,\n    discardFutureQueuedItems?: boolean,\n    clearQueue?: boolean\n  ): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(\n      new Date().getTime() + durationInMinutes * 60000\n    );\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(\n    handler: (events: IEvent[], response: SubmissionResponse) => void\n  ): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return (\n      this._discardQueuedItemsUntil &&\n      this._discardQueuedItemsUntil > new Date()\n    );\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return (\n      this._suspendProcessingUntil && this._suspendProcessingUntil > new Date()\n    );\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(\n    response: SubmissionResponse,\n    events: IStorageItem[]\n  ): void {\n    const noSubmission: string = \"The event will not be submitted.\"; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error(\"Server returned service unavailable.\");\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info(\n        \"Too many events have been submitted, please upgrade your plan.\"\n      );\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(\n        `Unable to authenticate, please check your configuration. ${noSubmission}`\n      );\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = \"Event submission discarded for being too large.\";\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(\n          1,\n          Math.round(config.submissionBatchSize / 1.5)\n        );\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(\n        `Error submitting events: ${\n          response.message || \"Please check the network tab for more info.\"\n        }`\n      );\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(\n    durationInMinutes?: number,\n    discardFutureQueuedItems?: boolean,\n    clearQueue?: boolean\n  ): void;\n  onEventsPosted(\n    handler: (events: IEvent[], response: SubmissionResponse) => void\n  ): void;\n}\n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n}\n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create() };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = \"x-exceptionless-configversion\";\n\n  public postEvents(\n    events: IEvent[],\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void,\n    isAppExiting?: boolean\n  ): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(\n      config,\n      \"POST\",\n      `${config.serverUrl}/api/v2/events`,\n      data\n    );\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(\n    referenceId: string,\n    description: IUserDescription,\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void\n  ): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(\n      referenceId\n    )}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, \"POST\", path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(\n    config: Configuration,\n    version: number,\n    callback: (response: SettingsResponse) => void\n  ): void {\n    const request = this.createRequest(\n      config,\n      \"GET\",\n      `${config.configServerUrl}/api/v2/projects/config?v=${version}`\n    );\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(\n          new SettingsResponse(\n            false,\n            null,\n            -1,\n            null,\n            \"Invalid configuration settings.\"\n          )\n        );\n      }\n\n      callback(\n        new SettingsResponse(true, settings.settings || {}, settings.version)\n      );\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(\n    sessionIdOrUserId: string,\n    closeSession: boolean,\n    config: Configuration\n  ): void {\n    const request = this.createRequest(\n      config,\n      \"GET\",\n      `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`\n    );\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(\n    config: Configuration,\n    method: string,\n    url: string,\n    data: string = null\n  ): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent,\n    };\n  }\n\n  private createSubmissionCallback(\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void\n  ) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number =\n        headers && parseInt(headers[this.configurationVersionHeader], 10);\n      if (!isNaN(settingsVersion)) {\n        SettingsManager.checkVersion(settingsVersion, config);\n      } else {\n        config.log.error(\"No config version header was returned.\");\n      }\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\nexport interface ISubmissionAdapter {\n  sendRequest(\n    request: SubmissionRequest,\n    callback?: SubmissionCallback,\n    isAppExiting?: boolean\n  ): void;\n}\n\nexport interface ISubmissionClient {\n  postEvents(\n    events: IEvent[],\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void,\n    isAppExiting?: boolean\n  ): void;\n  postUserDescription(\n    referenceId: string,\n    description: IUserDescription,\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void\n  ): void;\n  getSettings(\n    config: Configuration,\n    version: number,\n    callback: (response: SettingsResponse) => void\n  ): void;\n  sendHeartbeat(\n    sessionIdOrUserId: string,\n    closeSession: boolean,\n    config: Configuration\n  ): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = (hash << 5) - hash + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || \"\").split(\"; \");\n    for (const part of parts) {\n      const cookie: string[] = part.split(\"=\");\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n\n    return (\n      s4() +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      s4() +\n      s4()\n    );\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (defaultValues[key] !== undefined && defaultValues[key] !== null) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (values[key] !== undefined && values[key] !== null) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split(\"&\");\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split(\"=\");\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(\n    input: string,\n    patterns: string[],\n    ignoreCase: boolean = true\n  ): boolean {\n    if (!input || typeof input !== \"string\") {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, \"\");\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== \"string\") {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(\n        trim,\n        \"\"\n      );\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === \"*\";\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === \"*\";\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return (\n          pattern.length <= input.length && input.indexOf(pattern, 0) !== -1\n        );\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return (\n      input === null ||\n      (typeof input === \"object\" && Object.keys(input).length === 0)\n    );\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(\n    data: any,\n    exclusions?: string[],\n    maxDepth?: number\n  ): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === \"object\" && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if ({}.toString.call(data) === \"[object Object]\") {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if ({}.toString.call(data) === \"[object Array]\") {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === \"boolean\") {\n      return input;\n    }\n\n    if (\n      input === null ||\n      (typeof input !== \"number\" && typeof input !== \"string\")\n    ) {\n      return defaultValue;\n    }\n\n    switch ((input + \"\").toLowerCase().trim()) {\n      case \"true\":\n      case \"yes\":\n      case \"1\":\n        return true;\n      case \"false\":\n      case \"no\":\n      case \"0\":\n      case null:\n        return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  configServerUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  includePrivateInformation?: boolean;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  private static _isUpdatingSettings: boolean = false;\n\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled || this._isUpdatingSettings) {\n      return;\n    }\n\n    const unableToUpdateMessage = \"Unable to update settings\";\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    this._isUpdatingSettings = true;\n    config.submissionClient.getSettings(\n      config,\n      version,\n      (response: SettingsResponse) => {\n        try {\n          if (!config || !response || !response.success || !response.settings) {\n            config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n            return;\n          }\n\n          config.settings = Utils.merge(config.settings, response.settings);\n\n          // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n          // Remove any existing server settings that are not in the new server settings.\n          const savedServerSettings = SettingsManager.getSavedServerSettings(\n            config\n          );\n          for (const key in savedServerSettings) {\n            if (response.settings[key]) {\n              continue;\n            }\n\n            delete config.settings[key];\n          }\n\n          const newSettings: ISettingsWithVersion = {\n            version: response.settingsVersion,\n            settings: response.settings,\n          };\n\n          config.storage.settings.save(newSettings);\n\n          config.log.info(`Updated settings: v${newSettings.version}`);\n          this.changed(config);\n        } finally {\n          this._isUpdatingSettings = false;\n        }\n      }\n    );\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(\n    config: Configuration\n  ): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(\n    settingsOrApiKey?: IConfigurationSettings | string,\n    serverUrl?: string\n  ) {\n    this.config =\n      typeof settingsOrApiKey === \"object\"\n        ? new Configuration(settingsOrApiKey)\n        : new Configuration({ apiKey: settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) =>\n      this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0)\n    );\n    this.config.queue.onEventsPosted((events, response) =>\n      this.updateSettingsTimer()\n    );\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType(\"error\");\n  }\n\n  public submitException(\n    exception: Error,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(\n    exception: Error,\n    submissionMethod?: string\n  ): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(\n    exception: Error,\n    submissionMethod?: string,\n    callback?: (context: EventPluginContext) => void\n  ) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType(\"usage\").setSource(feature);\n  }\n\n  public submitFeatureUsage(\n    feature: string,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(\n    source: string,\n    message: string,\n    level: string\n  ): EventBuilder;\n  public createLog(\n    sourceOrMessage: string,\n    message?: string,\n    level?: string\n  ): EventBuilder {\n    let builder = this.createEvent().setType(\"log\");\n\n    if (level) {\n      builder = builder\n        .setSource(sourceOrMessage)\n        .setMessage(message)\n        .setProperty(\"@level\", level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(\n          caller && caller.caller && caller.caller.name\n        );\n      } catch (e) {\n        this.config.log.trace(\"Unable to resolve log source: \" + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(\n    source: string,\n    message: string,\n    level: string,\n    callback?: (context: EventPluginContext) => void\n  ): void;\n  public submitLog(\n    sourceOrMessage: string,\n    message?: string,\n    level?: string,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType(\"404\").setSource(resource);\n  }\n\n  public submitNotFound(\n    resource: string,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType(\"session\");\n  }\n\n  public submitSessionStart(\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId && this.config.enabled && this.config.isValid) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(\n        sessionIdOrUserId,\n        true,\n        this.config\n      );\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId && this.config.enabled && this.config.isValid) {\n      this.config.log.info(\n        `Submitting session heartbeat: ${sessionIdOrUserId}`\n      );\n      this.config.submissionClient.sendHeartbeat(\n        sessionIdOrUserId,\n        false,\n        this.config\n      );\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(\n    event: IEvent,\n    pluginContextData?: ContextData,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    function cancelled(eventPluginContext: EventPluginContext) {\n      if (!!eventPluginContext) {\n        eventPluginContext.cancelled = true;\n      }\n\n      return !!callback && callback(eventPluginContext);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled || !this.config.isValid) {\n      this.config.log.info(\"Event submission is currently disabled.\");\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = \"log\";\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(\n    referenceId: string,\n    email: string,\n    description: string,\n    callback?: (response: SubmissionResponse) => void\n  ) {\n    if (\n      !referenceId ||\n      !email ||\n      !description ||\n      !this.config.enabled ||\n      !this.config.isValid\n    ) {\n      return !!callback && callback(new SubmissionResponse(500, \"cancelled\"));\n    }\n\n    const userDescription: IUserDescription = {\n      email_address: email,\n      description,\n    };\n    this.config.submissionClient.postUserDescription(\n      referenceId,\n      userDescription,\n      this.config,\n      (response: SubmissionResponse) => {\n        if (!response.success) {\n          this.config.log.error(\n            `Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`\n          );\n        }\n\n        !!callback && callback(response);\n      }\n    );\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this[\"@@_Exception\"] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this[\"@@_Exception\"];\n  }\n\n  public getException(): Error {\n    return this[\"@@_Exception\"] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this[\"@@_IsUnhandledError\"] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this[\"@@_IsUnhandledError\"];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this[\"@@_SubmissionMethod\"] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this[\"@@_SubmissionMethod\"] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (\n  status: number,\n  message: string,\n  data?: string,\n  headers?: object\n) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = \"https://collector.exceptionless.io\";\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @type {string}\n   * @private\n   */\n  private _configServerUrl: string = \"https://config.exceptionless.io\";\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = \"https://heartbeat.exceptionless.io\";\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  private _includePrivateInformation: boolean;\n  private _includeUserName: boolean;\n  private _includeMachineName: boolean;\n  private _includeIpAddress: boolean;\n  private _includeCookies: boolean;\n  private _includePostData: boolean;\n  private _includeQueryString: boolean;\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === \"function\" ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.configServerUrl = configSettings.configServerUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval =\n      configSettings.updateSettingsWhenIdleInterval;\n    this.includePrivateInformation = configSettings.includePrivateInformation;\n\n    this.environmentInfoCollector = inject(\n      configSettings.environmentInfoCollector\n    );\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager =\n      inject(configSettings.lastReferenceIdManager) ||\n      new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient =\n      inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage =\n      inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._configServerUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @returns {string}\n   */\n  public get configServerUrl(): string {\n    return this._configServerUrl;\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @param value\n   */\n  public set configServerUrl(value: string) {\n    if (!!value) {\n      this._configServerUrl = value;\n      this.log.info(`configServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 120000) {\n      value = 120000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings[\"@@DataExclusions\"];\n    return this._dataExclusions.concat(\n      (exclusions && exclusions.split(\",\")) || []\n    );\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(\n      this._dataExclusions,\n      ...exclusions\n    );\n  }\n\n  /**\n   * Gets a value indicating whether to include private information about the local machine.\n   * @returns {boolean}\n   */\n  public get includePrivateInformation(): boolean {\n    return this._includePrivateInformation;\n  }\n\n  /**\n   * Sets a value indicating whether to include private information about the local machine\n   * @param value\n   */\n  public set includePrivateInformation(value: boolean) {\n    const val = value || false;\n    this._includePrivateInformation = val;\n    this._includeUserName = val;\n    this._includeMachineName = val;\n    this._includeIpAddress = val;\n    this._includeCookies = val;\n    this._includePostData = val;\n    this._includeQueryString = val;\n    this.log.info(`includePrivateInformation: ${val}`);\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include User Name.\n   * @returns {boolean}\n   */\n  public get includeUserName(): boolean {\n    return this._includeUserName;\n  }\n\n  /**\n   * Sets a value indicating whether to include User Name.\n   * @param value\n   */\n  public set includeUserName(value: boolean) {\n    this._includeUserName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include MachineName in MachineInfo.\n   * @returns {boolean}\n   */\n  public get includeMachineName(): boolean {\n    return this._includeMachineName;\n  }\n\n  /**\n   * Sets a value indicating whether to include MachineName in MachineInfo.\n   * @param value\n   */\n  public set includeMachineName(value: boolean) {\n    this._includeMachineName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @returns {boolean}\n   */\n  public get includeIpAddress(): boolean {\n    return this._includeIpAddress;\n  }\n\n  /**\n   * Sets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @param value\n   */\n  public set includeIpAddress(value: boolean) {\n    this._includeIpAddress = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeCookies(): boolean {\n    return this._includeCookies;\n  }\n\n  /**\n   * Sets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @param value\n   */\n  public set includeCookies(value: boolean) {\n    this._includeCookies = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @returns {boolean}\n   */\n  public get includePostData(): boolean {\n    return this._includePostData;\n  }\n\n  /**\n   * Sets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @param value\n   */\n  public set includePostData(value: boolean) {\n    this._includePostData = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeQueryString(): boolean {\n    return this._includeQueryString;\n  }\n\n  /**\n   * Sets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @param value\n   */\n  public set includeQueryString(value: boolean) {\n    this._includeQueryString = value || false;\n    this.changed();\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings[\"@@UserAgentBotPatterns\"];\n    return this._userAgentBotPatterns.concat(\n      (patterns && patterns.split(\",\")) || []\n    );\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(\n      this._userAgentBotPatterns,\n      ...userAgentBotPatterns\n    );\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return p1.priority < p2.priority ? -1 : p1.priority > p2.priority ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(\n    name: string,\n    priority: number,\n    pluginAction: (context: EventPluginContext, next?: () => void) => void\n  ): void;\n  public addPlugin(\n    pluginOrName: IEventPlugin | string,\n    priority?: number,\n    pluginAction?: (context: EventPluginContext, next?: () => void) => void\n  ): void {\n    const plugin: IEventPlugin = !!pluginAction\n      ? { name: pluginOrName as string, priority, run: pluginAction }\n      : (pluginOrName as IEventPlugin);\n    if (!plugin || !plugin.run) {\n      this.log.error(\"Add plugin failed: Run method not defined\");\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string =\n      typeof pluginOrName === \"string\" ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error(\"Remove plugin failed: Plugin name not defined\");\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData[\"@version\"] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(\n    userInfoOrIdentity: IUserInfo | string,\n    name?: string\n  ): void {\n    const USER_KEY: string = \"@user\"; // optimization for minifier.\n    const userInfo: IUserInfo =\n      typeof userInfoOrIdentity !== \"string\"\n        ? userInfoOrIdentity\n        : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean =\n      !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(\n      `user identity: ${shouldRemove ? \"null\" : userInfo.identity}`\n    );\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return \"exceptionless-js/1.0.0.0\";\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(\n    sendHeartbeats: boolean = true,\n    heartbeatInterval: number = 30000\n  ): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = { includePrivateInformation: true };\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(\n    success: boolean,\n    settings: any,\n    settingsVersion: number = -1,\n    exception: any = null,\n    message: string = null\n  ) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string =\n    \"must contain between 8 and 100 alphanumeric or '-' characters.\"; // optimization for minifier.\n\n  constructor(\n    event: IEvent,\n    client: ExceptionlessClient,\n    pluginContextData?: ContextData\n  ) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error(\"Invalid name\");\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty(\"@ref:\" + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error(\"Must be a valid latitude value between -90.0 and 90.0.\");\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error(\n        \"Must be a valid longitude value between -180.0 and 180.0.\"\n      );\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(\n    userInfoOrIdentity: IUserInfo | string,\n    name?: string\n  ): EventBuilder {\n    const userInfo =\n      typeof userInfoOrIdentity !== \"string\"\n        ? userInfoOrIdentity\n        : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty(\"@user\", userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(\n    emailAddress: string,\n    description: string\n  ): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty(\"@user_description\", {\n        email_address: emailAddress,\n        description,\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty(\"@stack\", stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(\n    manualStackingKey: string,\n    title?: string\n  ): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(\n    name: string,\n    value: any,\n    maxDepth?: number,\n    excludedPropertyNames?: string[]\n  ): EventBuilder {\n    if (!name || value === undefined || value == null) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(\n      Utils.stringify(\n        value,\n        this.client.config.dataExclusions.concat(excludedPropertyNames || []),\n        maxDepth\n      )\n    );\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags(\"Critical\");\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData[\"@request\"] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = code >= 48 && code <= 57;\n      const isLetter =\n        (code >= 65 && code <= 90) || (code >= 97 && code <= 122);\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = \"ConfigurationDefaultsPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(\n          Utils.stringify(defaultData[key], config.dataExclusions)\n        );\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = \"DuplicateCheckerPlugin\";\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(\n    getCurrentTime: () => number = () => Date.now(),\n    interval: number = 30000\n  ) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(e: IInnerError): number {\n      let hash = 0;\n      while (e) {\n        if (e.message && e.message.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(e.message);\n        }\n        if (e.stack_trace && e.stack_trace.length) {\n          hash +=\n            (hash * 397) ^ Utils.getHashCode(JSON.stringify(e.stack_trace));\n        }\n        e = e.inner;\n      }\n\n      return hash;\n    }\n\n    const error = context.event.data[\"@error\"];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter(\n        (s) => s.hashCode === hashCode\n      )[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info(\"Ignoring duplicate event with hash: \" + hashCode);\n        context.cancelled = true;\n      }\n\n      if (\n        !context.cancelled &&\n        this._processedHashcodes.some(\n          (h) => h.hash === hashCode && h.timestamp >= now - this._interval\n        )\n      ) {\n        context.log.trace(\"Adding event with hash: \" + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace(\n          \"Enqueueing event with hash: \" + hashCode + \"to cache.\"\n        );\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = \"EnvironmentInfoPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = \"@environment\"; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(\n        context\n      );\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = \"ErrorPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = \"@error\"; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      \"arguments\",\n      \"column\",\n      \"columnNumber\",\n      \"description\",\n      \"fileName\",\n      \"message\",\n      \"name\",\n      \"number\",\n      \"line\",\n      \"lineNumber\",\n      \"opera#sourceloc\",\n      \"sourceId\",\n      \"sourceURL\",\n      \"stack\",\n      \"stackArray\",\n      \"stacktrace\",\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = \"error\";\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error(\"No error parser was defined.\");\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(\n            Utils.stringify(\n              exception,\n              config.dataExclusions.concat(ignoredProperties)\n            )\n          );\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data[\"@ext\"] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = \"EventExclusionPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || \"\").toLowerCase().trim()) {\n        case \"trace\":\n        case \"true\":\n        case \"1\":\n        case \"yes\":\n          return 0;\n        case \"debug\":\n          return 1;\n        case \"info\":\n          return 2;\n        case \"warn\":\n          return 3;\n        case \"error\":\n          return 4;\n        case \"fatal\":\n          return 5;\n        case \"off\":\n        case \"false\":\n        case \"0\":\n        case \"no\":\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(\n      configSettings: object,\n      loggerName: string = \"*\"\n    ): number {\n      return getLogLevel(\n        getTypeAndSourceSetting(configSettings, \"log\", loggerName, \"Trace\") + \"\"\n      );\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(\n      configSettings: Object = {},\n      type: string,\n      source: string,\n      defaultValue?: string | boolean\n    ): string | boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === \"log\";\n      const sourcePrefix = `@@${type}:`;\n\n      const value = configSettings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in configSettings) {\n        if (\n          Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) &&\n          Utils.isMatch(source, [key.substring(sourcePrefix.length)])\n        ) {\n          return !isLog\n            ? Utils.toBoolean(configSettings[key])\n            : configSettings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === \"log\") {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data[\"@level\"]);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info(\"Cancelling log event due to minimum log level.\");\n        context.cancelled = true;\n      }\n    } else if (ev.type === \"error\") {\n      let error: IInnerError = ev.data[\"@error\"];\n      while (!context.cancelled && error) {\n        if (\n          getTypeAndSourceSetting(settings, ev.type, error.type, true) === false\n        ) {\n          log.info(\n            `Cancelling error from excluded exception type: ${error.type}`\n          );\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (\n      getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false\n    ) {\n      log.info(\n        `Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`\n      );\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = \"ModuleInfoPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = \"@error\"; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (\n      context.event.data[ERROR_KEY] &&\n      !context.event.data[\"@error\"].modules &&\n      !!collector\n    ) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = \"RequestInfoPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = \"@request\"; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (\n          Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)\n        ) {\n          context.log.info(\n            \"Cancelling event as the request user agent matches a known bot pattern\"\n          );\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = \"SubmissionMethodPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data[\"@submission_method\"] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items\n      .slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {}\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys\n        .map((key) => {\n          try {\n            const timestamp = this.getTimestamp(key);\n            if (!timestamp) {\n              this.safeDelete(key);\n              return null;\n            }\n            return timestamp;\n          } catch (error) {\n            this.safeDelete(key);\n            return null;\n          }\n        })\n        .filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === \"string\") {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = \"__storage_test__\";\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(\n    namespace: string,\n    prefix: string = \"com.exceptionless.\",\n    maxItems: number = 20\n  ) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + \"-\";\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage).filter(\n      (key) => key.indexOf(this.prefix) === 0\n    );\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] =\n        (typeof parameters === \"string\" ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = \"<anonymous>\";\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace(\"?\", ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0,\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = \"@@_TraceKit.StackTrace\"; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[\n      TRACEKIT_STACK_TRACE_KEY\n    ]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error(\"Unable to parse the exceptions stack trace.\");\n    }\n\n    const message =\n      typeof exception === \"string\" ? (exception as any) : undefined;\n    return {\n      type: stackTrace.name || \"Error\",\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || []),\n    };\n  }\n}\n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\n      \"script\"\n    );\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src.split(\"?\")[0],\n            version: Utils.parseVersion(scripts[index].src),\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: \"Script Tag\",\n            version: Utils.getHashCode(scripts[index].innerHTML).toString(),\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === \"https:\",\n      host: location.hostname,\n      port:\n        location.port && location.port !== \"\"\n          ? parseInt(location.port, 10)\n          : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO'\n    };\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(document.cookie, exclusions);\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = Utils.parseQueryString(\n        location.search.substring(1),\n        exclusions\n      );\n    }\n\n    if (document.referrer && document.referrer !== \"\") {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage(\"q\", prefix, maxQueueItems);\n    this.settings = new BrowserStorage(\"settings\", prefix, 1);\n  }\n}\n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create() };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(\n    request: SubmissionRequest,\n    callback?: SubmissionCallback,\n    isAppExiting?: boolean\n  ) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = \"timeout\"; // optimization for minifier.\n    const LOADED: string = \"loaded\"; // optimization for minifier.\n    const WITH_CREDENTIALS: string = \"withCredentials\"; // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhrRequest: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || \"\").split(\"\\u000d\\u000a\");\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf(\"\\u003a\\u0020\");\n          if (separator > 0) {\n            headers[\n              trim(headerPair.substring(0, separator).toLowerCase())\n            ] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhrRequest.statusText;\n      const responseText: string = xhrRequest.responseText;\n      let status: number = xhrRequest.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = \"Unable to connect to server.\";\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === \"POST\" ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhrRequest as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf(\"message\") !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback &&\n        callback(\n          status || 500,\n          message || \"\",\n          responseText,\n          parseResponseHeaders(\n            xhrRequest.getAllResponseHeaders &&\n              xhrRequest.getAllResponseHeaders()\n          )\n        );\n    }\n\n    function createRequest(\n      userAgent: string,\n      method: string,\n      uri: string\n    ): XMLHttpRequest {\n      let xmlRequest: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xmlRequest) {\n        xmlRequest.open(method, uri, true);\n\n        xmlRequest.setRequestHeader(\"X-Exceptionless-Client\", userAgent);\n        if (method === \"POST\") {\n          xmlRequest.setRequestHeader(\"Content-Type\", \"application/json\");\n        }\n      } else if (typeof XDomainRequest !== \"undefined\") {\n        useSetTimeout = true;\n        xmlRequest = new XDomainRequest();\n        xmlRequest.open(\n          method,\n          location.protocol === \"http:\" ? uri.replace(\"https:\", \"http:\") : uri\n        );\n      } else {\n        xmlRequest = null;\n      }\n\n      if (xmlRequest) {\n        xmlRequest.timeout = 10000;\n      }\n\n      return xmlRequest;\n    }\n\n    const url = `${request.url}${\n      request.url.indexOf(\"?\") === -1 ? \"?\" : \"&\"\n    }access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || \"POST\", url);\n    if (!xhr) {\n      return callback && callback(503, \"CORS not supported.\");\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => {};\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete(\"error\", xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\n(function init() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName(\"script\");\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (\n        scripts[index].src &&\n        scripts[index].src.indexOf(\"/exceptionless\") > -1\n      ) {\n        return Utils.parseQueryString(scripts[index].src.split(\"?\").pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(\n    stackTrace: TraceKit.StackTrace,\n    options?: any\n  ): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(\n      new Error(stackTrace.message || (options || {}).status || \"Script error\"),\n      \"onerror\"\n    );\n    builder.pluginContextData[\"@@_TraceKit.StackTrace\"] = stackTrace;\n    builder.submit();\n  }\n\n  if (typeof document === \"undefined\") {\n    return;\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function () {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings) {\n    if (settings.apiKey) {\n      defaults.apiKey = settings.apiKey;\n    }\n\n    if (settings.serverUrl) {\n      defaults.serverUrl = settings.serverUrl;\n    }\n\n    if (typeof settings.includePrivateInformation === \"string\") {\n      defaults.includePrivateInformation =\n        settings.includePrivateInformation === \"false\" ? false : true;\n    }\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n"]}