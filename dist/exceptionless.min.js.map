{"version":3,"sources":["tracekit.js","exceptionless.min.js","/source/exceptionless.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","wrapped","apply","this","arguments","e","report","subscribe","handler","installGlobalHandler","handlers","push","unsubscribe","i","length","splice","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastArgs","lastArgs","lastException","ex","setTimeout","incomplete","loadSource","remoteFetching","getXHR","XMLHttpRequest","ActiveXObject","request","open","send","responseText","getSource","sourceCache","source","domain","document","match","exec","split","m","reFunctionArgNames","reGuessFunction","maxLines","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","args","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","indexOf","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","computeStackTraceOfCaller","Error","ofCaller","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","module","exports","define","amd","global","root","factory","require","exceptionless","parseDate","value","dateRegx","a","Date","getDefaultsSettingsFromScriptTag","Utils","parseQueryString","pop","processUnhandledException","stackTrace","options","builder","ExceptionlessClient","createUnhandledException","status","pluginContextData","submit","__extends","d","b","__","constructor","p","create","SubmissionResponse","statusCode","success","badRequest","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","requestEntityTooLarge","SettingsManager","onChanged","_handlers","applySavedServerSettings","config","isValid","savedSettings","getSavedServerSettings","log","info","version","settings","merge","changed","getVersion","checkVersion","currentVersion","updateSettings","_this","enabled","unableToUpdateMessage","error","submissionClient","getSettings","response","warn","savedServerSettings","newSettings","settingsVersion","storage","save","get","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","level","console","msg","NullLog","EventPluginContext","client","contextData","ContextData","defineProperty","enumerable","configurable","EventPluginManager","run","callback","plugin","next","cancelled","plugins","wrappedPlugins","priority","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","HeartbeatPlugin","heartbeatInterval","_interval","clearInterval","_intervalId","user","data","identity","setInterval","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","guid","DefaultEventQueue","_processingQueue","_config","enqueue","eventWillNotBeQueued","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","queue","logText","process","isAppExiting","queueNotProcessed","events_1","submissionBatchSize","serverUrl","postEvents","map","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_queueTimer","onProcessQueue","isQueueProcessingSuspended","noSubmission","removeEvents","round","remove","InMemoryStorageProvider","maxQueueItems","InMemoryStorage","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","parseInt","addRange","target","values","_i","getHashCode","hash","character","charCodeAt","getCookies","cookies","exclusions","cookie","isMatch","isEmpty","s4","random","defaultValues","parseVersion","versionRegex","matches","query","pairs","pair","decodeURIComponent","randomNumber","patterns","ignoreCase","trim","toLowerCase","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","toBoolean","defaultValue","Configuration","configSettings","inject","fn","defaultTags","defaultData","lastReferenceIdManager","_serverUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","defaults","updateSettingsWhenIdleInterval","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","_apiKey","set","addDataExclusions","addUserAgentBotPatterns","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","USER_KEY","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","_defaultSettings","EventBuilder","_validIdentifierErrorMessage","setType","setSource","setReferenceId","isValidIdentifier","setEventReference","id","setProperty","setMessage","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","email_address","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","tags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","submitEvent","isDigit","isLetter","isMinus","setException","getException","markAsUnhandledError","setSubmissionMethod","getSubmissionMethod","settingsOrApiKey","updateSettingsTimer","_timeoutId","createException","createEvent","submitException","submissionMethod","submitUnhandledException","createFeatureUsage","feature","submitFeatureUsage","createLog","sourceOrMessage","callee","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","date","ctx","ev","updateUserEmailAndDescription","email","userDescription","getLastReferenceId","initialDelay","clearTimeout","interval","_instance","tag","ERROR_KEY","ignoredProperties","parser","additionalData","collector","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","user_agent","ENVIRONMENT_KEY","environmentInfo","getEnvironmentInfo","getCurrentTime","now","_mergedEvents","_processedHashcodes","_getCurrentTime","shift","resubmit","hashCode","stack_trace","count","now_1","merged","filter","incrementCount","updateDate","h","MergedEvent","_context","_count","getLogLevel","getMinLogLevel","loggerName","getTypeAndSourceSetting","isLog","sourcePrefix","minLogLevel","logLevel","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","read","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","BrowserStorage","_super","namespace","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","DefaultErrorParser","getParameters","parameters","params","getStackFrames","stackFrames","ANONYMOUS","frames","frame","file_name","line_number","TRACEKIT_STACK_TRACE_KEY","DefaultModuleCollector","module_id","innerHTML","DefaultRequestInfoCollector","navigator","is_secure","protocol","host","hostname","port","pathname","query_string","search","referrer","DefaultSubmissionAdapter","complete","xhr","parseResponseHeaders","headerStr","headerPairs","headerPair","separator","isCompleted","statusText","TIMEOUT","LOADED","responseBody","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","BrowserStorageProvider","stackTraceLimit","Infinity"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof module !== 'undefined' && module.exports && this.module !== module) {\n    module.exports = TraceKit;\n} else if (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof module !== 'undefined' && module.exports && this.module !== module) {\n    module.exports = TraceKit;\n} else if (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n\n\r\n(function(root, factory) {\r\n  var require, exports, module;\r\n  if (typeof define === 'function' && define.amd) {\r\n    define('exceptionless', [\"require\",\"exports\",\"module\",\"TraceKit\"], factory);\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(require, exports, module, require('TraceKit'));\r\n  } else {\r\n    root.exceptionless = factory(require, exports, module, root.TraceKit);\r\n  }\r\n}(this, function(require, exports, module, TraceKit) {\r\nif (!require) {\r\n\trequire = function(name) {\r\n\t\treturn (typeof window !== \"undefined\" ? window : global)[name];\r\n\t}\r\n}\r\nif (!exports) {\r\n\tvar exports = {};\r\n}\r\n\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar TraceKit = require('TraceKit');\r\nvar SubmissionResponse = (function () {\r\n    function SubmissionResponse(statusCode, message) {\r\n        this.success = false;\r\n        this.badRequest = false;\r\n        this.serviceUnavailable = false;\r\n        this.paymentRequired = false;\r\n        this.unableToAuthenticate = false;\r\n        this.notFound = false;\r\n        this.requestEntityTooLarge = false;\r\n        this.statusCode = statusCode;\r\n        this.message = message;\r\n        this.success = statusCode >= 200 && statusCode <= 299;\r\n        this.badRequest = statusCode === 400;\r\n        this.serviceUnavailable = statusCode === 503;\r\n        this.paymentRequired = statusCode === 402;\r\n        this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\r\n        this.notFound = statusCode === 404;\r\n        this.requestEntityTooLarge = statusCode === 413;\r\n    }\r\n    return SubmissionResponse;\r\n}());\r\nexports.SubmissionResponse = SubmissionResponse;\r\nvar SettingsManager = (function () {\r\n    function SettingsManager() {\r\n    }\r\n    SettingsManager.onChanged = function (handler) {\r\n        !!handler && this._handlers.push(handler);\r\n    };\r\n    SettingsManager.applySavedServerSettings = function (config) {\r\n        if (!config || !config.isValid) {\r\n            return;\r\n        }\r\n        var savedSettings = this.getSavedServerSettings(config);\r\n        config.log.info(\"Applying saved settings: v\" + savedSettings.version);\r\n        config.settings = Utils.merge(config.settings, savedSettings.settings);\r\n        this.changed(config);\r\n    };\r\n    SettingsManager.getVersion = function (config) {\r\n        if (!config || !config.isValid) {\r\n            return 0;\r\n        }\r\n        var savedSettings = this.getSavedServerSettings(config);\r\n        return savedSettings.version || 0;\r\n    };\r\n    SettingsManager.checkVersion = function (version, config) {\r\n        var currentVersion = this.getVersion(config);\r\n        if (version <= currentVersion) {\r\n            return;\r\n        }\r\n        config.log.info(\"Updating settings from v\" + currentVersion + \" to v\" + version);\r\n        this.updateSettings(config, currentVersion);\r\n    };\r\n    SettingsManager.updateSettings = function (config, version) {\r\n        var _this = this;\r\n        if (!config || !config.enabled) {\r\n            return;\r\n        }\r\n        var unableToUpdateMessage = 'Unable to update settings';\r\n        if (!config.isValid) {\r\n            config.log.error(unableToUpdateMessage + \": ApiKey is not set.\");\r\n            return;\r\n        }\r\n        if (!version || version < 0) {\r\n            version = this.getVersion(config);\r\n        }\r\n        config.log.info(\"Checking for updated settings from: v\" + version + \".\");\r\n        config.submissionClient.getSettings(config, version, function (response) {\r\n            if (!config || !response || !response.success || !response.settings) {\r\n                config.log.warn(unableToUpdateMessage + \": \" + response.message);\r\n                return;\r\n            }\r\n            config.settings = Utils.merge(config.settings, response.settings);\r\n            var savedServerSettings = SettingsManager.getSavedServerSettings(config);\r\n            for (var key in savedServerSettings) {\r\n                if (response.settings[key]) {\r\n                    continue;\r\n                }\r\n                delete config.settings[key];\r\n            }\r\n            var newSettings = {\r\n                version: response.settingsVersion,\r\n                settings: response.settings\r\n            };\r\n            config.storage.settings.save(newSettings);\r\n            config.log.info(\"Updated settings: v\" + newSettings.version);\r\n            _this.changed(config);\r\n        });\r\n    };\r\n    SettingsManager.changed = function (config) {\r\n        var handlers = this._handlers;\r\n        for (var index = 0; index < handlers.length; index++) {\r\n            try {\r\n                handlers[index](config);\r\n            }\r\n            catch (ex) {\r\n                config.log.error(\"Error calling onChanged handler: \" + ex);\r\n            }\r\n        }\r\n    };\r\n    SettingsManager.getSavedServerSettings = function (config) {\r\n        var item = config.storage.settings.get()[0];\r\n        if (item && item.value && item.value.version && item.value.settings) {\r\n            return item.value;\r\n        }\r\n        return { version: 0, settings: {} };\r\n    };\r\n    SettingsManager._handlers = [];\r\n    return SettingsManager;\r\n}());\r\nexports.SettingsManager = SettingsManager;\r\nvar DefaultLastReferenceIdManager = (function () {\r\n    function DefaultLastReferenceIdManager() {\r\n        this._lastReferenceId = null;\r\n    }\r\n    DefaultLastReferenceIdManager.prototype.getLast = function () {\r\n        return this._lastReferenceId;\r\n    };\r\n    DefaultLastReferenceIdManager.prototype.clearLast = function () {\r\n        this._lastReferenceId = null;\r\n    };\r\n    DefaultLastReferenceIdManager.prototype.setLast = function (eventId) {\r\n        this._lastReferenceId = eventId;\r\n    };\r\n    return DefaultLastReferenceIdManager;\r\n}());\r\nexports.DefaultLastReferenceIdManager = DefaultLastReferenceIdManager;\r\nvar ConsoleLog = (function () {\r\n    function ConsoleLog() {\r\n    }\r\n    ConsoleLog.prototype.trace = function (message) {\r\n        this.log('trace', message);\r\n    };\r\n    ConsoleLog.prototype.info = function (message) {\r\n        this.log('info', message);\r\n    };\r\n    ConsoleLog.prototype.warn = function (message) {\r\n        this.log('warn', message);\r\n    };\r\n    ConsoleLog.prototype.error = function (message) {\r\n        this.log('error', message);\r\n    };\r\n    ConsoleLog.prototype.log = function (level, message) {\r\n        if (console) {\r\n            var msg = \"[\" + level + \"] Exceptionless: \" + message;\r\n            if (console[level]) {\r\n                console[level](msg);\r\n            }\r\n            else if (console.log) {\r\n                console[\"log\"](msg);\r\n            }\r\n        }\r\n    };\r\n    return ConsoleLog;\r\n}());\r\nexports.ConsoleLog = ConsoleLog;\r\nvar NullLog = (function () {\r\n    function NullLog() {\r\n    }\r\n    NullLog.prototype.trace = function (message) { };\r\n    NullLog.prototype.info = function (message) { };\r\n    NullLog.prototype.warn = function (message) { };\r\n    NullLog.prototype.error = function (message) { };\r\n    return NullLog;\r\n}());\r\nexports.NullLog = NullLog;\r\nvar EventPluginContext = (function () {\r\n    function EventPluginContext(client, event, contextData) {\r\n        this.client = client;\r\n        this.event = event;\r\n        this.contextData = contextData ? contextData : new ContextData();\r\n    }\r\n    Object.defineProperty(EventPluginContext.prototype, \"log\", {\r\n        get: function () {\r\n            return this.client.config.log;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return EventPluginContext;\r\n}());\r\nexports.EventPluginContext = EventPluginContext;\r\nvar EventPluginManager = (function () {\r\n    function EventPluginManager() {\r\n    }\r\n    EventPluginManager.run = function (context, callback) {\r\n        var wrap = function (plugin, next) {\r\n            return function () {\r\n                try {\r\n                    if (!context.cancelled) {\r\n                        plugin.run(context, next);\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    context.cancelled = true;\r\n                    context.log.error(\"Error running plugin '\" + plugin.name + \"': \" + ex.message + \". Discarding Event.\");\r\n                }\r\n                if (context.cancelled && !!callback) {\r\n                    callback(context);\r\n                }\r\n            };\r\n        };\r\n        var plugins = context.client.config.plugins;\r\n        var wrappedPlugins = [];\r\n        if (!!callback) {\r\n            wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\r\n        }\r\n        for (var index = plugins.length - 1; index > -1; index--) {\r\n            wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\r\n        }\r\n        wrappedPlugins[0]();\r\n    };\r\n    EventPluginManager.addDefaultPlugins = function (config) {\r\n        config.addPlugin(new ConfigurationDefaultsPlugin());\r\n        config.addPlugin(new ErrorPlugin());\r\n        config.addPlugin(new DuplicateCheckerPlugin());\r\n        config.addPlugin(new EventExclusionPlugin());\r\n        config.addPlugin(new ModuleInfoPlugin());\r\n        config.addPlugin(new RequestInfoPlugin());\r\n        config.addPlugin(new EnvironmentInfoPlugin());\r\n        config.addPlugin(new SubmissionMethodPlugin());\r\n    };\r\n    return EventPluginManager;\r\n}());\r\nexports.EventPluginManager = EventPluginManager;\r\nvar HeartbeatPlugin = (function () {\r\n    function HeartbeatPlugin(heartbeatInterval) {\r\n        if (heartbeatInterval === void 0) { heartbeatInterval = 30000; }\r\n        this.priority = 100;\r\n        this.name = 'HeartbeatPlugin';\r\n        this._interval = heartbeatInterval;\r\n    }\r\n    HeartbeatPlugin.prototype.run = function (context, next) {\r\n        clearInterval(this._intervalId);\r\n        var user = context.event.data['@user'];\r\n        if (user && user.identity) {\r\n            this._intervalId = setInterval(function () { return context.client.submitSessionHeartbeat(user.identity); }, this._interval);\r\n        }\r\n        next && next();\r\n    };\r\n    return HeartbeatPlugin;\r\n}());\r\nexports.HeartbeatPlugin = HeartbeatPlugin;\r\nvar ReferenceIdPlugin = (function () {\r\n    function ReferenceIdPlugin() {\r\n        this.priority = 20;\r\n        this.name = 'ReferenceIdPlugin';\r\n    }\r\n    ReferenceIdPlugin.prototype.run = function (context, next) {\r\n        if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\r\n            context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\r\n        }\r\n        next && next();\r\n    };\r\n    return ReferenceIdPlugin;\r\n}());\r\nexports.ReferenceIdPlugin = ReferenceIdPlugin;\r\nvar DefaultEventQueue = (function () {\r\n    function DefaultEventQueue(config) {\r\n        this._handlers = [];\r\n        this._processingQueue = false;\r\n        this._config = config;\r\n    }\r\n    DefaultEventQueue.prototype.enqueue = function (event) {\r\n        var eventWillNotBeQueued = 'The event will not be queued.';\r\n        var config = this._config;\r\n        var log = config.log;\r\n        if (!config.enabled) {\r\n            log.info(\"Configuration is disabled. \" + eventWillNotBeQueued);\r\n            return;\r\n        }\r\n        if (!config.isValid) {\r\n            log.info(\"Invalid Api Key. \" + eventWillNotBeQueued);\r\n            return;\r\n        }\r\n        if (this.areQueuedItemsDiscarded()) {\r\n            log.info(\"Queue items are currently being discarded. \" + eventWillNotBeQueued);\r\n            return;\r\n        }\r\n        this.ensureQueueTimer();\r\n        var timestamp = config.storage.queue.save(event);\r\n        var logText = \"type=\" + event.type + \" \" + (!!event.reference_id ? 'refid=' + event.reference_id : '');\r\n        if (timestamp) {\r\n            log.info(\"Enqueuing event: \" + timestamp + \" \" + logText);\r\n        }\r\n        else {\r\n            log.error(\"Could not enqueue event \" + logText);\r\n        }\r\n    };\r\n    DefaultEventQueue.prototype.process = function (isAppExiting) {\r\n        var _this = this;\r\n        var queueNotProcessed = 'The queue will not be processed.';\r\n        var config = this._config;\r\n        var log = config.log;\r\n        if (this._processingQueue) {\r\n            return;\r\n        }\r\n        log.info('Processing queue...');\r\n        if (!config.enabled) {\r\n            log.info(\"Configuration is disabled. \" + queueNotProcessed);\r\n            return;\r\n        }\r\n        if (!config.isValid) {\r\n            log.info(\"Invalid Api Key. \" + queueNotProcessed);\r\n            return;\r\n        }\r\n        this._processingQueue = true;\r\n        this.ensureQueueTimer();\r\n        try {\r\n            var events_1 = config.storage.queue.get(config.submissionBatchSize);\r\n            if (!events_1 || events_1.length === 0) {\r\n                this._processingQueue = false;\r\n                return;\r\n            }\r\n            log.info(\"Sending \" + events_1.length + \" events to \" + config.serverUrl + \".\");\r\n            config.submissionClient.postEvents(events_1.map(function (e) { return e.value; }), config, function (response) {\r\n                _this.processSubmissionResponse(response, events_1);\r\n                _this.eventsPosted(events_1.map(function (e) { return e.value; }), response);\r\n                log.info('Finished processing queue.');\r\n                _this._processingQueue = false;\r\n            }, isAppExiting);\r\n        }\r\n        catch (ex) {\r\n            log.error(\"Error processing queue: \" + ex);\r\n            this.suspendProcessing();\r\n            this._processingQueue = false;\r\n        }\r\n    };\r\n    DefaultEventQueue.prototype.suspendProcessing = function (durationInMinutes, discardFutureQueuedItems, clearQueue) {\r\n        var config = this._config;\r\n        if (!durationInMinutes || durationInMinutes <= 0) {\r\n            durationInMinutes = 5;\r\n        }\r\n        config.log.info(\"Suspending processing for \" + durationInMinutes + \" minutes.\");\r\n        this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\r\n        if (discardFutureQueuedItems) {\r\n            this._discardQueuedItemsUntil = this._suspendProcessingUntil;\r\n        }\r\n        if (clearQueue) {\r\n            config.storage.queue.clear();\r\n        }\r\n    };\r\n    DefaultEventQueue.prototype.onEventsPosted = function (handler) {\r\n        !!handler && this._handlers.push(handler);\r\n    };\r\n    DefaultEventQueue.prototype.eventsPosted = function (events, response) {\r\n        var handlers = this._handlers;\r\n        for (var index = 0; index < handlers.length; index++) {\r\n            try {\r\n                handlers[index](events, response);\r\n            }\r\n            catch (ex) {\r\n                this._config.log.error(\"Error calling onEventsPosted handler: \" + ex);\r\n            }\r\n        }\r\n    };\r\n    DefaultEventQueue.prototype.areQueuedItemsDiscarded = function () {\r\n        return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\r\n    };\r\n    DefaultEventQueue.prototype.ensureQueueTimer = function () {\r\n        var _this = this;\r\n        if (!this._queueTimer) {\r\n            this._queueTimer = setInterval(function () { return _this.onProcessQueue(); }, 10000);\r\n        }\r\n    };\r\n    DefaultEventQueue.prototype.isQueueProcessingSuspended = function () {\r\n        return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\r\n    };\r\n    DefaultEventQueue.prototype.onProcessQueue = function () {\r\n        if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\r\n            this.process();\r\n        }\r\n    };\r\n    DefaultEventQueue.prototype.processSubmissionResponse = function (response, events) {\r\n        var noSubmission = 'The event will not be submitted.';\r\n        var config = this._config;\r\n        var log = config.log;\r\n        if (response.success) {\r\n            log.info(\"Sent \" + events.length + \" events.\");\r\n            this.removeEvents(events);\r\n            return;\r\n        }\r\n        if (response.serviceUnavailable) {\r\n            log.error('Server returned service unavailable.');\r\n            this.suspendProcessing();\r\n            return;\r\n        }\r\n        if (response.paymentRequired) {\r\n            log.info('Too many events have been submitted, please upgrade your plan.');\r\n            this.suspendProcessing(null, true, true);\r\n            return;\r\n        }\r\n        if (response.unableToAuthenticate) {\r\n            log.info(\"Unable to authenticate, please check your configuration. \" + noSubmission);\r\n            this.suspendProcessing(15);\r\n            this.removeEvents(events);\r\n            return;\r\n        }\r\n        if (response.notFound || response.badRequest) {\r\n            log.error(\"Error while trying to submit data: \" + response.message);\r\n            this.suspendProcessing(60 * 4);\r\n            this.removeEvents(events);\r\n            return;\r\n        }\r\n        if (response.requestEntityTooLarge) {\r\n            var message = 'Event submission discarded for being too large.';\r\n            if (config.submissionBatchSize > 1) {\r\n                log.error(message + \" Retrying with smaller batch size.\");\r\n                config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\r\n            }\r\n            else {\r\n                log.error(message + \" \" + noSubmission);\r\n                this.removeEvents(events);\r\n            }\r\n            return;\r\n        }\r\n        if (!response.success) {\r\n            log.error(\"Error submitting events: \" + (response.message || 'Please check the network tab for more info.'));\r\n            this.suspendProcessing();\r\n        }\r\n    };\r\n    DefaultEventQueue.prototype.removeEvents = function (events) {\r\n        for (var index = 0; index < (events || []).length; index++) {\r\n            this._config.storage.queue.remove(events[index].timestamp);\r\n        }\r\n    };\r\n    return DefaultEventQueue;\r\n}());\r\nexports.DefaultEventQueue = DefaultEventQueue;\r\nvar InMemoryStorageProvider = (function () {\r\n    function InMemoryStorageProvider(maxQueueItems) {\r\n        if (maxQueueItems === void 0) { maxQueueItems = 250; }\r\n        this.queue = new InMemoryStorage(maxQueueItems);\r\n        this.settings = new InMemoryStorage(1);\r\n    }\r\n    return InMemoryStorageProvider;\r\n}());\r\nexports.InMemoryStorageProvider = InMemoryStorageProvider;\r\nvar DefaultSubmissionClient = (function () {\r\n    function DefaultSubmissionClient() {\r\n        this.configurationVersionHeader = 'x-exceptionless-configversion';\r\n    }\r\n    DefaultSubmissionClient.prototype.postEvents = function (events, config, callback, isAppExiting) {\r\n        var data = JSON.stringify(events);\r\n        var request = this.createRequest(config, 'POST', config.serverUrl + \"/api/v2/events\", data);\r\n        var cb = this.createSubmissionCallback(config, callback);\r\n        return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\r\n    };\r\n    DefaultSubmissionClient.prototype.postUserDescription = function (referenceId, description, config, callback) {\r\n        var path = config.serverUrl + \"/api/v2/events/by-ref/\" + encodeURIComponent(referenceId) + \"/user-description\";\r\n        var data = JSON.stringify(description);\r\n        var request = this.createRequest(config, 'POST', path, data);\r\n        var cb = this.createSubmissionCallback(config, callback);\r\n        return config.submissionAdapter.sendRequest(request, cb);\r\n    };\r\n    DefaultSubmissionClient.prototype.getSettings = function (config, version, callback) {\r\n        var request = this.createRequest(config, 'GET', config.serverUrl + \"/api/v2/projects/config?v=\" + version);\r\n        var cb = function (status, message, data, headers) {\r\n            if (status !== 200) {\r\n                return callback(new SettingsResponse(false, null, -1, null, message));\r\n            }\r\n            var settings;\r\n            try {\r\n                settings = JSON.parse(data);\r\n            }\r\n            catch (e) {\r\n                config.log.error(\"Unable to parse settings: '\" + data + \"'\");\r\n            }\r\n            if (!settings || isNaN(settings.version)) {\r\n                return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\r\n            }\r\n            callback(new SettingsResponse(true, settings.settings || {}, settings.version));\r\n        };\r\n        return config.submissionAdapter.sendRequest(request, cb);\r\n    };\r\n    DefaultSubmissionClient.prototype.sendHeartbeat = function (sessionIdOrUserId, closeSession, config) {\r\n        var request = this.createRequest(config, 'GET', config.heartbeatServerUrl + \"/api/v2/events/session/heartbeat?id=\" + sessionIdOrUserId + \"&close=\" + closeSession);\r\n        config.submissionAdapter.sendRequest(request);\r\n    };\r\n    DefaultSubmissionClient.prototype.createRequest = function (config, method, url, data) {\r\n        if (data === void 0) { data = null; }\r\n        return {\r\n            method: method,\r\n            url: url,\r\n            data: data,\r\n            apiKey: config.apiKey,\r\n            userAgent: config.userAgent\r\n        };\r\n    };\r\n    DefaultSubmissionClient.prototype.createSubmissionCallback = function (config, callback) {\r\n        var _this = this;\r\n        return function (status, message, data, headers) {\r\n            var settingsVersion = headers && parseInt(headers[_this.configurationVersionHeader], 10);\r\n            SettingsManager.checkVersion(settingsVersion, config);\r\n            callback(new SubmissionResponse(status, message));\r\n        };\r\n    };\r\n    return DefaultSubmissionClient;\r\n}());\r\nexports.DefaultSubmissionClient = DefaultSubmissionClient;\r\nvar Utils = (function () {\r\n    function Utils() {\r\n    }\r\n    Utils.addRange = function (target) {\r\n        var values = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            values[_i - 1] = arguments[_i];\r\n        }\r\n        if (!target) {\r\n            target = [];\r\n        }\r\n        if (!values || values.length === 0) {\r\n            return target;\r\n        }\r\n        for (var index = 0; index < values.length; index++) {\r\n            if (values[index] && target.indexOf(values[index]) < 0) {\r\n                target.push(values[index]);\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    Utils.getHashCode = function (source) {\r\n        if (!source || source.length === 0) {\r\n            return 0;\r\n        }\r\n        var hash = 0;\r\n        for (var index = 0; index < source.length; index++) {\r\n            var character = source.charCodeAt(index);\r\n            hash = ((hash << 5) - hash) + character;\r\n            hash |= 0;\r\n        }\r\n        return hash;\r\n    };\r\n    Utils.getCookies = function (cookies, exclusions) {\r\n        var result = {};\r\n        var parts = (cookies || '').split('; ');\r\n        for (var index = 0; index < parts.length; index++) {\r\n            var cookie = parts[index].split('=');\r\n            if (!Utils.isMatch(cookie[0], exclusions)) {\r\n                result[cookie[0]] = cookie[1];\r\n            }\r\n        }\r\n        return !Utils.isEmpty(result) ? result : null;\r\n    };\r\n    Utils.guid = function () {\r\n        function s4() {\r\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        }\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    };\r\n    Utils.merge = function (defaultValues, values) {\r\n        var result = {};\r\n        for (var key in defaultValues || {}) {\r\n            if (!!defaultValues[key]) {\r\n                result[key] = defaultValues[key];\r\n            }\r\n        }\r\n        for (var key in values || {}) {\r\n            if (!!values[key]) {\r\n                result[key] = values[key];\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    Utils.parseVersion = function (source) {\r\n        if (!source) {\r\n            return null;\r\n        }\r\n        var versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\r\n        var matches = versionRegex.exec(source);\r\n        if (matches && matches.length > 0) {\r\n            return matches[0];\r\n        }\r\n        return null;\r\n    };\r\n    Utils.parseQueryString = function (query, exclusions) {\r\n        if (!query || query.length === 0) {\r\n            return null;\r\n        }\r\n        var pairs = query.split('&');\r\n        if (pairs.length === 0) {\r\n            return null;\r\n        }\r\n        var result = {};\r\n        for (var index = 0; index < pairs.length; index++) {\r\n            var pair = pairs[index].split('=');\r\n            if (!Utils.isMatch(pair[0], exclusions)) {\r\n                result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n            }\r\n        }\r\n        return !Utils.isEmpty(result) ? result : null;\r\n    };\r\n    Utils.randomNumber = function () {\r\n        return Math.floor(Math.random() * 9007199254740992);\r\n    };\r\n    Utils.isMatch = function (input, patterns, ignoreCase) {\r\n        if (ignoreCase === void 0) { ignoreCase = true; }\r\n        if (!input || typeof input !== 'string') {\r\n            return false;\r\n        }\r\n        var trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\r\n        input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\r\n        return (patterns || []).some(function (pattern) {\r\n            if (typeof pattern !== 'string') {\r\n                return false;\r\n            }\r\n            pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\r\n            if (pattern.length <= 0) {\r\n                return false;\r\n            }\r\n            var startsWithWildcard = pattern[0] === '*';\r\n            if (startsWithWildcard) {\r\n                pattern = pattern.slice(1);\r\n            }\r\n            var endsWithWildcard = pattern[pattern.length - 1] === '*';\r\n            if (endsWithWildcard) {\r\n                pattern = pattern.substring(0, pattern.length - 1);\r\n            }\r\n            if (startsWithWildcard && endsWithWildcard) {\r\n                return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\r\n            }\r\n            if (startsWithWildcard) {\r\n                return Utils.endsWith(input, pattern);\r\n            }\r\n            if (endsWithWildcard) {\r\n                return Utils.startsWith(input, pattern);\r\n            }\r\n            return input === pattern;\r\n        });\r\n    };\r\n    Utils.isEmpty = function (input) {\r\n        return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\r\n    };\r\n    Utils.startsWith = function (input, prefix) {\r\n        return input.substring(0, prefix.length) === prefix;\r\n    };\r\n    Utils.endsWith = function (input, suffix) {\r\n        return input.indexOf(suffix, input.length - suffix.length) !== -1;\r\n    };\r\n    Utils.stringify = function (data, exclusions, maxDepth) {\r\n        function stringifyImpl(obj, excludedKeys) {\r\n            var cache = [];\r\n            return JSON.stringify(obj, function (key, value) {\r\n                if (Utils.isMatch(key, excludedKeys)) {\r\n                    return;\r\n                }\r\n                if (typeof value === 'object' && !!value) {\r\n                    if (cache.indexOf(value) !== -1) {\r\n                        return;\r\n                    }\r\n                    cache.push(value);\r\n                }\r\n                return value;\r\n            });\r\n        }\r\n        if (({}).toString.call(data) === '[object Object]') {\r\n            var flattened = {};\r\n            for (var prop in data) {\r\n                var value = data[prop];\r\n                if (value === data) {\r\n                    continue;\r\n                }\r\n                flattened[prop] = data[prop];\r\n            }\r\n            return stringifyImpl(flattened, exclusions);\r\n        }\r\n        if (({}).toString.call(data) === '[object Array]') {\r\n            var result = [];\r\n            for (var index = 0; index < data.length; index++) {\r\n                result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\r\n            }\r\n            return JSON.stringify(result);\r\n        }\r\n        return stringifyImpl(data, exclusions);\r\n    };\r\n    Utils.toBoolean = function (input, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = false; }\r\n        if (typeof input === 'boolean') {\r\n            return input;\r\n        }\r\n        if (input === null || typeof input !== 'number' && typeof input !== 'string') {\r\n            return defaultValue;\r\n        }\r\n        switch ((input + '').toLowerCase().trim()) {\r\n            case 'true':\r\n            case 'yes':\r\n            case '1': return true;\r\n            case 'false':\r\n            case 'no':\r\n            case '0':\r\n            case null: return false;\r\n        }\r\n        return defaultValue;\r\n    };\r\n    return Utils;\r\n}());\r\nexports.Utils = Utils;\r\nvar Configuration = (function () {\r\n    function Configuration(configSettings) {\r\n        this.defaultTags = [];\r\n        this.defaultData = {};\r\n        this.enabled = true;\r\n        this.lastReferenceIdManager = new DefaultLastReferenceIdManager();\r\n        this.settings = {};\r\n        this._serverUrl = 'https://collector.exceptionless.io';\r\n        this._heartbeatServerUrl = 'https://heartbeat.exceptionless.io';\r\n        this._updateSettingsWhenIdleInterval = 120000;\r\n        this._dataExclusions = [];\r\n        this._userAgentBotPatterns = [];\r\n        this._plugins = [];\r\n        this._handlers = [];\r\n        function inject(fn) {\r\n            return typeof fn === 'function' ? fn(this) : fn;\r\n        }\r\n        configSettings = Utils.merge(Configuration.defaults, configSettings);\r\n        this.log = inject(configSettings.log) || new NullLog();\r\n        this.apiKey = configSettings.apiKey;\r\n        this.serverUrl = configSettings.serverUrl;\r\n        this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\r\n        this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\r\n        this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\r\n        this.errorParser = inject(configSettings.errorParser);\r\n        this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\r\n        this.moduleCollector = inject(configSettings.moduleCollector);\r\n        this.requestInfoCollector = inject(configSettings.requestInfoCollector);\r\n        this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\r\n        this.submissionAdapter = inject(configSettings.submissionAdapter);\r\n        this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\r\n        this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\r\n        this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\r\n        SettingsManager.applySavedServerSettings(this);\r\n        EventPluginManager.addDefaultPlugins(this);\r\n    }\r\n    Object.defineProperty(Configuration.prototype, \"apiKey\", {\r\n        get: function () {\r\n            return this._apiKey;\r\n        },\r\n        set: function (value) {\r\n            this._apiKey = value || null;\r\n            this.log.info(\"apiKey: \" + this._apiKey);\r\n            this.changed();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Configuration.prototype, \"isValid\", {\r\n        get: function () {\r\n            return !!this.apiKey && this.apiKey.length >= 10;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Configuration.prototype, \"serverUrl\", {\r\n        get: function () {\r\n            return this._serverUrl;\r\n        },\r\n        set: function (value) {\r\n            if (!!value) {\r\n                this._serverUrl = value;\r\n                this._heartbeatServerUrl = value;\r\n                this.log.info(\"serverUrl: \" + value);\r\n                this.changed();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Configuration.prototype, \"heartbeatServerUrl\", {\r\n        get: function () {\r\n            return this._heartbeatServerUrl;\r\n        },\r\n        set: function (value) {\r\n            if (!!value) {\r\n                this._heartbeatServerUrl = value;\r\n                this.log.info(\"heartbeatServerUrl: \" + value);\r\n                this.changed();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Configuration.prototype, \"updateSettingsWhenIdleInterval\", {\r\n        get: function () {\r\n            return this._updateSettingsWhenIdleInterval;\r\n        },\r\n        set: function (value) {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n            if (value <= 0) {\r\n                value = -1;\r\n            }\r\n            else if (value > 0 && value < 15000) {\r\n                value = 15000;\r\n            }\r\n            this._updateSettingsWhenIdleInterval = value;\r\n            this.log.info(\"updateSettingsWhenIdleInterval: \" + value);\r\n            this.changed();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Configuration.prototype, \"dataExclusions\", {\r\n        get: function () {\r\n            var exclusions = this.settings['@@DataExclusions'];\r\n            return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Configuration.prototype.addDataExclusions = function () {\r\n        var exclusions = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            exclusions[_i - 0] = arguments[_i];\r\n        }\r\n        this._dataExclusions = Utils.addRange.apply(Utils, [this._dataExclusions].concat(exclusions));\r\n    };\r\n    Object.defineProperty(Configuration.prototype, \"userAgentBotPatterns\", {\r\n        get: function () {\r\n            var patterns = this.settings['@@UserAgentBotPatterns'];\r\n            return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Configuration.prototype.addUserAgentBotPatterns = function () {\r\n        var userAgentBotPatterns = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            userAgentBotPatterns[_i - 0] = arguments[_i];\r\n        }\r\n        this._userAgentBotPatterns = Utils.addRange.apply(Utils, [this._userAgentBotPatterns].concat(userAgentBotPatterns));\r\n    };\r\n    Object.defineProperty(Configuration.prototype, \"plugins\", {\r\n        get: function () {\r\n            return this._plugins.sort(function (p1, p2) {\r\n                return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Configuration.prototype.addPlugin = function (pluginOrName, priority, pluginAction) {\r\n        var plugin = !!pluginAction ? { name: pluginOrName, priority: priority, run: pluginAction } : pluginOrName;\r\n        if (!plugin || !plugin.run) {\r\n            this.log.error('Add plugin failed: Run method not defined');\r\n            return;\r\n        }\r\n        if (!plugin.name) {\r\n            plugin.name = Utils.guid();\r\n        }\r\n        if (!plugin.priority) {\r\n            plugin.priority = 0;\r\n        }\r\n        var pluginExists = false;\r\n        var plugins = this._plugins;\r\n        for (var index = 0; index < plugins.length; index++) {\r\n            if (plugins[index].name === plugin.name) {\r\n                pluginExists = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!pluginExists) {\r\n            plugins.push(plugin);\r\n        }\r\n    };\r\n    Configuration.prototype.removePlugin = function (pluginOrName) {\r\n        var name = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\r\n        if (!name) {\r\n            this.log.error('Remove plugin failed: Plugin name not defined');\r\n            return;\r\n        }\r\n        var plugins = this._plugins;\r\n        for (var index = 0; index < plugins.length; index++) {\r\n            if (plugins[index].name === name) {\r\n                plugins.splice(index, 1);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    Configuration.prototype.setVersion = function (version) {\r\n        if (!!version) {\r\n            this.defaultData['@version'] = version;\r\n        }\r\n    };\r\n    Configuration.prototype.setUserIdentity = function (userInfoOrIdentity, name) {\r\n        var USER_KEY = '@user';\r\n        var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\r\n        var shouldRemove = !userInfo || (!userInfo.identity && !userInfo.name);\r\n        if (shouldRemove) {\r\n            delete this.defaultData[USER_KEY];\r\n        }\r\n        else {\r\n            this.defaultData[USER_KEY] = userInfo;\r\n        }\r\n        this.log.info(\"user identity: \" + (shouldRemove ? 'null' : userInfo.identity));\r\n    };\r\n    Object.defineProperty(Configuration.prototype, \"userAgent\", {\r\n        get: function () {\r\n            return 'exceptionless-js/1.4.1';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Configuration.prototype.useSessions = function (sendHeartbeats, heartbeatInterval) {\r\n        if (sendHeartbeats === void 0) { sendHeartbeats = true; }\r\n        if (heartbeatInterval === void 0) { heartbeatInterval = 30000; }\r\n        if (sendHeartbeats) {\r\n            this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\r\n        }\r\n    };\r\n    Configuration.prototype.useReferenceIds = function () {\r\n        this.addPlugin(new ReferenceIdPlugin());\r\n    };\r\n    Configuration.prototype.useLocalStorage = function () {\r\n    };\r\n    Configuration.prototype.useDebugLogger = function () {\r\n        this.log = new ConsoleLog();\r\n    };\r\n    Configuration.prototype.onChanged = function (handler) {\r\n        !!handler && this._handlers.push(handler);\r\n    };\r\n    Configuration.prototype.changed = function () {\r\n        var handlers = this._handlers;\r\n        for (var index = 0; index < handlers.length; index++) {\r\n            try {\r\n                handlers[index](this);\r\n            }\r\n            catch (ex) {\r\n                this.log.error(\"Error calling onChanged handler: \" + ex);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Configuration, \"defaults\", {\r\n        get: function () {\r\n            if (Configuration._defaultSettings === null) {\r\n                Configuration._defaultSettings = {};\r\n            }\r\n            return Configuration._defaultSettings;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Configuration._defaultSettings = null;\r\n    return Configuration;\r\n}());\r\nexports.Configuration = Configuration;\r\nvar EventBuilder = (function () {\r\n    function EventBuilder(event, client, pluginContextData) {\r\n        this._validIdentifierErrorMessage = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.';\r\n        this.target = event;\r\n        this.client = client;\r\n        this.pluginContextData = pluginContextData || new ContextData();\r\n    }\r\n    EventBuilder.prototype.setType = function (type) {\r\n        if (!!type) {\r\n            this.target.type = type;\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setSource = function (source) {\r\n        if (!!source) {\r\n            this.target.source = source;\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setReferenceId = function (referenceId) {\r\n        if (!this.isValidIdentifier(referenceId)) {\r\n            throw new Error(\"ReferenceId \" + this._validIdentifierErrorMessage);\r\n        }\r\n        this.target.reference_id = referenceId;\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setEventReference = function (name, id) {\r\n        if (!name) {\r\n            throw new Error('Invalid name');\r\n        }\r\n        if (!id || !this.isValidIdentifier(id)) {\r\n            throw new Error(\"Id \" + this._validIdentifierErrorMessage);\r\n        }\r\n        this.setProperty('@ref:' + name, id);\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setMessage = function (message) {\r\n        if (!!message) {\r\n            this.target.message = message;\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setGeo = function (latitude, longitude) {\r\n        if (latitude < -90.0 || latitude > 90.0) {\r\n            throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\r\n        }\r\n        if (longitude < -180.0 || longitude > 180.0) {\r\n            throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\r\n        }\r\n        this.target.geo = latitude + \",\" + longitude;\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setUserIdentity = function (userInfoOrIdentity, name) {\r\n        var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\r\n        if (!userInfo || (!userInfo.identity && !userInfo.name)) {\r\n            return this;\r\n        }\r\n        this.setProperty('@user', userInfo);\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setUserDescription = function (emailAddress, description) {\r\n        if (emailAddress && description) {\r\n            this.setProperty('@user_description', { email_address: emailAddress, description: description });\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setManualStackingInfo = function (signatureData, title) {\r\n        if (signatureData) {\r\n            var stack = {\r\n                signature_data: signatureData\r\n            };\r\n            if (title) {\r\n                stack.title = title;\r\n            }\r\n            this.setProperty('@stack', stack);\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setManualStackingKey = function (manualStackingKey, title) {\r\n        if (manualStackingKey) {\r\n            var data = {\r\n                'ManualStackingKey': manualStackingKey\r\n            };\r\n            this.setManualStackingInfo(data, title);\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setValue = function (value) {\r\n        if (!!value) {\r\n            this.target.value = value;\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.addTags = function () {\r\n        var tags = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            tags[_i - 0] = arguments[_i];\r\n        }\r\n        this.target.tags = Utils.addRange.apply(Utils, [this.target.tags].concat(tags));\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.setProperty = function (name, value, maxDepth, excludedPropertyNames) {\r\n        if (!name || (value === undefined || value == null)) {\r\n            return this;\r\n        }\r\n        if (!this.target.data) {\r\n            this.target.data = {};\r\n        }\r\n        var result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\r\n        if (!Utils.isEmpty(result)) {\r\n            this.target.data[name] = result;\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.markAsCritical = function (critical) {\r\n        if (critical) {\r\n            this.addTags('Critical');\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.addRequestInfo = function (request) {\r\n        if (!!request) {\r\n            this.pluginContextData['@request'] = request;\r\n        }\r\n        return this;\r\n    };\r\n    EventBuilder.prototype.submit = function (callback) {\r\n        this.client.submitEvent(this.target, this.pluginContextData, callback);\r\n    };\r\n    EventBuilder.prototype.isValidIdentifier = function (value) {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n        if (value.length < 8 || value.length > 100) {\r\n            return false;\r\n        }\r\n        for (var index = 0; index < value.length; index++) {\r\n            var code = value.charCodeAt(index);\r\n            var isDigit = (code >= 48) && (code <= 57);\r\n            var isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\r\n            var isMinus = code === 45;\r\n            if (!(isDigit || isLetter) && !isMinus) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return EventBuilder;\r\n}());\r\nexports.EventBuilder = EventBuilder;\r\nvar ContextData = (function () {\r\n    function ContextData() {\r\n    }\r\n    ContextData.prototype.setException = function (exception) {\r\n        if (exception) {\r\n            this['@@_Exception'] = exception;\r\n        }\r\n    };\r\n    Object.defineProperty(ContextData.prototype, \"hasException\", {\r\n        get: function () {\r\n            return !!this['@@_Exception'];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ContextData.prototype.getException = function () {\r\n        return this['@@_Exception'] || null;\r\n    };\r\n    ContextData.prototype.markAsUnhandledError = function () {\r\n        this['@@_IsUnhandledError'] = true;\r\n    };\r\n    Object.defineProperty(ContextData.prototype, \"isUnhandledError\", {\r\n        get: function () {\r\n            return !!this['@@_IsUnhandledError'];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ContextData.prototype.setSubmissionMethod = function (method) {\r\n        if (method) {\r\n            this['@@_SubmissionMethod'] = method;\r\n        }\r\n    };\r\n    ContextData.prototype.getSubmissionMethod = function () {\r\n        return this['@@_SubmissionMethod'] || null;\r\n    };\r\n    return ContextData;\r\n}());\r\nexports.ContextData = ContextData;\r\nvar ExceptionlessClient = (function () {\r\n    function ExceptionlessClient(settingsOrApiKey, serverUrl) {\r\n        var _this = this;\r\n        if (typeof settingsOrApiKey === 'object') {\r\n            this.config = new Configuration(settingsOrApiKey);\r\n        }\r\n        else {\r\n            this.config = new Configuration({ apiKey: settingsOrApiKey, serverUrl: serverUrl });\r\n        }\r\n        this.updateSettingsTimer(5000);\r\n        this.config.onChanged(function (config) { return _this.updateSettingsTimer(_this._timeoutId > 0 ? 5000 : 0); });\r\n        this.config.queue.onEventsPosted(function (events, response) { return _this.updateSettingsTimer(); });\r\n    }\r\n    ExceptionlessClient.prototype.createException = function (exception) {\r\n        var pluginContextData = new ContextData();\r\n        pluginContextData.setException(exception);\r\n        return this.createEvent(pluginContextData).setType('error');\r\n    };\r\n    ExceptionlessClient.prototype.submitException = function (exception, callback) {\r\n        this.createException(exception).submit(callback);\r\n    };\r\n    ExceptionlessClient.prototype.createUnhandledException = function (exception, submissionMethod) {\r\n        var builder = this.createException(exception);\r\n        builder.pluginContextData.markAsUnhandledError();\r\n        builder.pluginContextData.setSubmissionMethod(submissionMethod);\r\n        return builder;\r\n    };\r\n    ExceptionlessClient.prototype.submitUnhandledException = function (exception, submissionMethod, callback) {\r\n        this.createUnhandledException(exception, submissionMethod).submit(callback);\r\n    };\r\n    ExceptionlessClient.prototype.createFeatureUsage = function (feature) {\r\n        return this.createEvent().setType('usage').setSource(feature);\r\n    };\r\n    ExceptionlessClient.prototype.submitFeatureUsage = function (feature, callback) {\r\n        this.createFeatureUsage(feature).submit(callback);\r\n    };\r\n    ExceptionlessClient.prototype.createLog = function (sourceOrMessage, message, level) {\r\n        var builder = this.createEvent().setType('log');\r\n        if (message && level) {\r\n            builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\r\n        }\r\n        else if (message) {\r\n            builder = builder.setSource(sourceOrMessage).setMessage(message);\r\n        }\r\n        else {\r\n            var caller = arguments.callee.caller;\r\n            builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\r\n        }\r\n        return builder;\r\n    };\r\n    ExceptionlessClient.prototype.submitLog = function (sourceOrMessage, message, level, callback) {\r\n        this.createLog(sourceOrMessage, message, level).submit(callback);\r\n    };\r\n    ExceptionlessClient.prototype.createNotFound = function (resource) {\r\n        return this.createEvent().setType('404').setSource(resource);\r\n    };\r\n    ExceptionlessClient.prototype.submitNotFound = function (resource, callback) {\r\n        this.createNotFound(resource).submit(callback);\r\n    };\r\n    ExceptionlessClient.prototype.createSessionStart = function () {\r\n        return this.createEvent().setType('session');\r\n    };\r\n    ExceptionlessClient.prototype.submitSessionStart = function (callback) {\r\n        this.createSessionStart().submit(callback);\r\n    };\r\n    ExceptionlessClient.prototype.submitSessionEnd = function (sessionIdOrUserId) {\r\n        if (sessionIdOrUserId) {\r\n            this.config.log.info(\"Submitting session end: \" + sessionIdOrUserId);\r\n            this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\r\n        }\r\n    };\r\n    ExceptionlessClient.prototype.submitSessionHeartbeat = function (sessionIdOrUserId) {\r\n        if (sessionIdOrUserId) {\r\n            this.config.log.info(\"Submitting session heartbeat: \" + sessionIdOrUserId);\r\n            this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\r\n        }\r\n    };\r\n    ExceptionlessClient.prototype.createEvent = function (pluginContextData) {\r\n        return new EventBuilder({ date: new Date() }, this, pluginContextData);\r\n    };\r\n    ExceptionlessClient.prototype.submitEvent = function (event, pluginContextData, callback) {\r\n        function cancelled(context) {\r\n            if (!!context) {\r\n                context.cancelled = true;\r\n            }\r\n            return !!callback && callback(context);\r\n        }\r\n        var context = new EventPluginContext(this, event, pluginContextData);\r\n        if (!event) {\r\n            return cancelled(context);\r\n        }\r\n        if (!this.config.enabled) {\r\n            this.config.log.info('Event submission is currently disabled.');\r\n            return cancelled(context);\r\n        }\r\n        if (!event.data) {\r\n            event.data = {};\r\n        }\r\n        if (!event.tags || !event.tags.length) {\r\n            event.tags = [];\r\n        }\r\n        EventPluginManager.run(context, function (ctx) {\r\n            var config = ctx.client.config;\r\n            var ev = ctx.event;\r\n            if (!ctx.cancelled) {\r\n                if (!ev.type || ev.type.length === 0) {\r\n                    ev.type = 'log';\r\n                }\r\n                if (!ev.date) {\r\n                    ev.date = new Date();\r\n                }\r\n                config.queue.enqueue(ev);\r\n                if (ev.reference_id && ev.reference_id.length > 0) {\r\n                    ctx.log.info(\"Setting last reference id '\" + ev.reference_id + \"'\");\r\n                    config.lastReferenceIdManager.setLast(ev.reference_id);\r\n                }\r\n            }\r\n            !!callback && callback(ctx);\r\n        });\r\n    };\r\n    ExceptionlessClient.prototype.updateUserEmailAndDescription = function (referenceId, email, description, callback) {\r\n        var _this = this;\r\n        if (!referenceId || !email || !description || !this.config.enabled) {\r\n            return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\r\n        }\r\n        var userDescription = { email_address: email, description: description };\r\n        this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, function (response) {\r\n            if (!response.success) {\r\n                _this.config.log.error(\"Failed to submit user email and description for event '\" + referenceId + \"': \" + response.statusCode + \" \" + response.message);\r\n            }\r\n            !!callback && callback(response);\r\n        });\r\n    };\r\n    ExceptionlessClient.prototype.getLastReferenceId = function () {\r\n        return this.config.lastReferenceIdManager.getLast();\r\n    };\r\n    ExceptionlessClient.prototype.updateSettingsTimer = function (initialDelay) {\r\n        var _this = this;\r\n        this.config.log.info(\"Updating settings timer with delay: \" + initialDelay);\r\n        this._timeoutId = clearTimeout(this._timeoutId);\r\n        this._timeoutId = clearInterval(this._intervalId);\r\n        var interval = this.config.updateSettingsWhenIdleInterval;\r\n        if (interval > 0) {\r\n            var updateSettings = function () { return SettingsManager.updateSettings(_this.config); };\r\n            if (initialDelay > 0) {\r\n                this._timeoutId = setTimeout(updateSettings, initialDelay);\r\n            }\r\n            this._intervalId = setInterval(updateSettings, interval);\r\n        }\r\n    };\r\n    Object.defineProperty(ExceptionlessClient, \"default\", {\r\n        get: function () {\r\n            if (ExceptionlessClient._instance === null) {\r\n                ExceptionlessClient._instance = new ExceptionlessClient(null);\r\n            }\r\n            return ExceptionlessClient._instance;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ExceptionlessClient._instance = null;\r\n    return ExceptionlessClient;\r\n}());\r\nexports.ExceptionlessClient = ExceptionlessClient;\r\nvar ConfigurationDefaultsPlugin = (function () {\r\n    function ConfigurationDefaultsPlugin() {\r\n        this.priority = 10;\r\n        this.name = 'ConfigurationDefaultsPlugin';\r\n    }\r\n    ConfigurationDefaultsPlugin.prototype.run = function (context, next) {\r\n        var config = context.client.config;\r\n        var defaultTags = config.defaultTags || [];\r\n        for (var index = 0; index < defaultTags.length; index++) {\r\n            var tag = defaultTags[index];\r\n            if (!!tag && context.event.tags.indexOf(tag) < 0) {\r\n                context.event.tags.push(tag);\r\n            }\r\n        }\r\n        var defaultData = config.defaultData || {};\r\n        for (var key in defaultData) {\r\n            if (!!defaultData[key]) {\r\n                var result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\r\n                if (!Utils.isEmpty(result)) {\r\n                    context.event.data[key] = result;\r\n                }\r\n            }\r\n        }\r\n        next && next();\r\n    };\r\n    return ConfigurationDefaultsPlugin;\r\n}());\r\nexports.ConfigurationDefaultsPlugin = ConfigurationDefaultsPlugin;\r\nvar ErrorPlugin = (function () {\r\n    function ErrorPlugin() {\r\n        this.priority = 30;\r\n        this.name = 'ErrorPlugin';\r\n    }\r\n    ErrorPlugin.prototype.run = function (context, next) {\r\n        var ERROR_KEY = '@error';\r\n        var ignoredProperties = [\r\n            'arguments',\r\n            'column',\r\n            'columnNumber',\r\n            'description',\r\n            'fileName',\r\n            'message',\r\n            'name',\r\n            'number',\r\n            'line',\r\n            'lineNumber',\r\n            'opera#sourceloc',\r\n            'sourceId',\r\n            'sourceURL',\r\n            'stack',\r\n            'stackArray',\r\n            'stacktrace'\r\n        ];\r\n        var exception = context.contextData.getException();\r\n        if (!!exception) {\r\n            context.event.type = 'error';\r\n            if (!context.event.data[ERROR_KEY]) {\r\n                var config = context.client.config;\r\n                var parser = config.errorParser;\r\n                if (!parser) {\r\n                    throw new Error('No error parser was defined.');\r\n                }\r\n                var result = parser.parse(context, exception);\r\n                if (!!result) {\r\n                    var additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\r\n                    if (!Utils.isEmpty(additionalData)) {\r\n                        if (!result.data) {\r\n                            result.data = {};\r\n                        }\r\n                        result.data['@ext'] = additionalData;\r\n                    }\r\n                    context.event.data[ERROR_KEY] = result;\r\n                }\r\n            }\r\n        }\r\n        next && next();\r\n    };\r\n    return ErrorPlugin;\r\n}());\r\nexports.ErrorPlugin = ErrorPlugin;\r\nvar ModuleInfoPlugin = (function () {\r\n    function ModuleInfoPlugin() {\r\n        this.priority = 50;\r\n        this.name = 'ModuleInfoPlugin';\r\n    }\r\n    ModuleInfoPlugin.prototype.run = function (context, next) {\r\n        var ERROR_KEY = '@error';\r\n        var collector = context.client.config.moduleCollector;\r\n        if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\r\n            var modules = collector.getModules(context);\r\n            if (modules && modules.length > 0) {\r\n                context.event.data[ERROR_KEY].modules = modules;\r\n            }\r\n        }\r\n        next && next();\r\n    };\r\n    return ModuleInfoPlugin;\r\n}());\r\nexports.ModuleInfoPlugin = ModuleInfoPlugin;\r\nvar RequestInfoPlugin = (function () {\r\n    function RequestInfoPlugin() {\r\n        this.priority = 70;\r\n        this.name = 'RequestInfoPlugin';\r\n    }\r\n    RequestInfoPlugin.prototype.run = function (context, next) {\r\n        var REQUEST_KEY = '@request';\r\n        var config = context.client.config;\r\n        var collector = config.requestInfoCollector;\r\n        if (!context.event.data[REQUEST_KEY] && !!collector) {\r\n            var requestInfo = collector.getRequestInfo(context);\r\n            if (!!requestInfo) {\r\n                if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\r\n                    context.log.info('Cancelling event as the request user agent matches a known bot pattern');\r\n                    context.cancelled = true;\r\n                }\r\n                else {\r\n                    context.event.data[REQUEST_KEY] = requestInfo;\r\n                }\r\n            }\r\n        }\r\n        next && next();\r\n    };\r\n    return RequestInfoPlugin;\r\n}());\r\nexports.RequestInfoPlugin = RequestInfoPlugin;\r\nvar EnvironmentInfoPlugin = (function () {\r\n    function EnvironmentInfoPlugin() {\r\n        this.priority = 80;\r\n        this.name = 'EnvironmentInfoPlugin';\r\n    }\r\n    EnvironmentInfoPlugin.prototype.run = function (context, next) {\r\n        var ENVIRONMENT_KEY = '@environment';\r\n        var collector = context.client.config.environmentInfoCollector;\r\n        if (!context.event.data[ENVIRONMENT_KEY] && collector) {\r\n            var environmentInfo = collector.getEnvironmentInfo(context);\r\n            if (!!environmentInfo) {\r\n                context.event.data[ENVIRONMENT_KEY] = environmentInfo;\r\n            }\r\n        }\r\n        next && next();\r\n    };\r\n    return EnvironmentInfoPlugin;\r\n}());\r\nexports.EnvironmentInfoPlugin = EnvironmentInfoPlugin;\r\nvar SubmissionMethodPlugin = (function () {\r\n    function SubmissionMethodPlugin() {\r\n        this.priority = 100;\r\n        this.name = 'SubmissionMethodPlugin';\r\n    }\r\n    SubmissionMethodPlugin.prototype.run = function (context, next) {\r\n        var submissionMethod = context.contextData.getSubmissionMethod();\r\n        if (!!submissionMethod) {\r\n            context.event.data['@submission_method'] = submissionMethod;\r\n        }\r\n        next && next();\r\n    };\r\n    return SubmissionMethodPlugin;\r\n}());\r\nexports.SubmissionMethodPlugin = SubmissionMethodPlugin;\r\nvar DuplicateCheckerPlugin = (function () {\r\n    function DuplicateCheckerPlugin(getCurrentTime, interval) {\r\n        var _this = this;\r\n        if (getCurrentTime === void 0) { getCurrentTime = function () { return Date.now(); }; }\r\n        if (interval === void 0) { interval = 30000; }\r\n        this.priority = 1010;\r\n        this.name = 'DuplicateCheckerPlugin';\r\n        this._mergedEvents = [];\r\n        this._processedHashcodes = [];\r\n        this._getCurrentTime = getCurrentTime;\r\n        this._interval = interval;\r\n        setInterval(function () {\r\n            while (_this._mergedEvents.length > 0) {\r\n                _this._mergedEvents.shift().resubmit();\r\n            }\r\n        }, interval);\r\n    }\r\n    DuplicateCheckerPlugin.prototype.run = function (context, next) {\r\n        var _this = this;\r\n        function getHashCode(error) {\r\n            var hashCode = 0;\r\n            while (error) {\r\n                if (error.message && error.message.length) {\r\n                    hashCode += (hashCode * 397) ^ Utils.getHashCode(error.message);\r\n                }\r\n                if (error.stack_trace && error.stack_trace.length) {\r\n                    hashCode += (hashCode * 397) ^ Utils.getHashCode(JSON.stringify(error.stack_trace));\r\n                }\r\n                error = error.inner;\r\n            }\r\n            return hashCode;\r\n        }\r\n        var error = context.event.data['@error'];\r\n        var hashCode = getHashCode(error);\r\n        if (hashCode) {\r\n            var count = context.event.count || 1;\r\n            var now_1 = this._getCurrentTime();\r\n            var merged = this._mergedEvents.filter(function (s) { return s.hashCode === hashCode; })[0];\r\n            if (merged) {\r\n                merged.incrementCount(count);\r\n                merged.updateDate(context.event.date);\r\n                context.log.info('Ignoring duplicate event with hash: ' + hashCode);\r\n                context.cancelled = true;\r\n            }\r\n            if (!context.cancelled && this._processedHashcodes.some(function (h) { return h.hash === hashCode && h.timestamp >= (now_1 - _this._interval); })) {\r\n                context.log.trace('Adding event with hash: ' + hashCode);\r\n                this._mergedEvents.push(new MergedEvent(hashCode, context, count));\r\n                context.cancelled = true;\r\n            }\r\n            if (!context.cancelled) {\r\n                context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\r\n                this._processedHashcodes.push({ hash: hashCode, timestamp: now_1 });\r\n                while (this._processedHashcodes.length > 50) {\r\n                    this._processedHashcodes.shift();\r\n                }\r\n            }\r\n        }\r\n        next && next();\r\n    };\r\n    return DuplicateCheckerPlugin;\r\n}());\r\nexports.DuplicateCheckerPlugin = DuplicateCheckerPlugin;\r\nvar MergedEvent = (function () {\r\n    function MergedEvent(hashCode, context, count) {\r\n        this.hashCode = hashCode;\r\n        this._context = context;\r\n        this._count = count;\r\n    }\r\n    MergedEvent.prototype.incrementCount = function (count) {\r\n        this._count += count;\r\n    };\r\n    MergedEvent.prototype.resubmit = function () {\r\n        this._context.event.count = this._count;\r\n        this._context.client.config.queue.enqueue(this._context.event);\r\n    };\r\n    MergedEvent.prototype.updateDate = function (date) {\r\n        if (date > this._context.event.date) {\r\n            this._context.event.date = date;\r\n        }\r\n    };\r\n    return MergedEvent;\r\n}());\r\nvar EventExclusionPlugin = (function () {\r\n    function EventExclusionPlugin() {\r\n        this.priority = 45;\r\n        this.name = 'EventExclusionPlugin';\r\n    }\r\n    EventExclusionPlugin.prototype.run = function (context, next) {\r\n        function getLogLevel(level) {\r\n            switch ((level || '').toLowerCase().trim()) {\r\n                case 'trace':\r\n                case 'true':\r\n                case '1':\r\n                case 'yes':\r\n                    return 0;\r\n                case 'debug':\r\n                    return 1;\r\n                case 'info':\r\n                    return 2;\r\n                case 'warn':\r\n                    return 3;\r\n                case 'error':\r\n                    return 4;\r\n                case 'fatal':\r\n                    return 5;\r\n                case 'off':\r\n                case 'false':\r\n                case '0':\r\n                case 'no':\r\n                    return 6;\r\n                default:\r\n                    return -1;\r\n            }\r\n        }\r\n        function getMinLogLevel(settings, loggerName) {\r\n            if (loggerName === void 0) { loggerName = '*'; }\r\n            return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\r\n        }\r\n        function getTypeAndSourceSetting(settings, type, source, defaultValue) {\r\n            if (settings === void 0) { settings = {}; }\r\n            if (defaultValue === void 0) { defaultValue = undefined; }\r\n            if (!type) {\r\n                return defaultValue;\r\n            }\r\n            var isLog = type === 'log';\r\n            var sourcePrefix = \"@@\" + type + \":\";\r\n            var value = settings[sourcePrefix + source];\r\n            if (value) {\r\n                return !isLog ? Utils.toBoolean(value) : value;\r\n            }\r\n            for (var key in settings) {\r\n                if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\r\n                    return !isLog ? Utils.toBoolean(settings[key]) : settings[key];\r\n                }\r\n            }\r\n            return defaultValue;\r\n        }\r\n        var ev = context.event;\r\n        var log = context.log;\r\n        var settings = context.client.config.settings;\r\n        if (ev.type === 'log') {\r\n            var minLogLevel = getMinLogLevel(settings, ev.source);\r\n            var logLevel = getLogLevel(ev.data['@level']);\r\n            if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\r\n                log.info('Cancelling log event due to minimum log level.');\r\n                context.cancelled = true;\r\n            }\r\n        }\r\n        else if (ev.type === 'error') {\r\n            var error = ev.data['@error'];\r\n            while (!context.cancelled && error) {\r\n                if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\r\n                    log.info(\"Cancelling error from excluded exception type: \" + error.type);\r\n                    context.cancelled = true;\r\n                }\r\n                error = error.inner;\r\n            }\r\n        }\r\n        else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\r\n            log.info(\"Cancelling event from excluded type: \" + ev.type + \" and source: \" + ev.source);\r\n            context.cancelled = true;\r\n        }\r\n        next && next();\r\n    };\r\n    return EventExclusionPlugin;\r\n}());\r\nexports.EventExclusionPlugin = EventExclusionPlugin;\r\nvar SettingsResponse = (function () {\r\n    function SettingsResponse(success, settings, settingsVersion, exception, message) {\r\n        if (settingsVersion === void 0) { settingsVersion = -1; }\r\n        if (exception === void 0) { exception = null; }\r\n        if (message === void 0) { message = null; }\r\n        this.success = false;\r\n        this.settingsVersion = -1;\r\n        this.success = success;\r\n        this.settings = settings;\r\n        this.settingsVersion = settingsVersion;\r\n        this.exception = exception;\r\n        this.message = message;\r\n    }\r\n    return SettingsResponse;\r\n}());\r\nexports.SettingsResponse = SettingsResponse;\r\nvar InMemoryStorage = (function () {\r\n    function InMemoryStorage(maxItems) {\r\n        this.items = [];\r\n        this.lastTimestamp = 0;\r\n        this.maxItems = maxItems;\r\n    }\r\n    InMemoryStorage.prototype.save = function (value) {\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        var items = this.items;\r\n        var timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\r\n        var item = { timestamp: timestamp, value: value };\r\n        if (items.push(item) > this.maxItems) {\r\n            items.shift();\r\n        }\r\n        this.lastTimestamp = timestamp;\r\n        return item.timestamp;\r\n    };\r\n    InMemoryStorage.prototype.get = function (limit) {\r\n        return this.items.slice(0, limit);\r\n    };\r\n    InMemoryStorage.prototype.remove = function (timestamp) {\r\n        var items = this.items;\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (items[i].timestamp === timestamp) {\r\n                items.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    InMemoryStorage.prototype.clear = function () {\r\n        this.items = [];\r\n    };\r\n    return InMemoryStorage;\r\n}());\r\nexports.InMemoryStorage = InMemoryStorage;\r\nvar KeyValueStorageBase = (function () {\r\n    function KeyValueStorageBase(maxItems) {\r\n        this.lastTimestamp = 0;\r\n        this.maxItems = maxItems;\r\n    }\r\n    KeyValueStorageBase.prototype.save = function (value, single) {\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        this.ensureIndex();\r\n        var items = this.items;\r\n        var timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\r\n        var key = this.getKey(timestamp);\r\n        var json = JSON.stringify(value);\r\n        try {\r\n            this.write(key, json);\r\n            this.lastTimestamp = timestamp;\r\n            if (items.push(timestamp) > this.maxItems) {\r\n                this.delete(this.getKey(items.shift()));\r\n            }\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n        return timestamp;\r\n    };\r\n    KeyValueStorageBase.prototype.get = function (limit) {\r\n        var _this = this;\r\n        this.ensureIndex();\r\n        return this.items.slice(0, limit)\r\n            .map(function (timestamp) {\r\n            var key = _this.getKey(timestamp);\r\n            try {\r\n                var json = _this.read(key);\r\n                var value = JSON.parse(json, parseDate);\r\n                return { timestamp: timestamp, value: value };\r\n            }\r\n            catch (error) {\r\n                _this.safeDelete(key);\r\n                return null;\r\n            }\r\n        })\r\n            .filter(function (item) { return item != null; });\r\n    };\r\n    KeyValueStorageBase.prototype.remove = function (timestamp) {\r\n        this.ensureIndex();\r\n        var items = this.items;\r\n        var index = items.indexOf(timestamp);\r\n        if (index >= 0) {\r\n            var key = this.getKey(timestamp);\r\n            this.safeDelete(key);\r\n            items.splice(index, 1);\r\n        }\r\n        ;\r\n    };\r\n    KeyValueStorageBase.prototype.clear = function () {\r\n        var _this = this;\r\n        this.items.forEach(function (item) { return _this.safeDelete(_this.getKey(item)); });\r\n        this.items = [];\r\n    };\r\n    KeyValueStorageBase.prototype.ensureIndex = function () {\r\n        if (!this.items) {\r\n            this.items = this.createIndex();\r\n            this.lastTimestamp = Math.max.apply(Math, [0].concat(this.items)) + 1;\r\n        }\r\n    };\r\n    KeyValueStorageBase.prototype.safeDelete = function (key) {\r\n        try {\r\n            this.delete(key);\r\n        }\r\n        catch (error) {\r\n        }\r\n    };\r\n    KeyValueStorageBase.prototype.createIndex = function () {\r\n        var _this = this;\r\n        try {\r\n            var keys = this.readAllKeys();\r\n            return keys.map(function (key) {\r\n                try {\r\n                    var timestamp = _this.getTimestamp(key);\r\n                    if (!timestamp) {\r\n                        _this.safeDelete(key);\r\n                        return null;\r\n                    }\r\n                    return timestamp;\r\n                }\r\n                catch (error) {\r\n                    _this.safeDelete(key);\r\n                    return null;\r\n                }\r\n            }).filter(function (timestamp) { return timestamp != null; })\r\n                .sort(function (a, b) { return a - b; });\r\n        }\r\n        catch (error) {\r\n            return [];\r\n        }\r\n    };\r\n    return KeyValueStorageBase;\r\n}());\r\nexports.KeyValueStorageBase = KeyValueStorageBase;\r\nfunction parseDate(key, value) {\r\n    var dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\r\n    if (typeof value === 'string') {\r\n        var a = dateRegx.exec(value);\r\n        if (a) {\r\n            return new Date(value);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n;\r\nvar BrowserStorage = (function (_super) {\r\n    __extends(BrowserStorage, _super);\r\n    function BrowserStorage(namespace, prefix, maxItems) {\r\n        if (prefix === void 0) { prefix = 'com.exceptionless.'; }\r\n        if (maxItems === void 0) { maxItems = 20; }\r\n        _super.call(this, maxItems);\r\n        this.prefix = prefix + namespace + '-';\r\n    }\r\n    BrowserStorage.isAvailable = function () {\r\n        try {\r\n            var storage = window.localStorage, x = '__storage_test__';\r\n            storage.setItem(x, x);\r\n            storage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n    BrowserStorage.prototype.write = function (key, value) {\r\n        window.localStorage.setItem(key, value);\r\n    };\r\n    BrowserStorage.prototype.read = function (key) {\r\n        return window.localStorage.getItem(key);\r\n    };\r\n    BrowserStorage.prototype.readAllKeys = function () {\r\n        var _this = this;\r\n        return Object.keys(window.localStorage)\r\n            .filter(function (key) { return key.indexOf(_this.prefix) === 0; });\r\n    };\r\n    BrowserStorage.prototype.delete = function (key) {\r\n        window.localStorage.removeItem(key);\r\n    };\r\n    BrowserStorage.prototype.getKey = function (timestamp) {\r\n        return this.prefix + timestamp;\r\n    };\r\n    BrowserStorage.prototype.getTimestamp = function (key) {\r\n        return parseInt(key.substr(this.prefix.length), 10);\r\n    };\r\n    return BrowserStorage;\r\n}(KeyValueStorageBase));\r\nexports.BrowserStorage = BrowserStorage;\r\nvar DefaultErrorParser = (function () {\r\n    function DefaultErrorParser() {\r\n    }\r\n    DefaultErrorParser.prototype.parse = function (context, exception) {\r\n        function getParameters(parameters) {\r\n            var params = (typeof parameters === 'string' ? [parameters] : parameters) || [];\r\n            var result = [];\r\n            for (var index = 0; index < params.length; index++) {\r\n                result.push({ name: params[index] });\r\n            }\r\n            return result;\r\n        }\r\n        function getStackFrames(stackFrames) {\r\n            var ANONYMOUS = '<anonymous>';\r\n            var frames = [];\r\n            for (var index = 0; index < stackFrames.length; index++) {\r\n                var frame = stackFrames[index];\r\n                frames.push({\r\n                    name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\r\n                    parameters: getParameters(frame.args),\r\n                    file_name: frame.url,\r\n                    line_number: frame.line || 0,\r\n                    column: frame.column || 0\r\n                });\r\n            }\r\n            return frames;\r\n        }\r\n        var TRACEKIT_STACK_TRACE_KEY = '@@_TraceKit.StackTrace';\r\n        var stackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\r\n            ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\r\n            : TraceKit.computeStackTrace(exception, 25);\r\n        if (!stackTrace) {\r\n            throw new Error('Unable to parse the exceptions stack trace.');\r\n        }\r\n        return {\r\n            type: stackTrace.name,\r\n            message: stackTrace.message || exception.message,\r\n            stack_trace: getStackFrames(stackTrace.stack || [])\r\n        };\r\n    };\r\n    return DefaultErrorParser;\r\n}());\r\nexports.DefaultErrorParser = DefaultErrorParser;\r\nvar DefaultModuleCollector = (function () {\r\n    function DefaultModuleCollector() {\r\n    }\r\n    DefaultModuleCollector.prototype.getModules = function (context) {\r\n        if (document && document.getElementsByTagName) {\r\n            return null;\r\n        }\r\n        var modules = [];\r\n        var scripts = document.getElementsByTagName('script');\r\n        if (scripts && scripts.length > 0) {\r\n            for (var index = 0; index < scripts.length; index++) {\r\n                if (scripts[index].src) {\r\n                    modules.push({\r\n                        module_id: index,\r\n                        name: scripts[index].src,\r\n                        version: Utils.parseVersion(scripts[index].src)\r\n                    });\r\n                }\r\n                else if (!!scripts[index].innerHTML) {\r\n                    modules.push({\r\n                        module_id: index,\r\n                        name: 'Script Tag',\r\n                        version: Utils.getHashCode(scripts[index].innerHTML).toString()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return modules;\r\n    };\r\n    return DefaultModuleCollector;\r\n}());\r\nexports.DefaultModuleCollector = DefaultModuleCollector;\r\nvar DefaultRequestInfoCollector = (function () {\r\n    function DefaultRequestInfoCollector() {\r\n    }\r\n    DefaultRequestInfoCollector.prototype.getRequestInfo = function (context) {\r\n        if (!document || !navigator || !location) {\r\n            return null;\r\n        }\r\n        var exclusions = context.client.config.dataExclusions;\r\n        var requestInfo = {\r\n            user_agent: navigator.userAgent,\r\n            is_secure: location.protocol === 'https:',\r\n            host: location.hostname,\r\n            port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\r\n            path: location.pathname,\r\n            cookies: Utils.getCookies(document.cookie, exclusions),\r\n            query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\r\n        };\r\n        if (document.referrer && document.referrer !== '') {\r\n            requestInfo.referrer = document.referrer;\r\n        }\r\n        return requestInfo;\r\n    };\r\n    return DefaultRequestInfoCollector;\r\n}());\r\nexports.DefaultRequestInfoCollector = DefaultRequestInfoCollector;\r\nvar DefaultSubmissionAdapter = (function () {\r\n    function DefaultSubmissionAdapter() {\r\n    }\r\n    DefaultSubmissionAdapter.prototype.sendRequest = function (request, callback, isAppExiting) {\r\n        var TIMEOUT = 'timeout';\r\n        var LOADED = 'loaded';\r\n        var WITH_CREDENTIALS = 'withCredentials';\r\n        var isCompleted = false;\r\n        var useSetTimeout = false;\r\n        function complete(mode, xhr) {\r\n            function parseResponseHeaders(headerStr) {\r\n                function trim(value) {\r\n                    return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n                }\r\n                var headers = {};\r\n                var headerPairs = (headerStr || '').split('\\u000d\\u000a');\r\n                for (var index = 0; index < headerPairs.length; index++) {\r\n                    var headerPair = headerPairs[index];\r\n                    var separator = headerPair.indexOf('\\u003a\\u0020');\r\n                    if (separator > 0) {\r\n                        headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\r\n                    }\r\n                }\r\n                return headers;\r\n            }\r\n            if (isCompleted) {\r\n                return;\r\n            }\r\n            isCompleted = true;\r\n            var message = xhr.statusText;\r\n            var responseText = xhr.responseText;\r\n            var status = xhr.status;\r\n            if (mode === TIMEOUT || status === 0) {\r\n                message = 'Unable to connect to server.';\r\n                status = 0;\r\n            }\r\n            else if (mode === LOADED && !status) {\r\n                status = request.method === 'POST' ? 202 : 200;\r\n            }\r\n            else if (status < 200 || status > 299) {\r\n                var responseBody = xhr.responseBody;\r\n                if (!!responseBody && !!responseBody.message) {\r\n                    message = responseBody.message;\r\n                }\r\n                else if (!!responseText && responseText.indexOf('message') !== -1) {\r\n                    try {\r\n                        message = JSON.parse(responseText).message;\r\n                    }\r\n                    catch (e) {\r\n                        message = responseText;\r\n                    }\r\n                }\r\n            }\r\n            callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\r\n        }\r\n        function createRequest(userAgent, method, url) {\r\n            var xhr = new XMLHttpRequest();\r\n            if (WITH_CREDENTIALS in xhr) {\r\n                xhr.open(method, url, true);\r\n                xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\r\n                if (method === 'POST') {\r\n                    xhr.setRequestHeader('Content-Type', 'application/json');\r\n                }\r\n            }\r\n            else if (typeof XDomainRequest !== 'undefined') {\r\n                useSetTimeout = true;\r\n                xhr = new XDomainRequest();\r\n                xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\r\n            }\r\n            else {\r\n                xhr = null;\r\n            }\r\n            if (xhr) {\r\n                xhr.timeout = 10000;\r\n            }\r\n            return xhr;\r\n        }\r\n        var url = \"\" + request.url + (request.url.indexOf('?') === -1 ? '?' : '&') + \"access_token=\" + encodeURIComponent(request.apiKey);\r\n        var xhr = createRequest(request.userAgent, request.method || 'POST', url);\r\n        if (!xhr) {\r\n            return (callback && callback(503, 'CORS not supported.'));\r\n        }\r\n        if (WITH_CREDENTIALS in xhr) {\r\n            xhr.onreadystatechange = function () {\r\n                if (xhr.readyState !== 4) {\r\n                    return;\r\n                }\r\n                complete(LOADED, xhr);\r\n            };\r\n        }\r\n        xhr.onprogress = function () { };\r\n        xhr.ontimeout = function () { return complete(TIMEOUT, xhr); };\r\n        xhr.onerror = function () { return complete('error', xhr); };\r\n        xhr.onload = function () { return complete(LOADED, xhr); };\r\n        if (useSetTimeout) {\r\n            setTimeout(function () { return xhr.send(request.data); }, 500);\r\n        }\r\n        else {\r\n            xhr.send(request.data);\r\n        }\r\n    };\r\n    return DefaultSubmissionAdapter;\r\n}());\r\nexports.DefaultSubmissionAdapter = DefaultSubmissionAdapter;\r\nvar BrowserStorageProvider = (function () {\r\n    function BrowserStorageProvider(prefix, maxQueueItems) {\r\n        if (maxQueueItems === void 0) { maxQueueItems = 250; }\r\n        this.queue = new BrowserStorage('q', prefix, maxQueueItems);\r\n        this.settings = new BrowserStorage('settings', prefix, 1);\r\n    }\r\n    return BrowserStorageProvider;\r\n}());\r\nexports.BrowserStorageProvider = BrowserStorageProvider;\r\nfunction getDefaultsSettingsFromScriptTag() {\r\n    if (!document || !document.getElementsByTagName) {\r\n        return null;\r\n    }\r\n    var scripts = document.getElementsByTagName('script');\r\n    for (var index = 0; index < scripts.length; index++) {\r\n        if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\r\n            return Utils.parseQueryString(scripts[index].src.split('?').pop());\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction processUnhandledException(stackTrace, options) {\r\n    var builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\r\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\r\n    builder.submit();\r\n}\r\nConfiguration.prototype.useLocalStorage = function () {\r\n    if (BrowserStorage.isAvailable()) {\r\n        this.storage = new BrowserStorageProvider();\r\n        SettingsManager.applySavedServerSettings(this);\r\n        this.changed();\r\n    }\r\n};\r\nvar defaults = Configuration.defaults;\r\nvar settings = getDefaultsSettingsFromScriptTag();\r\nif (settings && (settings.apiKey || settings.serverUrl)) {\r\n    defaults.apiKey = settings.apiKey;\r\n    defaults.serverUrl = settings.serverUrl;\r\n}\r\ndefaults.errorParser = new DefaultErrorParser();\r\ndefaults.moduleCollector = new DefaultModuleCollector();\r\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\r\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\r\nTraceKit.report.subscribe(processUnhandledException);\r\nTraceKit.extendToAsynchronousCallbacks();\r\nError.stackTraceLimit = Infinity;\r\n\r\nreturn exports;\r\n\r\n}));\r\n\n\n","import * as TraceKit from 'TraceKit';\nexport interface IEvent {\r\n  type?: string;\r\n  source?: string;\r\n  date?: Date;\r\n  tags?: string[];\r\n  message?: string;\r\n  geo?: string;\r\n  value?: number;\r\n  data?: any;\r\n  reference_id?: string;\r\n  count?: number;\r\n}\r\n\nexport class SubmissionResponse {\r\n  public success: boolean = false;\r\n  public badRequest: boolean = false;\r\n  public serviceUnavailable: boolean = false;\r\n  public paymentRequired: boolean = false;\r\n  public unableToAuthenticate: boolean = false;\r\n  public notFound: boolean = false;\r\n  public requestEntityTooLarge: boolean = false;\r\n  public statusCode: number;\r\n  public message: string;\r\n\r\n  constructor(statusCode: number, message?: string) {\r\n    this.statusCode = statusCode;\r\n    this.message = message;\r\n\r\n    this.success = statusCode >= 200 && statusCode <= 299;\r\n    this.badRequest = statusCode === 400;\r\n    this.serviceUnavailable = statusCode === 503;\r\n    this.paymentRequired = statusCode === 402;\r\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\r\n    this.notFound = statusCode === 404;\r\n    this.requestEntityTooLarge = statusCode === 413;\r\n  }\r\n}\r\n\nexport interface ILastReferenceIdManager {\r\n  getLast(): string;\r\n  clearLast(): void;\r\n  setLast(eventId: string): void;\r\n}\r\n\nexport interface ILog {\r\n  trace(message: string): void;\r\n  info(message: string): void;\r\n  warn(message: string): void;\r\n  error(message: string): void;\r\n}\r\n\n                                                                                                                  \r\n\r\nexport interface IEventQueue {\r\n  enqueue(event: IEvent): void;\r\n  process(isAppExiting?: boolean): void;\r\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\r\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\r\n}\r\n\n                                                                                                                                   \r\n\r\nexport interface IEnvironmentInfoCollector {\r\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\r\n}\r\n\n                                                                                                               \r\n\r\nexport interface IErrorParser {\r\n  parse(context: EventPluginContext, exception: Error): IError;\r\n}\r\n\n                                                                                                                 \r\n\r\nexport interface IModuleCollector {\r\n  getModules(context: EventPluginContext): IModule[];\r\n}\r\n\n                                                                                                                           \r\n\r\nexport interface IRequestInfoCollector {\r\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\r\n}\r\n\n                                      \r\n\r\nexport interface IStorageProvider {\r\n  queue: IStorage;\r\n  settings: IStorage;\r\n}\r\n\n                                                                                                                    \r\n\r\nexport interface ISubmissionAdapter {\r\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\r\n}\r\n\n                                                                                                                                                                                                                                                                                               \r\n\r\nexport interface ISubmissionClient {\r\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\r\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\r\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\r\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \r\n\r\nexport interface IConfigurationSettings {\r\n  apiKey?: string;\r\n  serverUrl?: string;\r\n  heartbeatServerUrl?: string;\r\n  updateSettingsWhenIdleInterval?: number;\r\n  environmentInfoCollector?: IEnvironmentInfoCollector;\r\n  errorParser?: IErrorParser;\r\n  lastReferenceIdManager?: ILastReferenceIdManager;\r\n  log?: ILog;\r\n  moduleCollector?: IModuleCollector;\r\n  requestInfoCollector?: IRequestInfoCollector;\r\n  submissionBatchSize?: number;\r\n  submissionClient?: ISubmissionClient;\r\n  submissionAdapter?: ISubmissionAdapter;\r\n  storage?: IStorageProvider;\r\n  queue?: IEventQueue;\r\n}\r\n\n                                                                                                                                                       \r\n\r\ninterface ISettingsWithVersion {\r\n  version: number;\r\n  settings: { [key: string]: string };\r\n}\r\n\r\nexport class SettingsManager {\r\n  /**\r\n   * A list of handlers that will be fired when the settings change.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private static _handlers: { (config: Configuration): void }[] = [];\r\n\r\n  public static onChanged(handler: (config: Configuration) => void) {\r\n    !!handler && this._handlers.push(handler);\r\n  }\r\n\r\n  public static applySavedServerSettings(config: Configuration): void {\r\n    if (!config || !config.isValid) {\r\n      return;\r\n    }\r\n\r\n    let savedSettings = this.getSavedServerSettings(config);\r\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\r\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\r\n    this.changed(config);\r\n  }\r\n\r\n  public static getVersion(config: Configuration): number {\r\n    if (!config || !config.isValid) {\r\n      return 0;\r\n    }\r\n\r\n    let savedSettings = this.getSavedServerSettings(config);\r\n    return savedSettings.version || 0;\r\n  }\r\n\r\n  public static checkVersion(version: number, config: Configuration): void {\r\n    let currentVersion: number = this.getVersion(config);\r\n    if (version <= currentVersion) {\r\n      return;\r\n    }\r\n\r\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\r\n    this.updateSettings(config, currentVersion);\r\n  }\r\n\r\n  public static updateSettings(config: Configuration, version?: number): void {\r\n    if (!config || !config.enabled) {\r\n      return;\r\n    }\r\n\r\n    let unableToUpdateMessage = 'Unable to update settings';\r\n    if (!config.isValid) {\r\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\r\n      return;\r\n    }\r\n\r\n    if (!version || version < 0) {\r\n      version = this.getVersion(config);\r\n    }\r\n\r\n    config.log.info(`Checking for updated settings from: v${version}.`);\r\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\r\n      if (!config || !response || !response.success || !response.settings) {\r\n        config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\r\n        return;\r\n      }\r\n\r\n      config.settings = Utils.merge(config.settings, response.settings);\r\n\r\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\r\n      // Remove any existing server settings that are not in the new server settings.\r\n      let savedServerSettings = SettingsManager.getSavedServerSettings(config);\r\n      for (let key in savedServerSettings) {\r\n        if (response.settings[key]) {\r\n          continue;\r\n        }\r\n\r\n        delete config.settings[key];\r\n      }\r\n\r\n      let newSettings = <ISettingsWithVersion>{\r\n        version: response.settingsVersion,\r\n        settings: response.settings\r\n      };\r\n\r\n      config.storage.settings.save(newSettings);\r\n\r\n      config.log.info(`Updated settings: v${newSettings.version}`);\r\n      this.changed(config);\r\n    });\r\n  }\r\n\r\n  private static changed(config: Configuration) {\r\n    let handlers = this._handlers; // optimization for minifier.\r\n    for (let index = 0; index < handlers.length; index++) {\r\n      try {\r\n        handlers[index](config);\r\n      } catch (ex) {\r\n        config.log.error(`Error calling onChanged handler: ${ex}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\r\n    let item = config.storage.settings.get()[0];\r\n    if (item && item.value && item.value.version && item.value.settings) {\r\n      return item.value;\r\n    }\r\n\r\n    return { version: 0, settings: {} };\r\n  }\r\n}\r\n\n                                                                    \r\n\r\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\r\n  /**\r\n   * Gets the last event's reference id that was submitted to the server.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _lastReferenceId: string = null;\r\n\r\n  /**\r\n   * Gets the last event's reference id that was submitted to the server.\r\n   * @returns {string}\r\n   */\r\n  public getLast(): string {\r\n    return this._lastReferenceId;\r\n  }\r\n\r\n  /**\r\n   * Clears the last event's reference id.\r\n   */\r\n  public clearLast(): void {\r\n    this._lastReferenceId = null;\r\n  }\r\n\r\n  /**\r\n   * Sets the last event's reference id.\r\n   * @param eventId\r\n   */\r\n  public setLast(eventId: string): void {\r\n    this._lastReferenceId = eventId;\r\n  }\r\n}\r\n\n                              \r\n\r\nexport class ConsoleLog implements ILog {\r\n  public trace(message: string): void {\r\n    this.log('trace', message);\r\n  }\r\n\r\n  public info(message: string): void {\r\n    this.log('info', message);\r\n  }\r\n\r\n  public warn(message: string): void {\r\n    this.log('warn', message);\r\n  }\r\n\r\n  public error(message: string): void {\r\n    this.log('error', message);\r\n  }\r\n\r\n  private log(level: string, message: string) {\r\n    if (console) {\r\n      let msg = `[${level}] Exceptionless: ${message}`;\r\n\r\n      if (console[level]) {\r\n        console[level](msg);\r\n      } else if (console.log) {\r\n        console[`log`](msg);\r\n      }\r\n    }\r\n  }\r\n}\r\n\n                              \r\n\r\nexport class NullLog implements ILog {\r\n  public trace(message: string): void { }\r\n  public info(message: string): void { }\r\n  public warn(message: string): void { }\r\n  public error(message: string): void { }\r\n}\r\n\nexport interface IUserInfo {\r\n  identity?: string;\r\n  name?: string;\r\n  data?: any;\r\n}\r\n\n                                                                                                          \r\n\r\nexport interface IEventPlugin {\r\n  priority?: number;\r\n  name?: string;\r\n  run(context: EventPluginContext, next?: () => void): void;\r\n}\r\n\n                                                                                                                                                                                                \r\n\r\nexport class EventPluginContext {\r\n  public cancelled: boolean;\r\n  public client: ExceptionlessClient;\r\n  public event: IEvent;\r\n  public contextData: ContextData;\r\n\r\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\r\n    this.client = client;\r\n    this.event = event;\r\n    this.contextData = contextData ? contextData : new ContextData();\r\n  }\r\n\r\n  public get log(): ILog {\r\n    return this.client.config.log;\r\n  }\r\n}\r\n\nr\n\r\nexport class EventPluginManager {\r\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\r\n    let wrap = function(plugin: IEventPlugin, next?: () => void): () => void {\r\n      return () => {\r\n        try {\r\n          if (!context.cancelled) {\r\n            plugin.run(context, next);\r\n          }\r\n        } catch (ex) {\r\n          context.cancelled = true;\r\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\r\n        }\r\n\r\n        if (context.cancelled && !!callback) {\r\n          callback(context);\r\n        }\r\n      };\r\n    };\r\n\r\n    let plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\r\n    let wrappedPlugins: { (): void }[] = [];\r\n    if (!!callback) {\r\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\r\n    }\r\n\r\n    for (let index = plugins.length - 1; index > -1; index--) {\r\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\r\n    }\r\n\r\n    wrappedPlugins[0]();\r\n  }\r\n\r\n  public static addDefaultPlugins(config: Configuration): void {\r\n    config.addPlugin(new ConfigurationDefaultsPlugin());\r\n    config.addPlugin(new ErrorPlugin());\r\n    config.addPlugin(new DuplicateCheckerPlugin());\r\n    config.addPlugin(new EventExclusionPlugin());\r\n    config.addPlugin(new ModuleInfoPlugin());\r\n    config.addPlugin(new RequestInfoPlugin());\r\n    config.addPlugin(new EnvironmentInfoPlugin());\r\n    config.addPlugin(new SubmissionMethodPlugin());\r\n  }\r\n}\r\n\n                                                                                                                                                                 \r\n\r\nexport class HeartbeatPlugin implements IEventPlugin {\r\n  public priority: number = 100;\r\n  public name: string = 'HeartbeatPlugin';\r\n\r\n  private _interval: number;\r\n  private _intervalId: any;\r\n\r\n  constructor (heartbeatInterval: number = 30000) {\r\n    this._interval = heartbeatInterval;\r\n  }\r\n\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    clearInterval(this._intervalId);\r\n\r\n    let user: IUserInfo = context.event.data['@user'];\r\n    if (user && user.identity) {\r\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                  \r\n\r\nexport class ReferenceIdPlugin implements IEventPlugin {\r\n  public priority: number = 20;\r\n  public name: string = 'ReferenceIdPlugin';\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\r\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                                          \r\n\r\nexport class DefaultEventQueue implements IEventQueue {\r\n  /**\r\n   * The configuration object.\r\n   * @type {Configuration}\r\n   * @private\r\n   */\r\n  private _config: Configuration;\r\n\r\n  /**\r\n   * A list of handlers that will be fired when events are submitted.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _handlers: { (events: IEvent[], response: SubmissionResponse): void }[] = [];\r\n\r\n  /**\r\n   * Suspends processing until the specified time.\r\n   * @type {Date}\r\n   * @private\r\n   */\r\n  private _suspendProcessingUntil: Date;\r\n\r\n  /**\r\n   * Discards queued items until the specified time.\r\n   * @type {Date}\r\n   * @private\r\n   */\r\n  private _discardQueuedItemsUntil: Date;\r\n\r\n  /**\r\n   * Returns true if the queue is processing.\r\n   * @type {boolean}\r\n   * @private\r\n   */\r\n  private _processingQueue: boolean = false;\r\n\r\n  /**\r\n   * Processes the queue every xx seconds.\r\n   * @type {Timer}\r\n   * @private\r\n   */\r\n  private _queueTimer: any;\r\n\r\n  constructor(config: Configuration) {\r\n    this._config = config;\r\n  }\r\n\r\n  public enqueue(event: IEvent): void {\r\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\r\n    let config: Configuration = this._config; // Optimization for minifier.\r\n    let log: ILog = config.log; // Optimization for minifier.\r\n\r\n    if (!config.enabled) {\r\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\r\n      return;\r\n    }\r\n\r\n    if (!config.isValid) {\r\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\r\n      return;\r\n    }\r\n\r\n    if (this.areQueuedItemsDiscarded()) {\r\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\r\n      return;\r\n    }\r\n\r\n    this.ensureQueueTimer();\r\n\r\n    let timestamp = config.storage.queue.save(event);\r\n    let logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\r\n    if (timestamp) {\r\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\r\n    } else {\r\n      log.error(`Could not enqueue event ${logText}`);\r\n    }\r\n  }\r\n\r\n  public process(isAppExiting?: boolean): void {\r\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\r\n    let config: Configuration = this._config; // Optimization for minifier.\r\n    let log: ILog = config.log; // Optimization for minifier.\r\n\r\n    if (this._processingQueue) {\r\n      return;\r\n    }\r\n\r\n    log.info('Processing queue...');\r\n    if (!config.enabled) {\r\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\r\n      return;\r\n    }\r\n\r\n    if (!config.isValid) {\r\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\r\n      return;\r\n    }\r\n\r\n    this._processingQueue = true;\r\n    this.ensureQueueTimer();\r\n\r\n    try {\r\n      let events = config.storage.queue.get(config.submissionBatchSize);\r\n      if (!events || events.length === 0) {\r\n        this._processingQueue = false;\r\n        return;\r\n      }\r\n\r\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\r\n      config.submissionClient.postEvents(events.map(e => e.value), config, (response: SubmissionResponse) => {\r\n        this.processSubmissionResponse(response, events);\r\n        this.eventsPosted(events.map(e => e.value), response);\r\n        log.info('Finished processing queue.');\r\n        this._processingQueue = false;\r\n      }, isAppExiting);\r\n    } catch (ex) {\r\n      log.error(`Error processing queue: ${ex}`);\r\n      this.suspendProcessing();\r\n      this._processingQueue = false;\r\n    }\r\n  }\r\n\r\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\r\n    let config: Configuration = this._config; // Optimization for minifier.\r\n\r\n    if (!durationInMinutes || durationInMinutes <= 0) {\r\n      durationInMinutes = 5;\r\n    }\r\n\r\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\r\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\r\n\r\n    if (discardFutureQueuedItems) {\r\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\r\n    }\r\n\r\n    if (clearQueue) {\r\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\r\n      config.storage.queue.clear();\r\n    }\r\n  }\r\n\r\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\r\n    !!handler && this._handlers.push(handler);\r\n  }\r\n\r\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\r\n    let handlers = this._handlers; // optimization for minifier.\r\n    for (let index = 0; index < handlers.length; index++) {\r\n      try {\r\n        handlers[index](events, response);\r\n      } catch (ex) {\r\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private areQueuedItemsDiscarded(): boolean {\r\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\r\n  }\r\n\r\n  private ensureQueueTimer(): void {\r\n    if (!this._queueTimer) {\r\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\r\n    }\r\n  }\r\n\r\n  private isQueueProcessingSuspended(): boolean {\r\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\r\n  }\r\n\r\n  private onProcessQueue(): void {\r\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\r\n      this.process();\r\n    }\r\n  }\r\n\r\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\r\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\r\n    let config: Configuration = this._config; // Optimization for minifier.\r\n    let log: ILog = config.log; // Optimization for minifier.\r\n\r\n    if (response.success) {\r\n      log.info(`Sent ${events.length} events.`);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.serviceUnavailable) {\r\n      // You are currently over your rate limit or the servers are under stress.\r\n      log.error('Server returned service unavailable.');\r\n      this.suspendProcessing();\r\n      return;\r\n    }\r\n\r\n    if (response.paymentRequired) {\r\n      // If the organization over the rate limit then discard the event.\r\n      log.info('Too many events have been submitted, please upgrade your plan.');\r\n      this.suspendProcessing(null, true, true);\r\n      return;\r\n    }\r\n\r\n    if (response.unableToAuthenticate) {\r\n      // The api key was suspended or could not be authorized.\r\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\r\n      this.suspendProcessing(15);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.notFound || response.badRequest) {\r\n      // The service end point could not be found.\r\n      log.error(`Error while trying to submit data: ${response.message}`);\r\n      this.suspendProcessing(60 * 4);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.requestEntityTooLarge) {\r\n      let message = 'Event submission discarded for being too large.';\r\n      if (config.submissionBatchSize > 1) {\r\n        log.error(`${message} Retrying with smaller batch size.`);\r\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\r\n      } else {\r\n        log.error(`${message} ${noSubmission}`);\r\n        this.removeEvents(events);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!response.success) {\r\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\r\n      this.suspendProcessing();\r\n    }\r\n  }\r\n\r\n  private removeEvents(events: IStorageItem[]) {\r\n    for (let index = 0; index < (events || []).length; index++) {\r\n      this._config.storage.queue.remove(events[index].timestamp);\r\n    }\r\n  }\r\n}\r\n\n                                                                                                                                                    \r\n\r\nexport class InMemoryStorageProvider implements IStorageProvider {\r\n  public queue: IStorage;\r\n  public settings: IStorage;\r\n\r\n  constructor(maxQueueItems: number = 250) {\r\n    this.queue = new InMemoryStorage(maxQueueItems);\r\n    this.settings = new InMemoryStorage(1);\r\n  }\r\n\r\n}\r\n\nr\n\r\ndeclare var XDomainRequest: { new (); create(); };\r\n\r\nexport class DefaultSubmissionClient implements ISubmissionClient {\r\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\r\n\r\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\r\n    let data = JSON.stringify(events);\r\n    let request = this.createRequest(config, 'POST',  `${config.serverUrl}/api/v2/events`, data);\r\n    let cb = this.createSubmissionCallback(config, callback);\r\n\r\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\r\n  }\r\n\r\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\r\n    let path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\r\n    let data = JSON.stringify(description);\r\n    let request = this.createRequest(config, 'POST', path, data);\r\n    let cb = this.createSubmissionCallback(config, callback);\r\n\r\n    return config.submissionAdapter.sendRequest(request, cb);\r\n  }\r\n\r\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\r\n    let request = this.createRequest(config, 'GET', `${config.serverUrl}/api/v2/projects/config?v=${version}`);\r\n    let cb = (status, message, data?, headers?) => {\r\n      if (status !== 200) {\r\n        return callback(new SettingsResponse(false, null, -1, null, message));\r\n      }\r\n\r\n      let settings: IClientConfiguration;\r\n      try {\r\n        settings = JSON.parse(data);\r\n      } catch (e) {\r\n        config.log.error(`Unable to parse settings: '${data}'`);\r\n      }\r\n\r\n      if (!settings || isNaN(settings.version)) {\r\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\r\n      }\r\n\r\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\r\n    };\r\n\r\n    return config.submissionAdapter.sendRequest(request, cb);\r\n  }\r\n\r\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\r\n    let request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\r\n    config.submissionAdapter.sendRequest(request);\r\n  }\r\n\r\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\r\n    return {\r\n      method,\r\n      url,\r\n      data,\r\n      apiKey: config.apiKey,\r\n      userAgent: config.userAgent\r\n    };\r\n  }\r\n\r\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\r\n    return (status, message, data?, headers?) => {\r\n      let settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\r\n      SettingsManager.checkVersion(settingsVersion, config);\r\n\r\n      callback(new SubmissionResponse(status, message));\r\n    };\r\n  }\r\n}\r\n\nexport class Utils {\r\n  public static addRange<T>(target: T[], ...values: T[]) {\r\n    if (!target) {\r\n      target = [];\r\n    }\r\n\r\n    if (!values || values.length === 0) {\r\n      return target;\r\n    }\r\n\r\n    for (let index = 0; index < values.length; index++) {\r\n      if (values[index] && target.indexOf(values[index]) < 0) {\r\n        target.push(values[index]);\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  public static getHashCode(source: string): number {\r\n    if (!source || source.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    let hash: number = 0;\r\n    for (let index = 0; index < source.length; index++) {\r\n      let character = source.charCodeAt(index);\r\n      hash = ((hash << 5) - hash) + character;\r\n      hash |= 0;\r\n    }\r\n\r\n    return hash;\r\n  }\r\n\r\n  public static getCookies(cookies: string, exclusions?: string[]): Object {\r\n    let result: Object = {};\r\n\r\n    let parts: string[] = (cookies || '').split('; ');\r\n    for (let index = 0; index < parts.length; index++) {\r\n      let cookie: string[] = parts[index].split('=');\r\n      if (!Utils.isMatch(cookie[0], exclusions)) {\r\n        result[cookie[0]] = cookie[1];\r\n      }\r\n    }\r\n\r\n    return !Utils.isEmpty(result) ? result : null;\r\n  }\r\n\r\n  public static guid(): string {\r\n    function s4() {\r\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n    }\r\n\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n  }\r\n\r\n  public static merge(defaultValues: Object, values: Object) {\r\n    let result: Object = {};\r\n\r\n    for (let key in defaultValues || {}) {\r\n      if (!!defaultValues[key]) {\r\n        result[key] = defaultValues[key];\r\n      }\r\n    }\r\n\r\n    for (let key in values || {}) {\r\n      if (!!values[key]) {\r\n        result[key] = values[key];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static parseVersion(source: string): string {\r\n    if (!source) {\r\n      return null;\r\n    }\r\n\r\n    let versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\r\n    let matches = versionRegex.exec(source);\r\n    if (matches && matches.length > 0) {\r\n      return matches[0];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static parseQueryString(query: string, exclusions?: string[]) {\r\n    if (!query || query.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let pairs: string[] = query.split('&');\r\n    if (pairs.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let result: Object = {};\r\n    for (let index = 0; index < pairs.length; index++) {\r\n      let pair = pairs[index].split('=');\r\n      if (!Utils.isMatch(pair[0], exclusions)) {\r\n        result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n      }\r\n    }\r\n\r\n    return !Utils.isEmpty(result) ? result : null;\r\n  }\r\n\r\n  public static randomNumber(): number {\r\n    return Math.floor(Math.random() * 9007199254740992);\r\n  }\r\n\r\n  /**\r\n   * Checks to see if a value matches a pattern.\r\n   * @param input the value to check against the @pattern.\r\n   * @param pattern The pattern to check, supports wild cards (*).\r\n   */\r\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\r\n    if (!input || typeof input !== 'string') {\r\n      return false;\r\n    }\r\n\r\n    let trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\r\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\r\n\r\n    return (patterns || []).some(pattern => {\r\n      if (typeof pattern !== 'string') {\r\n        return false;\r\n      }\r\n\r\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\r\n      if (pattern.length <= 0) {\r\n        return false;\r\n      }\r\n\r\n      let startsWithWildcard: boolean = pattern[0] === '*';\r\n      if (startsWithWildcard) {\r\n        pattern = pattern.slice(1);\r\n      }\r\n\r\n      let endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\r\n      if (endsWithWildcard) {\r\n        pattern = pattern.substring(0, pattern.length - 1);\r\n      }\r\n\r\n      if (startsWithWildcard && endsWithWildcard) {\r\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\r\n      }\r\n\r\n      if (startsWithWildcard) {\r\n        return Utils.endsWith(input, pattern);\r\n      }\r\n\r\n      if (endsWithWildcard) {\r\n        return Utils.startsWith(input, pattern);\r\n      }\r\n\r\n      return input === pattern;\r\n    });\r\n  }\r\n\r\n  public static isEmpty(input: Object) {\r\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\r\n  }\r\n\r\n  public static startsWith(input: string, prefix: string): boolean {\r\n    return input.substring(0, prefix.length) === prefix;\r\n  }\r\n\r\n  public static endsWith(input: string, suffix: string): boolean {\r\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\r\n  }\r\n\r\n  /**\r\n   * Stringifys an object with optional exclusions and max depth.\r\n   * @param data The data object to add.\r\n   * @param exclusions Any property names that should be excluded.\r\n   * @param maxDepth The max depth of the object to include.\r\n   */\r\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\r\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\r\n      let cache: string[] = [];\r\n      return JSON.stringify(obj, function(key: string, value: any) {\r\n        if (Utils.isMatch(key, excludedKeys)) {\r\n          return;\r\n        }\r\n\r\n        if (typeof value === 'object' && !!value) {\r\n          if (cache.indexOf(value) !== -1) {\r\n            // Circular reference found, discard key\r\n            return;\r\n          }\r\n\r\n          cache.push(value);\r\n        }\r\n\r\n        return value;\r\n      });\r\n    }\r\n\r\n    if (({}).toString.call(data) === '[object Object]') {\r\n      let flattened = {};\r\n      /* tslint:disable:forin */\r\n      for (let prop in data) {\r\n        let value = data[prop];\r\n        if (value === data) {\r\n          continue;\r\n        }\r\n        flattened[prop] = data[prop];\r\n      }\r\n      /* tslint:enable:forin */\r\n\r\n      return stringifyImpl(flattened, exclusions);\r\n    }\r\n\r\n    if (({}).toString.call(data) === '[object Array]') {\r\n      let result = [];\r\n      for (let index = 0; index < data.length; index++) {\r\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\r\n      }\r\n\r\n      return JSON.stringify(result);\r\n    }\r\n\r\n    return stringifyImpl(data, exclusions);\r\n  }\r\n\r\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\r\n    if (typeof input === 'boolean') {\r\n      return input;\r\n    }\r\n\r\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\r\n      return defaultValue;\r\n    }\r\n\r\n    switch ((input + '').toLowerCase().trim()) {\r\n      case 'true': case 'yes': case '1': return true;\r\n      case 'false': case 'no': case '0': case null: return false;\r\n    }\r\n\r\n    return defaultValue;\r\n  }\r\n}\r\n\nr\n\r\nexport class Configuration implements IConfigurationSettings {\r\n  /**\r\n   * The default configuration settings that are applied to new configuration instances.\r\n   * @type {IConfigurationSettings}\r\n   * @private\r\n   */\r\n  private static _defaultSettings: IConfigurationSettings = null;\r\n\r\n  /**\r\n   * A default list of tags that will automatically be added to every\r\n   * report submitted to the server.\r\n   *\r\n   * @type {Array}\r\n   */\r\n  public defaultTags: string[] = [];\r\n\r\n  /**\r\n   * A default list of of extended data objects that will automatically\r\n   * be added to every report submitted to the server.\r\n   *\r\n   * @type {{}}\r\n   */\r\n  public defaultData: Object = {};\r\n\r\n  /**\r\n   * Whether the client is currently enabled or not. If it is disabled,\r\n   * submitted errors will be discarded and no data will be sent to the server.\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  public enabled: boolean = true;\r\n\r\n  public environmentInfoCollector: IEnvironmentInfoCollector;\r\n  public errorParser: IErrorParser;\r\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\r\n  public log: ILog;\r\n  public moduleCollector: IModuleCollector;\r\n  public requestInfoCollector: IRequestInfoCollector;\r\n\r\n  /**\r\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\r\n   */\r\n  public submissionBatchSize: number;\r\n  public submissionAdapter: ISubmissionAdapter;\r\n  public submissionClient: ISubmissionClient;\r\n\r\n  /**\r\n   * Contains a dictionary of custom settings that can be used to control\r\n   * the client and will be automatically updated from the server.\r\n   */\r\n  public settings: Object = {};\r\n\r\n  public storage: IStorageProvider;\r\n\r\n  public queue: IEventQueue;\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _apiKey: string;\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _serverUrl: string = 'https://collector.exceptionless.io';\r\n\r\n  /**\r\n   * The heartbeat server url that all heartbeats will be sent to.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\r\n\r\n  /**\r\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\r\n   * @type {number}\r\n   * @private\r\n   */\r\n  private _updateSettingsWhenIdleInterval: number = 120000;\r\n\r\n  /**\r\n   * A list of exclusion patterns.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _dataExclusions: string[] = [];\r\n\r\n  /**\r\n   * A list of user agent patterns.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _userAgentBotPatterns: string[] = [];\r\n\r\n  /**\r\n   * The list of plugins that will be used in this configuration.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _plugins: IEventPlugin[] = [];\r\n\r\n  /**\r\n   * A list of handlers that will be fired when configuration changes.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _handlers: { (config: Configuration): void }[] = [];\r\n\r\n  constructor(configSettings?: IConfigurationSettings) {\r\n    function inject(fn: any) {\r\n      return typeof fn === 'function' ? fn(this) : fn;\r\n    }\r\n\r\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\r\n\r\n    this.log = inject(configSettings.log) || new NullLog();\r\n    this.apiKey = configSettings.apiKey;\r\n    this.serverUrl = configSettings.serverUrl;\r\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\r\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\r\n\r\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\r\n    this.errorParser = inject(configSettings.errorParser);\r\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\r\n    this.moduleCollector = inject(configSettings.moduleCollector);\r\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\r\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\r\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\r\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\r\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\r\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\r\n\r\n    SettingsManager.applySavedServerSettings(this);\r\n    EventPluginManager.addDefaultPlugins(this);\r\n  }\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @returns {string}\r\n   */\r\n  public get apiKey(): string {\r\n    return this._apiKey;\r\n  }\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @param value\r\n   */\r\n  public set apiKey(value: string) {\r\n    this._apiKey = value || null;\r\n    this.log.info(`apiKey: ${this._apiKey}`);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Returns true if the apiKey is valid.\r\n   * @returns {boolean}\r\n   */\r\n  public get isValid(): boolean {\r\n    return !!this.apiKey && this.apiKey.length >= 10;\r\n  }\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @returns {string}\r\n   */\r\n  public get serverUrl(): string {\r\n    return this._serverUrl;\r\n  }\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @param value\r\n   */\r\n  public set serverUrl(value: string) {\r\n    if (!!value) {\r\n      this._serverUrl = value;\r\n      this._heartbeatServerUrl = value;\r\n      this.log.info(`serverUrl: ${value}`);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The heartbeat server url that all heartbeats will be sent to.\r\n   * @returns {string}\r\n   */\r\n  public get heartbeatServerUrl(): string {\r\n    return this._heartbeatServerUrl;\r\n  }\r\n\r\n  /**\r\n   * The heartbeat server url that all heartbeats will be sent to.\r\n   * @param value\r\n   */\r\n  public set heartbeatServerUrl(value: string) {\r\n    if (!!value) {\r\n      this._heartbeatServerUrl = value;\r\n      this.log.info(`heartbeatServerUrl: ${value}`);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\r\n   * @returns {number}\r\n   */\r\n  public get updateSettingsWhenIdleInterval(): number {\r\n    return this._updateSettingsWhenIdleInterval;\r\n  }\r\n\r\n  /**\r\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\r\n   * @param value\r\n   */\r\n  public set updateSettingsWhenIdleInterval(value: number) {\r\n    if (typeof value !== 'number') {\r\n      return;\r\n    }\r\n\r\n    if (value <= 0) {\r\n      value = -1;\r\n    } else if (value > 0 && value < 15000) {\r\n      value = 15000;\r\n    }\r\n\r\n    this._updateSettingsWhenIdleInterval = value;\r\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   *  A list of exclusion patterns that will automatically remove any data that\r\n   *  matches them from any data submitted to the server.\r\n   *\r\n   *  For example, entering CreditCard will remove any extended data properties,\r\n   *  form fields, cookies and query parameters from the report.\r\n   *\r\n   * @returns {string[]}\r\n   */\r\n  public get dataExclusions(): string[] {\r\n    let exclusions: string = this.settings['@@DataExclusions'];\r\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\r\n  }\r\n\r\n  /**\r\n   * Add items to the list of exclusion patterns that will automatically remove any\r\n   * data that matches them from any data submitted to the server.\r\n   *\r\n   * For example, entering CreditCard will remove any extended data properties, form\r\n   * fields, cookies and query parameters from the report.\r\n   *\r\n   * @param exclusions\r\n   */\r\n  public addDataExclusions(...exclusions: string[]) {\r\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\r\n  }\r\n\r\n  /**\r\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\r\n   *\r\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\r\n   *\r\n   * @returns {string[]}\r\n   */\r\n  public get userAgentBotPatterns(): string[] {\r\n    let patterns: string = this.settings['@@UserAgentBotPatterns'];\r\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\r\n  }\r\n\r\n  /**\r\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\r\n   *\r\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\r\n   *\r\n   * @param userAgentBotPatterns\r\n   */\r\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\r\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\r\n  }\r\n\r\n  /**\r\n   * The list of plugins that will be used in this configuration.\r\n   * @returns {IEventPlugin[]}\r\n   */\r\n  public get plugins(): IEventPlugin[] {\r\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\r\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register an plugin to be used in this configuration.\r\n   * @param plugin\r\n   */\r\n  public addPlugin(plugin: IEventPlugin): void;\r\n\r\n  /**\r\n   * Register an plugin to be used in this configuration.\r\n   * @param name The name used to identify the plugin.\r\n   * @param priority Used to determine plugins priority.\r\n   * @param pluginAction A function that is run.\r\n   */\r\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\r\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\r\n    let plugin: IEventPlugin = !!pluginAction ? { name: <string>pluginOrName, priority: priority, run: pluginAction } : <IEventPlugin>pluginOrName;\r\n    if (!plugin || !plugin.run) {\r\n      this.log.error('Add plugin failed: Run method not defined');\r\n      return;\r\n    }\r\n\r\n    if (!plugin.name) {\r\n      plugin.name = Utils.guid();\r\n    }\r\n\r\n    if (!plugin.priority) {\r\n      plugin.priority = 0;\r\n    }\r\n\r\n    let pluginExists: boolean = false;\r\n    let plugins = this._plugins; // optimization for minifier.\r\n    for (let index = 0; index < plugins.length; index++) {\r\n      if (plugins[index].name === plugin.name) {\r\n        pluginExists = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!pluginExists) {\r\n      plugins.push(plugin);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the plugin from this configuration.\r\n   * @param plugin\r\n   */\r\n  public removePlugin(plugin: IEventPlugin): void;\r\n\r\n  /**\r\n   * Remove an plugin by key from this configuration.\r\n   * @param name\r\n   */\r\n  public removePlugin(name: string): void;\r\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\r\n    let name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\r\n    if (!name) {\r\n      this.log.error('Remove plugin failed: Plugin name not defined');\r\n      return;\r\n    }\r\n\r\n    let plugins = this._plugins; // optimization for minifier.\r\n    for (let index = 0; index < plugins.length; index++) {\r\n      if (plugins[index].name === name) {\r\n        plugins.splice(index, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Automatically set the application version for events.\r\n   * @param version\r\n   */\r\n  public setVersion(version: string): void {\r\n    if (!!version) {\r\n      this.defaultData['@version'] = version;\r\n    }\r\n  }\r\n\r\n  public setUserIdentity(userInfo: IUserInfo): void;\r\n  public setUserIdentity(identity: string): void;\r\n  public setUserIdentity(identity: string, name: string): void;\r\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\r\n    const USER_KEY: string = '@user'; // optimization for minifier.\r\n    let userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\r\n\r\n    let shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\r\n    if (shouldRemove) {\r\n      delete this.defaultData[USER_KEY];\r\n    } else {\r\n      this.defaultData[USER_KEY] = userInfo;\r\n    }\r\n\r\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\r\n  }\r\n\r\n  /**\r\n   * Used to identify the client that sent the events to the server.\r\n   * @returns {string}\r\n   */\r\n  public get userAgent(): string {\r\n    return 'exceptionless-js/1.0.0.0';\r\n  }\r\n\r\n  /**\r\n   * Automatically send a heartbeat to keep the session alive.\r\n   */\r\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\r\n    if (sendHeartbeats) {\r\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Automatically set a reference id for error events.\r\n   */\r\n  public useReferenceIds(): void {\r\n    this.addPlugin(new ReferenceIdPlugin());\r\n  }\r\n\r\n  public useLocalStorage(): void {\r\n    // This method will be injected via the prototype.\r\n  }\r\n\r\n  // TODO: Support a min log level.\r\n  public useDebugLogger(): void {\r\n    this.log = new ConsoleLog();\r\n  }\r\n\r\n  public onChanged(handler: (config: Configuration) => void) {\r\n    !!handler && this._handlers.push(handler);\r\n  }\r\n\r\n  private changed() {\r\n    let handlers = this._handlers; // optimization for minifier.\r\n    for (let index = 0; index < handlers.length; index++) {\r\n      try {\r\n        handlers[index](this);\r\n      } catch (ex) {\r\n        this.log.error(`Error calling onChanged handler: ${ex}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The default configuration settings that are applied to new configuration instances.\r\n   * @returns {IConfigurationSettings}\r\n   */\r\n  public static get defaults() {\r\n    if (Configuration._defaultSettings === null) {\r\n      Configuration._defaultSettings = {};\r\n    }\r\n\r\n    return Configuration._defaultSettings;\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                                                                                         \r\n\r\nexport class EventBuilder {\r\n  public target: IEvent;\r\n  public client: ExceptionlessClient;\r\n  public pluginContextData: ContextData;\r\n\r\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\r\n\r\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\r\n    this.target = event;\r\n    this.client = client;\r\n    this.pluginContextData = pluginContextData || new ContextData();\r\n  }\r\n\r\n  public setType(type: string): EventBuilder {\r\n    if (!!type) {\r\n      this.target.type = type;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setSource(source: string): EventBuilder {\r\n    if (!!source) {\r\n      this.target.source = source;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setReferenceId(referenceId: string): EventBuilder {\r\n    if (!this.isValidIdentifier(referenceId)) {\r\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\r\n    }\r\n\r\n    this.target.reference_id = referenceId;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\r\n   * @param name Reference name\r\n   * @param id The reference id that points to a specific event\r\n   * @returns {EventBuilder}\r\n     */\r\n  public setEventReference(name: string, id: string): EventBuilder {\r\n    if (!name) {\r\n      throw new Error('Invalid name');\r\n    }\r\n\r\n    if (!id || !this.isValidIdentifier(id)) {\r\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\r\n    }\r\n\r\n    this.setProperty('@ref:' + name, id);\r\n    return this;\r\n  }\r\n\r\n  public setMessage(message: string): EventBuilder {\r\n    if (!!message) {\r\n      this.target.message = message;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setGeo(latitude: number, longitude: number): EventBuilder {\r\n    if (latitude < -90.0 || latitude > 90.0) {\r\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\r\n    }\r\n\r\n    if (longitude < -180.0 || longitude > 180.0) {\r\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\r\n    }\r\n\r\n    this.target.geo = `${latitude},${longitude}`;\r\n    return this;\r\n  }\r\n\r\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\r\n  public setUserIdentity(identity: string): EventBuilder;\r\n  public setUserIdentity(identity: string, name: string): EventBuilder;\r\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\r\n    let userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\r\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\r\n      return this;\r\n    }\r\n\r\n    this.setProperty('@user', userInfo);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the user's description of the event.\r\n   *\r\n   * @param emailAddress The email address\r\n   * @param description The user's description of the event.\r\n   * @returns {EventBuilder}\r\n     */\r\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\r\n    if (emailAddress && description) {\r\n      this.setProperty('@user_description', { email_address: emailAddress, description: description });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Changes default stacking behavior by setting manual\r\n   * stacking information.\r\n   * @param signatureData A dictionary of strings to use for stacking.\r\n   * @param title An optional title for the stacking information.\r\n   * @returns {EventBuilder}\r\n     */\r\n  public setManualStackingInfo(signatureData: any, title?: string) {\r\n    if (signatureData) {\r\n      let stack = <IManualStackingInfo>{\r\n        signature_data: signatureData\r\n      };\r\n      if (title) {\r\n        stack.title = title;\r\n      }\r\n      this.setProperty('@stack', stack);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Changes default stacking behavior by setting the stacking key.\r\n   * @param manualStackingKey The manual stacking key.\r\n   * @param title An optional title for the stacking information.\r\n   * @returns {EventBuilder}\r\n     */\r\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\r\n    if (manualStackingKey) {\r\n      let data = {\r\n        'ManualStackingKey': manualStackingKey\r\n      };\r\n      this.setManualStackingInfo(data, title);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setValue(value: number): EventBuilder {\r\n    if (!!value) {\r\n      this.target.value = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addTags(...tags: string[]): EventBuilder {\r\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds the object to extended data. Uses @excludedPropertyNames\r\n   * to exclude data from being included in the event.\r\n   * @param name The data object to add.\r\n   * @param value The name of the object to add.\r\n   * @param maxDepth The max depth of the object to include.\r\n   * @param excludedPropertyNames Any property names that should be excluded.\r\n   */\r\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\r\n    if (!name || (value === undefined || value == null)) {\r\n      return this;\r\n    }\r\n\r\n    if (!this.target.data) {\r\n      this.target.data = {};\r\n    }\r\n\r\n    let result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\r\n    if (!Utils.isEmpty(result)) {\r\n      this.target.data[name] = result;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public markAsCritical(critical: boolean): EventBuilder {\r\n    if (critical) {\r\n      this.addTags('Critical');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addRequestInfo(request: Object): EventBuilder {\r\n    if (!!request) {\r\n      this.pluginContextData['@request'] = request;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public submit(callback?: (context: EventPluginContext) => void): void {\r\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\r\n  }\r\n\r\n  private isValidIdentifier(value: string): boolean {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    if (value.length < 8 || value.length > 100) {\r\n      return false;\r\n    }\r\n\r\n    for (let index = 0; index < value.length; index++) {\r\n      let code = value.charCodeAt(index);\r\n      let isDigit = (code >= 48) && (code <= 57);\r\n      let isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\r\n      let isMinus = code === 45;\r\n\r\n      if (!(isDigit || isLetter) && !isMinus) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\nexport interface IUserDescription {\r\n  email_address?: string;\r\n  description?: string;\r\n  data?: any;\r\n}\r\n\nexport class ContextData {\r\n  public setException(exception: Error): void {\r\n    if (exception) {\r\n      this['@@_Exception'] = exception;\r\n    }\r\n  }\r\n\r\n  public get hasException(): boolean {\r\n    return !!this['@@_Exception'];\r\n  }\r\n\r\n  public getException(): Error {\r\n    return this['@@_Exception'] || null;\r\n  }\r\n\r\n  public markAsUnhandledError(): void {\r\n    this['@@_IsUnhandledError'] = true;\r\n  }\r\n\r\n  public get isUnhandledError(): boolean {\r\n    return !!this['@@_IsUnhandledError'];\r\n  }\r\n\r\n  public setSubmissionMethod(method: string): void {\r\n    if (method) {\r\n      this['@@_SubmissionMethod'] = method;\r\n    }\r\n  }\r\n\r\n  public getSubmissionMethod(): string {\r\n    return this['@@_SubmissionMethod'] || null;\r\n  }\r\n}\r\n\nr\n\r\nexport class ExceptionlessClient {\r\n  /**\r\n   * The default ExceptionlessClient instance.\r\n   * @type {ExceptionlessClient}\r\n   * @private\r\n   */\r\n  private static _instance: ExceptionlessClient = null;\r\n\r\n  public config: Configuration;\r\n\r\n  private _intervalId: any;\r\n  private _timeoutId: any;\r\n\r\n  constructor();\r\n  constructor(settings: IConfigurationSettings);\r\n  constructor(apiKey: string, serverUrl?: string);\r\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\r\n    if (typeof settingsOrApiKey === 'object') {\r\n      this.config = new Configuration(settingsOrApiKey);\r\n    } else {\r\n      this.config = new Configuration({ apiKey: <string>settingsOrApiKey, serverUrl: serverUrl });\r\n    }\r\n\r\n    this.updateSettingsTimer(5000);\r\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\r\n    this.config.queue.onEventsPosted((events, response) =>  this.updateSettingsTimer());\r\n  }\r\n\r\n  public createException(exception: Error): EventBuilder {\r\n    let pluginContextData = new ContextData();\r\n    pluginContextData.setException(exception);\r\n    return this.createEvent(pluginContextData).setType('error');\r\n  }\r\n\r\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\r\n    this.createException(exception).submit(callback);\r\n  }\r\n\r\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\r\n    let builder = this.createException(exception);\r\n    builder.pluginContextData.markAsUnhandledError();\r\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\r\n\r\n    return builder;\r\n  }\r\n\r\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\r\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\r\n  }\r\n\r\n  public createFeatureUsage(feature: string): EventBuilder {\r\n    return this.createEvent().setType('usage').setSource(feature);\r\n  }\r\n\r\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\r\n    this.createFeatureUsage(feature).submit(callback);\r\n  }\r\n\r\n  public createLog(message: string): EventBuilder;\r\n  public createLog(source: string, message: string): EventBuilder;\r\n  public createLog(source: string, message: string, level: string): EventBuilder;\r\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\r\n    let builder = this.createEvent().setType('log');\r\n\r\n    if (message && level) {\r\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\r\n    } else if (message) {\r\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\r\n    } else {\r\n      // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\r\n      let caller: any = arguments.callee.caller;\r\n      builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\r\n    }\r\n\r\n    return builder;\r\n  }\r\n\r\n  public submitLog(message: string): void;\r\n  public submitLog(source: string, message: string): void;\r\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\r\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\r\n    this.createLog(sourceOrMessage, message, level).submit(callback);\r\n  }\r\n\r\n  public createNotFound(resource: string): EventBuilder {\r\n    return this.createEvent().setType('404').setSource(resource);\r\n  }\r\n\r\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\r\n    this.createNotFound(resource).submit(callback);\r\n  }\r\n\r\n  public createSessionStart(): EventBuilder {\r\n    return this.createEvent().setType('session');\r\n  }\r\n\r\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\r\n    this.createSessionStart().submit(callback);\r\n  }\r\n\r\n  public submitSessionEnd(sessionIdOrUserId: string): void {\r\n    if (sessionIdOrUserId) {\r\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\r\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\r\n    }\r\n  }\r\n\r\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\r\n    if (sessionIdOrUserId) {\r\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\r\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\r\n    }\r\n  }\r\n\r\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\r\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\r\n  }\r\n\r\n  /**\r\n   * Submits the event to be sent to the server.\r\n   * @param event The event data.\r\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\r\n   * @param callback\r\n   */\r\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\r\n    function cancelled(context: EventPluginContext) {\r\n      if (!!context) {\r\n        context.cancelled = true;\r\n      }\r\n\r\n      return !!callback && callback(context);\r\n    }\r\n\r\n    let context = new EventPluginContext(this, event, pluginContextData);\r\n    if (!event) {\r\n      return cancelled(context);\r\n    }\r\n\r\n    if (!this.config.enabled) {\r\n      this.config.log.info('Event submission is currently disabled.');\r\n      return cancelled(context);\r\n    }\r\n\r\n    if (!event.data) {\r\n      event.data = {};\r\n    }\r\n\r\n    if (!event.tags || !event.tags.length) {\r\n      event.tags = [];\r\n    }\r\n\r\n    EventPluginManager.run(context, function (ctx: EventPluginContext) {\r\n      let config = ctx.client.config;\r\n      let ev = ctx.event;\r\n\r\n      if (!ctx.cancelled) {\r\n        // ensure all required data\r\n        if (!ev.type || ev.type.length === 0) {\r\n          ev.type = 'log';\r\n        }\r\n\r\n        if (!ev.date) {\r\n          ev.date = new Date();\r\n        }\r\n\r\n        config.queue.enqueue(ev);\r\n\r\n        if (ev.reference_id && ev.reference_id.length > 0) {\r\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\r\n          config.lastReferenceIdManager.setLast(ev.reference_id);\r\n        }\r\n      }\r\n\r\n      !!callback && callback(ctx);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the user's email address and description of an event for the specified reference id.\r\n   * @param referenceId The reference id of the event to update.\r\n   * @param email The user's email address to set on the event.\r\n   * @param description The user's description of the event.\r\n   * @param callback The submission response.\r\n   */\r\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\r\n    if (!referenceId || !email || !description || !this.config.enabled) {\r\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\r\n    }\r\n\r\n    let userDescription: IUserDescription = { email_address: email, description: description };\r\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\r\n      if (!response.success) {\r\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\r\n      }\r\n\r\n      !!callback && callback(response);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the last event client id that was submitted to the server.\r\n   * @returns {string} The event client id.\r\n   */\r\n  public getLastReferenceId(): string {\r\n    return this.config.lastReferenceIdManager.getLast();\r\n  }\r\n\r\n  private updateSettingsTimer(initialDelay?: number) {\r\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\r\n\r\n    this._timeoutId = clearTimeout(this._timeoutId);\r\n    this._timeoutId = clearInterval(this._intervalId);\r\n\r\n    let interval = this.config.updateSettingsWhenIdleInterval;\r\n    if (interval > 0) {\r\n      let updateSettings = () => SettingsManager.updateSettings(this.config);\r\n      if (initialDelay > 0) {\r\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\r\n      }\r\n\r\n      this._intervalId = setInterval(updateSettings, interval);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The default ExceptionlessClient instance.\r\n   * @type {ExceptionlessClient}\r\n   */\r\n  public static get default() {\r\n    if (ExceptionlessClient._instance === null) {\r\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\r\n    }\r\n\r\n    return ExceptionlessClient._instance;\r\n  }\r\n}\r\n\nexport interface IManualStackingInfo {\r\n  title?: string;\r\n  signature_data?: any;\r\n}\r\n\nexport interface IModule {\r\n  data?: any;\r\n\r\n  module_id?: number;\r\n  name?: string;\r\n  version?: string;\r\n  is_entry?: boolean;\r\n  created_date?: Date;\r\n  modified_date?: Date;\r\n}\r\n\nexport interface IRequestInfo {\r\n  user_agent?: string;\r\n  http_method?: string;\r\n  is_secure?: boolean;\r\n  host?: string;\r\n  port?: number;\r\n  path?: string;\r\n  referrer?: string;\r\n  client_ip_address?: string;\r\n  cookies?: any;\r\n  post_data?: any;\r\n  query_string?: any;\r\n  data?: any;\r\n}\r\n\nexport interface IEnvironmentInfo {\r\n  processor_count?: number;\r\n  total_physical_memory?: number;\r\n  available_physical_memory?: number;\r\n  command_line?: string;\r\n  process_name?: string;\r\n  process_id?: string;\r\n  process_memory_size?: number;\r\n  thread_id?: string;\r\n  architecture?: string;\r\n  o_s_name?: string;\r\n  o_s_version?: string;\r\n  ip_address?: string;\r\n  machine_name?: string;\r\n  install_id?: string;\r\n  runtime_version?: string;\r\n  data?: any;\r\n}\r\n\nexport interface IParameter {\r\n  data?: any;\r\n  generic_arguments?: string[];\r\n\r\n  name?: string;\r\n  type?: string;\r\n  type_namespace?: string;\r\n}\r\n\n                                          \r\n\r\nexport interface IMethod {\r\n  data?: any;\r\n  generic_arguments?: string[];\r\n  parameters?: IParameter[];\r\n\r\n  is_signature_target?: boolean;\r\n  declaring_namespace?: string;\r\n  declaring_type?: string;\r\n  name?: string;\r\n  module_id?: number;\r\n}\r\n\n                                    \r\n\r\nexport interface IStackFrame extends IMethod {\r\n  file_name?: string;\r\n  line_number?: number;\r\n  column?: number;\r\n}\r\n\n                                                                                  \r\n\r\nexport interface IInnerError {\r\n  message?: string;\r\n  type?: string;\r\n  code?: string;\r\n  data?: any;\r\n  inner?: IInnerError;\r\n  stack_trace?: IStackFrame[];\r\n  target_method?: IMethod;\r\n}\r\n\n                                                                                                                                                  \r\n\r\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\r\n  public priority: number = 10;\r\n  public name: string = 'ConfigurationDefaultsPlugin';\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    let config = context.client.config;\r\n    let defaultTags: string[] = config.defaultTags || [];\r\n    for (let index = 0; index < defaultTags.length; index++) {\r\n      let tag = defaultTags[index];\r\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\r\n        context.event.tags.push(tag);\r\n      }\r\n    }\r\n\r\n    let defaultData: Object = config.defaultData || {};\r\n    for (let key in defaultData) {\r\n      if (!!defaultData[key]) {\r\n        let result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\r\n        if (!Utils.isEmpty(result)) {\r\n          context.event.data[key] = result;\r\n        }\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                  \r\n\r\nexport class ErrorPlugin implements IEventPlugin {\r\n  public priority: number = 30;\r\n  public name: string = 'ErrorPlugin';\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\r\n    let ignoredProperties: string[] = [\r\n      'arguments',\r\n      'column',\r\n      'columnNumber',\r\n      'description',\r\n      'fileName',\r\n      'message',\r\n      'name',\r\n      'number',\r\n      'line',\r\n      'lineNumber',\r\n      'opera#sourceloc',\r\n      'sourceId',\r\n      'sourceURL',\r\n      'stack',\r\n      'stackArray',\r\n      'stacktrace'\r\n    ];\r\n\r\n    let exception = context.contextData.getException();\r\n    if (!!exception) {\r\n      context.event.type = 'error';\r\n\r\n      if (!context.event.data[ERROR_KEY]) {\r\n        let config = context.client.config;\r\n        let parser = config.errorParser;\r\n        if (!parser) {\r\n          throw new Error('No error parser was defined.');\r\n        }\r\n\r\n        let result = parser.parse(context, exception);\r\n        if (!!result) {\r\n          let additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\r\n          if (!Utils.isEmpty(additionalData)) {\r\n            if (!result.data) {\r\n              result.data = {};\r\n            }\r\n            result.data['@ext'] = additionalData;\r\n          }\r\n\r\n          context.event.data[ERROR_KEY] = result;\r\n        }\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                             \r\n\r\nexport class ModuleInfoPlugin implements IEventPlugin {\r\n  public priority: number = 50;\r\n  public name: string = 'ModuleInfoPlugin';\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\r\n\r\n    let collector = context.client.config.moduleCollector;\r\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\r\n      let modules: IModule[] = collector.getModules(context);\r\n      if (modules && modules.length > 0) {\r\n        context.event.data[ERROR_KEY].modules = modules;\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                                                             \r\n\r\nexport class RequestInfoPlugin implements IEventPlugin {\r\n  public priority: number = 70;\r\n  public name: string = 'RequestInfoPlugin';\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\r\n\r\n    let config = context.client.config;\r\n    let collector = config.requestInfoCollector;\r\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\r\n      let requestInfo: IRequestInfo = collector.getRequestInfo(context);\r\n      if (!!requestInfo) {\r\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\r\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\r\n          context.cancelled = true;\r\n        } else {\r\n          context.event.data[REQUEST_KEY] = requestInfo;\r\n        }\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                               \r\n\r\nexport class EnvironmentInfoPlugin implements IEventPlugin {\r\n  public priority: number = 80;\r\n  public name: string = 'EnvironmentInfoPlugin';\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\r\n\r\n    let collector = context.client.config.environmentInfoCollector;\r\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\r\n      let environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\r\n      if (!!environmentInfo) {\r\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                            \r\n\r\nexport class SubmissionMethodPlugin implements IEventPlugin {\r\n  public priority: number = 100;\r\n  public name: string = 'SubmissionMethodPlugin';\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    let submissionMethod: string = context.contextData.getSubmissionMethod();\r\n    if (!!submissionMethod) {\r\n      context.event.data['@submission_method'] = submissionMethod;\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                                                           \r\n\r\nexport class DuplicateCheckerPlugin implements IEventPlugin {\r\n  public priority: number = 1010;\r\n  public name: string = 'DuplicateCheckerPlugin';\r\n\r\n  private _mergedEvents: MergedEvent[] = [];\r\n  private _processedHashcodes: TimestampedHash[] = [];\r\n  private _getCurrentTime: () => number;\r\n  private _interval: number;\r\n\r\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\r\n    this._getCurrentTime = getCurrentTime;\r\n    this._interval = interval;\r\n\r\n    setInterval(() => {\r\n      while (this._mergedEvents.length > 0) {\r\n        this._mergedEvents.shift().resubmit();\r\n      }\r\n    }, interval);\r\n  }\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    function getHashCode(error: IInnerError): number {\r\n      let hashCode = 0;\r\n      while (error) {\r\n        if (error.message && error.message.length) {\r\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(error.message);\r\n        }\r\n        if (error.stack_trace && error.stack_trace.length) {\r\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(JSON.stringify(error.stack_trace));\r\n        }\r\n        error = error.inner;\r\n      }\r\n\r\n      return hashCode;\r\n    }\r\n\r\n    let error = context.event.data['@error'];\r\n    let hashCode = getHashCode(error);\r\n    if (hashCode) {\r\n      let count = context.event.count || 1;\r\n      let now = this._getCurrentTime();\r\n\r\n      let merged = this._mergedEvents.filter(s => s.hashCode === hashCode)[0];\r\n      if (merged) {\r\n        merged.incrementCount(count);\r\n        merged.updateDate(context.event.date);\r\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\r\n        context.cancelled = true;\r\n      }\r\n\r\n      if (!context.cancelled && this._processedHashcodes.some(h => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\r\n        context.log.trace('Adding event with hash: ' + hashCode);\r\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\r\n        context.cancelled = true;\r\n      }\r\n\r\n      if (!context.cancelled) {\r\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\r\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\r\n\r\n        // Only keep the last 50 recent errors.\r\n        while (this._processedHashcodes.length > 50) {\r\n          this._processedHashcodes.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\r\ninterface TimestampedHash {\r\n  hash: number;\r\n  timestamp: number;\r\n}\r\n\r\nclass MergedEvent {\r\n  public hashCode: number;\r\n  private _count: number;\r\n  private _context: EventPluginContext;\r\n\r\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\r\n    this.hashCode = hashCode;\r\n    this._context = context;\r\n    this._count = count;\r\n  }\r\n\r\n  public incrementCount(count: number) {\r\n    this._count += count;\r\n  }\r\n\r\n  public resubmit() {\r\n    this._context.event.count = this._count;\r\n    this._context.client.config.queue.enqueue(this._context.event);\r\n  }\r\n\r\n  public updateDate(date) {\r\n    if (date > this._context.event.date) {\r\n      this._context.event.date = date;\r\n    }\r\n  }\r\n}\r\n\n                                                                                                                                                                                                           \r\n\r\nexport class EventExclusionPlugin implements IEventPlugin {\r\n  public priority: number = 45;\r\n  public name: string = 'EventExclusionPlugin';\r\n\r\n  public run(context: EventPluginContext, next?: () => void): void {\r\n    function getLogLevel(level: string): number {\r\n      switch ((level || '').toLowerCase().trim()) {\r\n        case 'trace':\r\n        case 'true':\r\n        case '1':\r\n        case 'yes':\r\n          return 0;\r\n        case 'debug':\r\n          return 1;\r\n        case 'info':\r\n          return 2;\r\n        case 'warn':\r\n          return 3;\r\n        case 'error':\r\n          return 4;\r\n        case 'fatal':\r\n          return 5;\r\n        case 'off':\r\n        case 'false':\r\n        case '0':\r\n        case 'no':\r\n          return 6;\r\n        default:\r\n          return -1;\r\n      }\r\n    }\r\n\r\n    function getMinLogLevel(settings: Object, loggerName: string = '*'): number {\r\n      return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\r\n    }\r\n\r\n    function getTypeAndSourceSetting(settings: Object = {}, type: string, source: string, defaultValue: string|boolean = undefined): string|boolean {\r\n      if (!type) {\r\n        return defaultValue;\r\n      }\r\n\r\n      let isLog = type === 'log';\r\n      let sourcePrefix =  `@@${type}:`;\r\n\r\n      let value = settings[sourcePrefix + source];\r\n      if (value) {\r\n        return !isLog ? Utils.toBoolean(value) : value;\r\n      }\r\n\r\n      // check for wildcard match\r\n      for (let key in settings) {\r\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\r\n          return !isLog ? Utils.toBoolean(settings[key]) : settings[key];\r\n        }\r\n      }\r\n\r\n      return defaultValue;\r\n    }\r\n\r\n    let ev = context.event;\r\n    let log = context.log;\r\n    let settings = context.client.config.settings;\r\n\r\n    if (ev.type === 'log') {\r\n      let minLogLevel = getMinLogLevel(settings, ev.source);\r\n      let logLevel = getLogLevel(ev.data['@level']);\r\n\r\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\r\n        log.info('Cancelling log event due to minimum log level.');\r\n        context.cancelled = true;\r\n      }\r\n    } else if (ev.type === 'error') {\r\n      let error: IInnerError = ev.data['@error'];\r\n      while (!context.cancelled && error) {\r\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\r\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\r\n          context.cancelled = true;\r\n        }\r\n\r\n        error = error.inner;\r\n      }\r\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\r\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\r\n      context.cancelled = true;\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\nexport class SettingsResponse {\r\n  public success: boolean = false;\r\n  public settings: any;\r\n  public settingsVersion: number = -1;\r\n  public message: string;\r\n  public exception: any;\r\n\r\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\r\n    this.success = success;\r\n    this.settings = settings;\r\n    this.settingsVersion = settingsVersion;\r\n    this.exception = exception;\r\n    this.message = message;\r\n  }\r\n}\r\n\n                                                                                  \r\n\r\nexport interface IError extends IInnerError {\r\n  modules?: IModule[];\r\n}\r\n\nexport interface IStorageItem {\r\n  timestamp: number;\r\n  value: any;\r\n}\r\n\n                                              \r\n\r\nexport interface IStorage {\r\n  save(value: any): number;\r\n  get(limit?: number): IStorageItem[];\r\n  remove(timestamp: number): void;\r\n  clear(): void;\r\n}\r\n\nexport interface SubmissionCallback {\r\n  (status: number, message: string, data?: string, headers?: Object): void;\r\n}\r\n\nexport interface SubmissionRequest {\r\n  apiKey: string;\r\n  userAgent: string;\r\n  method: string;\r\n  url: string;\r\n  data: string;\r\n}\r\n\n                                                                                      \r\n\r\nexport class InMemoryStorage implements IStorage {\r\n  private maxItems: number;\r\n  private items: IStorageItem[] = [];\r\n  private lastTimestamp: number = 0;\r\n\r\n  constructor(maxItems: number) {\r\n    this.maxItems = maxItems;\r\n  }\r\n\r\n  public save(value: any): number {\r\n    if (!value) {\r\n      return null;\r\n    }\r\n\r\n    let items = this.items;\r\n    let timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\r\n    let item = { timestamp, value };\r\n\r\n    if (items.push(item) > this.maxItems) {\r\n      items.shift();\r\n    }\r\n\r\n    this.lastTimestamp = timestamp;\r\n    return item.timestamp;\r\n  }\r\n\r\n  public get(limit?: number): IStorageItem[] {\r\n    return this.items.slice(0, limit);\r\n  }\r\n\r\n  public remove(timestamp: number): void {\r\n    let items = this.items;\r\n    for (let i = 0; i < items.length; i++) {\r\n      if (items[i].timestamp === timestamp) {\r\n        items.splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public clear(): void {\r\n    this.items = [];\r\n  }\r\n}\r\n\nexport interface IClientConfiguration {\r\n  settings: Object;\r\n  version: number;\r\n}\r\n\n                                                                                      \r\n\r\nexport abstract class KeyValueStorageBase implements IStorage {\r\n  private maxItems: number;\r\n  private items: number[];\r\n  private lastTimestamp: number = 0;\r\n\r\n  constructor(maxItems) {\r\n    this.maxItems = maxItems;\r\n  }\r\n\r\n  public save(value: any, single?: boolean): number {\r\n    if (!value) {\r\n      return null;\r\n    }\r\n\r\n    this.ensureIndex();\r\n\r\n    let items = this.items;\r\n    let timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\r\n    let key = this.getKey(timestamp);\r\n    let json = JSON.stringify(value);\r\n\r\n    try {\r\n      this.write(key, json);\r\n      this.lastTimestamp = timestamp;\r\n      if (items.push(timestamp) > this.maxItems) {\r\n        this.delete(this.getKey(items.shift()));\r\n      }\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n\r\n    return timestamp;\r\n  }\r\n\r\n  public get(limit?: number): IStorageItem[] {\r\n    this.ensureIndex();\r\n\r\n    return this.items.slice(0, limit)\r\n      .map(timestamp => {\r\n        // Read and parse item for this timestamp\r\n        let key = this.getKey(timestamp);\r\n        try {\r\n          let json = this.read(key);\r\n          let value = JSON.parse(json, parseDate);\r\n          return { timestamp, value };\r\n        } catch (error) {\r\n          // Something went wrong - try to delete the cause.\r\n          this.safeDelete(key);\r\n          return null;\r\n        }\r\n      })\r\n      .filter(item => item != null);\r\n  }\r\n\r\n  public remove(timestamp: number): void {\r\n    this.ensureIndex();\r\n\r\n    let items = this.items;\r\n    let index = items.indexOf(timestamp);\r\n    if (index >= 0) {\r\n      let key = this.getKey(timestamp);\r\n      this.safeDelete(key);\r\n      items.splice(index, 1);\r\n    };\r\n  }\r\n\r\n  public clear(): void {\r\n    this.items.forEach(item => this.safeDelete(this.getKey(item)));\r\n    this.items = [];\r\n  }\r\n\r\n  protected abstract write(key: string, value: string): void;\r\n  protected abstract read(key: string): string;\r\n  protected abstract readAllKeys(): string[];\r\n  protected abstract delete(key: string);\r\n  protected abstract getKey(timestamp: number): string;\r\n  protected abstract getTimestamp(key: string): number;\r\n\r\n  private ensureIndex() {\r\n    if (!this.items) {\r\n      this.items = this.createIndex();\r\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\r\n    }\r\n  }\r\n\r\n  private safeDelete(key: string): void {\r\n    try {\r\n      this.delete(key);\r\n    } catch (error) {\r\n    }\r\n  }\r\n\r\n  private createIndex() {\r\n    try {\r\n      let keys = this.readAllKeys();\r\n      return keys.map(key => {\r\n        try {\r\n          let timestamp = this.getTimestamp(key);\r\n          if (!timestamp) {\r\n            this.safeDelete(key);\r\n            return null;\r\n          }\r\n          return timestamp;\r\n        } catch (error) {\r\n          this.safeDelete(key);\r\n          return null;\r\n        }\r\n      }).filter(timestamp => timestamp != null)\r\n        .sort((a, b) => a - b);\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseDate(key, value) {\r\n  let dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\r\n  if (typeof value === 'string') {\r\n    let a = dateRegx.exec(value);\r\n    if (a) {\r\n      return new Date(value);\r\n    }\r\n  }\r\n  return value;\r\n};\r\n\n                                                            \r\n\r\nexport class BrowserStorage extends KeyValueStorageBase {\r\n  private prefix: string;\r\n\r\n  public static isAvailable(): boolean {\r\n    try {\r\n      let storage = window.localStorage,\r\n        x = '__storage_test__';\r\n      storage.setItem(x, x);\r\n      storage.removeItem(x);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\r\n    super(maxItems);\r\n\r\n    this.prefix = prefix + namespace + '-';\r\n  }\r\n\r\n  public write(key: string, value: string) {\r\n    window.localStorage.setItem(key, value);\r\n  }\r\n\r\n  public read(key: string) {\r\n    return window.localStorage.getItem(key);\r\n  }\r\n\r\n  public readAllKeys() {\r\n    return Object.keys(window.localStorage)\r\n      .filter(key => key.indexOf(this.prefix) === 0);\r\n  }\r\n\r\n  public delete(key: string) {\r\n    window.localStorage.removeItem(key);\r\n  }\r\n\r\n  public getKey(timestamp) {\r\n    return this.prefix + timestamp;\r\n  }\r\n\r\n  public getTimestamp(key) {\r\n    return parseInt(key.substr(this.prefix.length), 10);\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                \r\n\r\nexport class DefaultErrorParser implements IErrorParser {\r\n  public parse(context: EventPluginContext, exception: Error): IError {\r\n    function getParameters(parameters: string | string[]): IParameter[] {\r\n      let params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\r\n\r\n      let result: IParameter[] = [];\r\n      for (let index = 0; index < params.length; index++) {\r\n        result.push({ name: params[index] });\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\r\n      const ANONYMOUS: string = '<anonymous>';\r\n      let frames: IStackFrame[] = [];\r\n\r\n      for (let index = 0; index < stackFrames.length; index++) {\r\n        let frame = stackFrames[index];\r\n        frames.push({\r\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\r\n          parameters: getParameters(frame.args),\r\n          file_name: frame.url,\r\n          line_number: frame.line || 0,\r\n          column: frame.column || 0\r\n        });\r\n      }\r\n\r\n      return frames;\r\n    }\r\n\r\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\r\n\r\n    let stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\r\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\r\n      : TraceKit.computeStackTrace(exception, 25);\r\n\r\n    if (!stackTrace) {\r\n      throw new Error('Unable to parse the exceptions stack trace.');\r\n    }\r\n\r\n    return {\r\n      type: stackTrace.name,\r\n      message: stackTrace.message || exception.message,\r\n      stack_trace: getStackFrames(stackTrace.stack || [])\r\n    };\r\n  }\r\n}\r\n\n                                                                                                                                                                                                            \r\n\r\nexport class DefaultModuleCollector implements IModuleCollector {\r\n  public getModules(context: EventPluginContext): IModule[] {\r\n    if (document && document.getElementsByTagName) {\r\n      return null;\r\n    }\r\n\r\n    let modules: IModule[] = [];\r\n    let scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\r\n    if (scripts && scripts.length > 0) {\r\n      for (let index = 0; index < scripts.length; index++) {\r\n        if (scripts[index].src) {\r\n          modules.push({\r\n            module_id: index,\r\n            name: scripts[index].src,\r\n            version: Utils.parseVersion(scripts[index].src)\r\n          });\r\n        } else if (!!scripts[index].innerHTML) {\r\n          modules.push({\r\n            module_id: index,\r\n            name: 'Script Tag',\r\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return modules;\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                \r\n\r\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\r\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\r\n    if (!document || !navigator || !location) {\r\n      return null;\r\n    }\r\n\r\n    let exclusions = context.client.config.dataExclusions;\r\n    let requestInfo: IRequestInfo = {\r\n      user_agent: navigator.userAgent,\r\n      is_secure: location.protocol === 'https:',\r\n      host: location.hostname,\r\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\r\n      path: location.pathname,\r\n      // client_ip_address: 'TODO',\r\n      cookies: Utils.getCookies(document.cookie, exclusions),\r\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\r\n    };\r\n\r\n    if (document.referrer && document.referrer !== '') {\r\n      requestInfo.referrer = document.referrer;\r\n    }\r\n\r\n    return requestInfo;\r\n  }\r\n}\r\n\n                                                                                                                                                                                \r\n\r\ndeclare var XDomainRequest: { new (); create(); };\r\n\r\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\r\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\r\n    // TODO: Handle sending events when app is exiting with send beacon.\r\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\r\n    const LOADED: string = 'loaded';  // optimization for minifier.\r\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\r\n\r\n    let isCompleted: boolean = false;\r\n    let useSetTimeout: boolean = false;\r\n    function complete(mode: string, xhr: XMLHttpRequest) {\r\n      function parseResponseHeaders(headerStr) {\r\n        function trim(value) {\r\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n        }\r\n\r\n        let headers = {};\r\n        let headerPairs = (headerStr || '').split('\\u000d\\u000a');\r\n        for (let index: number = 0; index < headerPairs.length; index++) {\r\n          let headerPair = headerPairs[index];\r\n          // Can't use split() here because it does the wrong thing\r\n          // if the header value has the string \": \" in it.\r\n          let separator = headerPair.indexOf('\\u003a\\u0020');\r\n          if (separator > 0) {\r\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\r\n          }\r\n        }\r\n\r\n        return headers;\r\n      }\r\n\r\n      if (isCompleted) {\r\n        return;\r\n      }\r\n\r\n      isCompleted = true;\r\n\r\n      let message: string = xhr.statusText;\r\n      let responseText: string = xhr.responseText;\r\n      let status: number = xhr.status;\r\n\r\n      if (mode === TIMEOUT || status === 0) {\r\n        message = 'Unable to connect to server.';\r\n        status = 0;\r\n      } else if (mode === LOADED && !status) {\r\n        status = request.method === 'POST' ? 202 : 200;\r\n      } else if (status < 200 || status > 299) {\r\n        let responseBody: any = xhr.responseBody;\r\n        if (!!responseBody && !!responseBody.message) {\r\n          message = responseBody.message;\r\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\r\n          try {\r\n            message = JSON.parse(responseText).message;\r\n          } catch (e) {\r\n            message = responseText;\r\n          }\r\n        }\r\n      }\r\n\r\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\r\n    }\r\n\r\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\r\n      let xhr: any = new XMLHttpRequest();\r\n      if (WITH_CREDENTIALS in xhr) {\r\n        xhr.open(method, url, true);\r\n\r\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\r\n        if (method === 'POST') {\r\n          xhr.setRequestHeader('Content-Type', 'application/json');\r\n        }\r\n      } else if (typeof XDomainRequest !== 'undefined') {\r\n        useSetTimeout = true;\r\n        xhr = new XDomainRequest();\r\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\r\n      } else {\r\n        xhr = null;\r\n      }\r\n\r\n      if (xhr) {\r\n        xhr.timeout = 10000;\r\n      }\r\n\r\n      return xhr;\r\n    }\r\n\r\n    let url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\r\n    let xhr = createRequest(request.userAgent, request.method || 'POST', url);\r\n    if (!xhr) {\r\n      return (callback && callback(503, 'CORS not supported.'));\r\n    }\r\n\r\n    if (WITH_CREDENTIALS in xhr) {\r\n      xhr.onreadystatechange = () => {\r\n        // xhr not ready.\r\n        if (xhr.readyState !== 4) {\r\n          return;\r\n        }\r\n\r\n        complete(LOADED, xhr);\r\n      };\r\n    }\r\n\r\n    xhr.onprogress = () => { };\r\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\r\n    xhr.onerror = () => complete('error', xhr);\r\n    xhr.onload = () => complete(LOADED, xhr);\r\n\r\n    if (useSetTimeout) {\r\n      setTimeout(() => xhr.send(request.data), 500);\r\n    } else {\r\n      xhr.send(request.data);\r\n    }\r\n  }\r\n}\r\n\n                                                                                                                                                  \r\n\r\nexport class BrowserStorageProvider implements IStorageProvider {\r\n  public queue: IStorage;\r\n  public settings: IStorage;\r\n\r\n  constructor(prefix?: string, maxQueueItems: number = 250) {\r\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\r\n    this.settings = new BrowserStorage('settings', prefix, 1);\r\n  }\r\n\r\n}\r\n\nr\n\r\nfunction getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\r\n  if (!document || !document.getElementsByTagName) {\r\n    return null;\r\n  }\r\n\r\n  let scripts = document.getElementsByTagName('script');\r\n  for (let index = 0; index < scripts.length; index++) {\r\n    if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\r\n      return Utils.parseQueryString(scripts[index].src.split('?').pop());\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\r\n  let builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\r\n  builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\r\n  builder.submit();\r\n}\r\n\r\n/*\r\nTODO: We currently are unable to parse string exceptions.\r\nfunction processJQueryAjaxError(event, xhr, settings, error:string): void {\r\n  let client = ExceptionlessClient.default;\r\n  if (xhr.status === 404) {\r\n    client.submitNotFound(settings.url);\r\n  } else if (xhr.status !== 401) {\r\n    client.createUnhandledException(error, 'JQuery.ajaxError')\r\n      .setSource(settings.url)\r\n      .setProperty('status', xhr.status)\r\n      .setProperty('request', settings.data)\r\n      .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\r\n      .submit();\r\n  }\r\n}\r\n*/\r\n\r\nConfiguration.prototype.useLocalStorage = function() {\r\n  if (BrowserStorage.isAvailable()) {\r\n    this.storage = new BrowserStorageProvider();\r\n    SettingsManager.applySavedServerSettings(this);\r\n    this.changed();\r\n  }\r\n};\r\n\r\nlet defaults = Configuration.defaults;\r\nlet settings = getDefaultsSettingsFromScriptTag();\r\nif (settings && (settings.apiKey || settings.serverUrl)) {\r\n  defaults.apiKey = settings.apiKey;\r\n  defaults.serverUrl = settings.serverUrl;\r\n}\r\n\r\ndefaults.errorParser = new DefaultErrorParser();\r\ndefaults.moduleCollector = new DefaultModuleCollector();\r\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\r\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\r\n\r\nTraceKit.report.subscribe(processUnhandledException);\r\nTraceKit.extendToAsynchronousCallbacks();\r\n\r\n// window && window.addEventListener && window.addEventListener('beforeunload', function () {\r\n//   ExceptionlessClient.default.config.queue.process(true);\r\n// });\r\n\r\n// if (typeof $ !== 'undefined' && $(document)) {\r\n//   $(document).ajaxError(processJQueryAjaxError);\r\n// }\r\n\r\n(<any>Error).stackTraceLimit = Infinity;\r\n\r\ndeclare var $;\r\n\n"],"sourceRoot":"/source/"}