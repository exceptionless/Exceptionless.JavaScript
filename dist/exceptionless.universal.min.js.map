{"version":3,"sources":["tracekit.js","exceptionless.universal.ts"],"names":["window","_oldOnerrorHandler","_onErrorHandlerInstalled","handlers","lastException","lastExceptionStack","debug","sourceCache","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","subscribe","handler","onerror","traceKitWindowOnError","push","unsubscribe","i","length","splice","computeStackTrace","augmentStackTraceWithInitialElement","computeStackTraceFromStackProp","guessFunctionName","gatherContext","ofCaller","depth","Error","ex","getSource","extendToAsynchronousCallbacks","_helper","fnName","originalFn","args","call","originalCallback","remoteFetching","collectWindowErrors","linesOfContext","define","amd","module","exports","_has","object","key","Object","prototype","hasOwnProperty","_isUndefined","what","notifyHandlers","stack","isWindowError","error","exception","inner","message","url","lineNo","columnNo","errorObj","processLastException","name","location","line","column","msg","toString","groups","match","context","mode","_lastExceptionStack","_lastException","setTimeout","incomplete","source","domain","document","exec","request","XMLHttpRequest","ActiveXObject","getXHR","open","send","responseText","loadSource","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","script","src","event","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","item","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromStacktraceProp","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","relativeLine","pos","innerText","midline","computeStackTraceFromOperaMultiLineMessage","global","__","constructor","d","b","create","__spreadArrays","il","r","Array","k","a","jl","defineProperty","value","NodeSubmissionAdapter","NodeFileStorageProvider","NodeRequestInfoCollector","NodeModuleCollector","NodeErrorParser","NodeEnvironmentInfoCollector","NodeFileStorage","DefaultSubmissionAdapter","BrowserStorageProvider","DefaultRequestInfoCollector","DefaultModuleCollector","DefaultErrorParser","BrowserStorage","KeyValueStorageBase","InMemoryStorage","SubmissionMethodPlugin","RequestInfoPlugin","ModuleInfoPlugin","EventExclusionPlugin","ErrorPlugin","EnvironmentInfoPlugin","DuplicateCheckerPlugin","ConfigurationDefaultsPlugin","EventBuilder","SettingsResponse","Configuration","ContextData","ExceptionlessClient","SubmissionResponse","SettingsManager","Utils","DefaultSubmissionClient","InMemoryStorageProvider","DefaultEventQueue","EventPluginManager","EventPluginContext","ReferenceIdPlugin","HeartbeatPlugin","NullLog","ConsoleLog","DefaultLastReferenceIdManager","require","process","os","child","path","Path","http","getLast","_lastReferenceId","clearLast","setLast","eventId","trace","log","info","warn","level","console","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","_interval","heartbeatInterval","priority","reference_id","type","guid","config","contextData","cancelled","callback","plugin","plugins","wrappedPlugins","addDefaultPlugins","addPlugin","enqueue","eventWillNotBeQueued","_config","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","storage","queue","save","logText","isAppExiting","_this","queueNotProcessed","_processingQueue","events_1","get","submissionBatchSize","serverUrl","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","Date","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","_handlers","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","noSubmission","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","maxQueueItems","settings","JSON","stringify","createRequest","createSubmissionCallback","submissionAdapter","sendRequest","cb","postUserDescription","referenceId","encodeURIComponent","getSettings","version","configServerUrl","status","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","headers","settingsVersion","parseInt","configurationVersionHeader","checkVersion","target","values","_a","values_1","getHashCode","hash","charCodeAt","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","undefined","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","toLowerCase","trim","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","applySavedServerSettings","savedSettings","getSavedServerSettings","changed","getVersion","currentVersion","updateSettings","_isUpdatingSettings","unableToUpdateMessage","savedServerSettings","newSettings","handlers_2","statusCode","createException","pluginContextData","setException","createEvent","setType","submitException","submit","createUnhandledException","submissionMethod","builder","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","date","submitEvent","eventPluginContext","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","updateSettingsTimer","initialDelay","_timeoutId","clearTimeout","updateSettingsWhenIdleInterval","interval","_instance","enumerable","configurable","settingsOrApiKey","getException","getSubmissionMethod","set","_apiKey","_serverUrl","_configServerUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","concat","addDataExclusions","addRange","val","_includePrivateInformation","_includeUserName","_includeMachineName","_includeIpAddress","_includeCookies","_includePostData","_includeQueryString","_userAgentBotPatterns","userAgentBotPatterns","_plugins","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","defaultData","setUserIdentity","userInfoOrIdentity","shouldRemove","userInfo","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","handlers_3","_defaultSettings","includePrivateInformation","configSettings","inject","fn","defaultTags","defaults","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","setReferenceId","isValidIdentifier","_validIdentifierErrorMessage","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","defaultTags_1","tag","stack_trace","count","now_1","_getCurrentTime","merged","_mergedEvents","filter","hashCode","incrementCount","updateDate","_processedHashcodes","h","MergedEvent","shift","getCurrentTime","now","resubmit","_count","_context","ENVIRONMENT_KEY","collector","environmentInfo","getEnvironmentInfo","parser","additionalData","minLogLevel","getMinLogLevel","logLevel","getLogLevel","getTypeAndSourceSetting","sourcePrefix","isLog","toBoolean","sortedKeys","localeCompare","cleanKey","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","user_agent","items","lastTimestamp","maxItems","limit","ensureIndex","getKey","json","write","delete","read","parseDate","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","_super","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","namespace","getParameters","parameters","params_1","param","TRACEKIT_STACK_TRACE_KEY","stackTrace","stackFrames","ANONYMOUS","frames","stackFrames_1","frame","file_name","line_number","getStackFrames","module_id","innerHTML","navigator","is_secure","protocol","host","hostname","port","pathname","includeCookies","getCookies","includeQueryString","query_string","parseQueryString","search","referrer","complete","xhrRequest","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","parseResponseHeaders","getAllResponseHeaders","uri","xmlRequest","xhr","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","__extends","fs","writeFileSync","readFileSync","readdirSync","directory","file","unlinkSync","basename","mkdir","dirs","sep","root","dir","existsSync","mkdirSync","folder","main","filename","dirname","subFolder","resolve","Fs","ips","interfaces","cpus","totalmem","freemem","command_line","argv","process_name","process_id","pid","process_memory_size","memoryUsage","heapTotal","architecture","arch","o_s_name","o_s_version","release","runtime_version","loadavg","platform","tmpdir","uptime","includeMachineName","machine_name","includeIpAddress","ip_address","networkInterfaces","iface","family","internal","address","endianness","nodestacktrace","frames_1","getMethodName","getFunctionName","getFileName","getLineNumber","getColumnNumber","declaring_type","getTypeName","is_native","initialize","pathLength","loadedKeys","loadedModules","installedModules","initialized","output","spawnSync","stdout","dependencies","theModule","secure","http_method","client_ip_address","ip","params","includePostData","post_data","sendRequestSync","options","auth","parsedHost","Content-Type","Content-Length","Buffer","byteLength","https","setEncoding","on","chunk","clientRequest","responseHeaders","statusMessage","requestJson","out","execPath","stdio","stderr","pop","getDefaultsSettingsFromScriptTag","default","stackTraceLimit","Infinity","addListener","exitCode"],"mappings":"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","file":"exceptionless.universal.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from \"TraceKit\";\nimport os = require(\"os\");\nimport nodestacktrace = require(\"stack-trace\");\nimport child = require(\"child_process\");\nimport path = require(\"path\");\nimport * as Fs from \"fs\";\nimport * as Path from \"path\";\nimport http = require(\"http\");\nimport https = require(\"https\");\nimport url = require(\"url\");\nimport { IncomingHttpHeaders } from \"http\";\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log(\"debug\", message);\n  }\n\n  public info(message: string): void {\n    this.log(\"info\", message);\n  }\n\n  public warn(message: string): void {\n    this.log(\"warn\", message);\n  }\n\n  public error(message: string): void {\n    this.log(\"error\", message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\nexport class NullLog implements ILog {\n  public trace(message: string): void {}\n  public info(message: string): void {}\n  public warn(message: string): void {}\n  public error(message: string): void {}\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = \"HeartbeatPlugin\";\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval >= 30000 ? heartbeatInterval : 60000;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data[\"@user\"];\n    if (user && user.identity) {\n      this._intervalId = setInterval(\n        () => context.client.submitSessionHeartbeat(user.identity),\n        this._interval\n      );\n    }\n\n    next && next();\n  }\n}\n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = \"ReferenceIdPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if (\n      (!context.event.reference_id ||\n        context.event.reference_id.length === 0) &&\n      context.event.type === \"error\"\n    ) {\n      context.event.reference_id = Utils.guid()\n        .replace(\"-\", \"\")\n        .substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\nexport class EventPluginContext {\n  public cancelled: boolean = false;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(\n    client: ExceptionlessClient,\n    event: IEvent,\n    contextData?: ContextData\n  ) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nexport class EventPluginManager {\n  public static run(\n    context: EventPluginContext,\n    callback: (context?: EventPluginContext) => void\n  ): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): (() => void) => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(\n            `Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`\n          );\n        }\n\n        if (context.cancelled && callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (callback) {\n      wrappedPlugins[plugins.length] = wrap(\n        { name: \"cb\", priority: 9007199254740992, run: callback },\n        null\n      );\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(\n        plugins[index],\n        callback || index < plugins.length - 1\n          ? wrappedPlugins[index + 1]\n          : null\n      );\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<\n    (events: IEvent[], response: SubmissionResponse) => void\n  > = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = \"The event will not be queued.\"; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(\n        `Queue items are currently being discarded. ${eventWillNotBeQueued}`\n      );\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${\n      event.reference_id ? \"refid=\" + event.reference_id : \"\"\n    }`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = \"The queue will not be processed.\"; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info(\"Processing queue...\");\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(\n        events.map((e) => e.value),\n        config,\n        (response: SubmissionResponse) => {\n          this.processSubmissionResponse(response, events);\n          this.eventsPosted(\n            events.map((e) => e.value),\n            response\n          );\n          log.info(\"Finished processing queue.\");\n          this._processingQueue = false;\n        },\n        isAppExiting\n      );\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(\n    durationInMinutes?: number,\n    discardFutureQueuedItems?: boolean,\n    clearQueue?: boolean\n  ): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(\n      new Date().getTime() + durationInMinutes * 60000\n    );\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(\n    handler: (events: IEvent[], response: SubmissionResponse) => void\n  ): void {\n    handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return (\n      this._discardQueuedItemsUntil &&\n      this._discardQueuedItemsUntil > new Date()\n    );\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return (\n      this._suspendProcessingUntil && this._suspendProcessingUntil > new Date()\n    );\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(\n    response: SubmissionResponse,\n    events: IStorageItem[]\n  ): void {\n    const noSubmission: string = \"The event will not be submitted.\"; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error(\"Server returned service unavailable.\");\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info(\n        \"Too many events have been submitted, please upgrade your plan.\"\n      );\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(\n        `Unable to authenticate, please check your configuration. ${noSubmission}`\n      );\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = \"Event submission discarded for being too large.\";\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(\n          1,\n          Math.round(config.submissionBatchSize / 1.5)\n        );\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(\n        `Error submitting events: ${\n          response.message || \"Please check the network tab for more info.\"\n        }`\n      );\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(\n    durationInMinutes?: number,\n    discardFutureQueuedItems?: boolean,\n    clearQueue?: boolean\n  ): void;\n  onEventsPosted(\n    handler: (events: IEvent[], response: SubmissionResponse) => void\n  ): void;\n}\n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\nexport interface IModuleCollector {\n  getModules(): IModule[];\n}\n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n}\n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = \"x-exceptionless-configversion\";\n\n  public postEvents(\n    events: IEvent[],\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void,\n    isAppExiting?: boolean\n  ): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(\n      config,\n      \"POST\",\n      `${config.serverUrl}/api/v2/events`,\n      data\n    );\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(\n    referenceId: string,\n    description: IUserDescription,\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void\n  ): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(\n      referenceId\n    )}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, \"POST\", path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(\n    config: Configuration,\n    version: number,\n    callback: (response: SettingsResponse) => void\n  ): void {\n    const request = this.createRequest(\n      config,\n      \"GET\",\n      `${config.configServerUrl}/api/v2/projects/config?v=${version}`\n    );\n    const cb = (status, message, data?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(\n          new SettingsResponse(\n            false,\n            null,\n            -1,\n            null,\n            \"Invalid configuration settings.\"\n          )\n        );\n      }\n\n      callback(\n        new SettingsResponse(true, settings.settings || {}, settings.version)\n      );\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(\n    sessionIdOrUserId: string,\n    closeSession: boolean,\n    config: Configuration\n  ): void {\n    const request = this.createRequest(\n      config,\n      \"GET\",\n      `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`\n    );\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(\n    config: Configuration,\n    method: string,\n    url: string,\n    data: string = null\n  ): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent,\n    };\n  }\n\n  private createSubmissionCallback(\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void\n  ) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number =\n        headers && parseInt(headers[this.configurationVersionHeader], 10);\n      if (!isNaN(settingsVersion)) {\n        SettingsManager.checkVersion(settingsVersion, config);\n      } else {\n        config.log.error(\"No config version header was returned.\");\n      }\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\nexport interface ISubmissionAdapter {\n  sendRequest(\n    request: SubmissionRequest,\n    callback?: SubmissionCallback,\n    isAppExiting?: boolean\n  ): void;\n}\n\nexport interface ISubmissionClient {\n  postEvents(\n    events: IEvent[],\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void,\n    isAppExiting?: boolean\n  ): void;\n  postUserDescription(\n    referenceId: string,\n    description: IUserDescription,\n    config: Configuration,\n    callback: (response: SubmissionResponse) => void\n  ): void;\n  getSettings(\n    config: Configuration,\n    version: number,\n    callback: (response: SettingsResponse) => void\n  ): void;\n  sendHeartbeat(\n    sessionIdOrUserId: string,\n    closeSession: boolean,\n    config: Configuration\n  ): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]): T[] {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = (hash << 5) - hash + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(\n    cookies: string,\n    exclusions?: string[]\n  ): Record<string, string> {\n    const result: Record<string, string> = {};\n\n    const parts: string[] = (cookies || \"\").split(\"; \");\n    for (const part of parts) {\n      const cookie: string[] = part.split(\"=\");\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n\n    return (\n      s4() +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      s4() +\n      s4()\n    );\n  }\n\n  public static merge<T>(defaultValues: T, values: T): T {\n    const result = {};\n\n    for (const key in defaultValues || {}) {\n      if (defaultValues[key] !== undefined && defaultValues[key] !== null) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (values[key] !== undefined && values[key] !== null) {\n        result[key] = values[key];\n      }\n    }\n\n    return <T>result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z-]+(?:\\.[\\dA-Za-z-]+)*))?(?:\\+([\\dA-Za-z-]+(?:\\.[\\dA-Za-z-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(\n    query: string,\n    exclusions?: string[]\n  ): Record<string, string> {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split(\"&\");\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: Record<string, string> = {};\n    for (const pair of pairs) {\n      const parts = pair.split(\"=\");\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(\n    input: string,\n    patterns: string[],\n    ignoreCase: boolean = true\n  ): boolean {\n    if (typeof input !== \"string\") {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, \"\");\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== \"string\") {\n        return false;\n      }\n\n      if (pattern) {\n        pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(\n          trim,\n          \"\"\n        );\n      }\n\n      if (!pattern) {\n        return input === undefined || input === null;\n      }\n\n      if (pattern === \"*\") {\n        return true;\n      }\n\n      if (input === undefined || input === null) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === \"*\";\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === \"*\";\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return (\n          pattern.length <= input.length && input.indexOf(pattern, 0) !== -1\n        );\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: Record<string, unknown>) {\n    return (\n      input === null ||\n      (typeof input === \"object\" && Object.keys(input).length === 0)\n    );\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifies an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(\n    data: any,\n    exclusions?: string[],\n    maxDepth?: number\n  ): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === \"object\" && value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if ({}.toString.call(data) === \"[object Object]\") {\n      const flattened = {};\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if ({}.toString.call(data) === \"[object Array]\") {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === \"boolean\") {\n      return input;\n    }\n\n    if (\n      input === null ||\n      (typeof input !== \"number\" && typeof input !== \"string\")\n    ) {\n      return defaultValue;\n    }\n\n    switch ((input + \"\").toLowerCase().trim()) {\n      case \"true\":\n      case \"yes\":\n      case \"1\":\n        return true;\n      case \"false\":\n      case \"no\":\n      case \"0\":\n      case null:\n        return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  configServerUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  includePrivateInformation?: boolean;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  private static _isUpdatingSettings: boolean = false;\n\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void): void {\n    handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled || this._isUpdatingSettings) {\n      return;\n    }\n\n    const unableToUpdateMessage = \"Unable to update settings\";\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    this._isUpdatingSettings = true;\n    config.submissionClient.getSettings(\n      config,\n      version,\n      (response: SettingsResponse) => {\n        try {\n          if (!config || !response || !response.success || !response.settings) {\n            config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n            return;\n          }\n\n          config.settings = Utils.merge(config.settings, response.settings);\n\n          // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n          // Remove any existing server settings that are not in the new server settings.\n          const savedServerSettings = SettingsManager.getSavedServerSettings(\n            config\n          );\n          for (const key in savedServerSettings) {\n            if (response.settings[key]) {\n              continue;\n            }\n\n            delete config.settings[key];\n          }\n\n          const newSettings: ISettingsWithVersion = {\n            version: response.settingsVersion,\n            settings: response.settings,\n          };\n\n          config.storage.settings.save(newSettings);\n\n          config.log.info(`Updated settings: v${newSettings.version}`);\n          this.changed(config);\n        } finally {\n          this._isUpdatingSettings = false;\n        }\n      }\n    );\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(\n    config: Configuration\n  ): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(\n    settingsOrApiKey?: IConfigurationSettings | string,\n    serverUrl?: string\n  ) {\n    this.config =\n      typeof settingsOrApiKey === \"object\"\n        ? new Configuration(settingsOrApiKey)\n        : new Configuration({ apiKey: settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged(() =>\n      this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0)\n    );\n    this.config.queue.onEventsPosted(() => this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType(\"error\");\n  }\n\n  public submitException(\n    exception: Error,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(\n    exception: Error,\n    submissionMethod?: string\n  ): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(\n    exception: Error,\n    submissionMethod?: string,\n    callback?: (context: EventPluginContext) => void\n  ) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType(\"usage\").setSource(feature);\n  }\n\n  public submitFeatureUsage(\n    feature: string,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(\n    source: string,\n    message: string,\n    level: string\n  ): EventBuilder;\n  public createLog(\n    sourceOrMessage: string,\n    message?: string,\n    level?: string\n  ): EventBuilder {\n    let builder = this.createEvent().setType(\"log\");\n\n    if (level) {\n      builder = builder\n        .setSource(sourceOrMessage)\n        .setMessage(message)\n        .setProperty(\"@level\", level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https://www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(\n          caller && caller.caller && caller.caller.name\n        );\n      } catch (e) {\n        this.config.log.trace(\"Unable to resolve log source: \" + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(\n    source: string,\n    message: string,\n    level: string,\n    callback?: (context: EventPluginContext) => void\n  ): void;\n  public submitLog(\n    sourceOrMessage: string,\n    message?: string,\n    level?: string,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType(\"404\").setSource(resource);\n  }\n\n  public submitNotFound(\n    resource: string,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType(\"session\");\n  }\n\n  public submitSessionStart(\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId && this.config.enabled && this.config.isValid) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(\n        sessionIdOrUserId,\n        true,\n        this.config\n      );\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId && this.config.enabled && this.config.isValid) {\n      this.config.log.info(\n        `Submitting session heartbeat: ${sessionIdOrUserId}`\n      );\n      this.config.submissionClient.sendHeartbeat(\n        sessionIdOrUserId,\n        false,\n        this.config\n      );\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(\n    event: IEvent,\n    pluginContextData?: ContextData,\n    callback?: (context: EventPluginContext) => void\n  ): void {\n    function cancelled(eventPluginContext: EventPluginContext) {\n      if (eventPluginContext) {\n        eventPluginContext.cancelled = true;\n      }\n\n      return callback && callback(eventPluginContext);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled || !this.config.isValid) {\n      this.config.log.info(\"Event submission is currently disabled.\");\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = \"log\";\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(\n    referenceId: string,\n    email: string,\n    description: string,\n    callback?: (response: SubmissionResponse) => void\n  ) {\n    if (\n      !referenceId ||\n      !email ||\n      !description ||\n      !this.config.enabled ||\n      !this.config.isValid\n    ) {\n      return callback && callback(new SubmissionResponse(500, \"cancelled\"));\n    }\n\n    const userDescription: IUserDescription = {\n      email_address: email,\n      description,\n    };\n    this.config.submissionClient.postUserDescription(\n      referenceId,\n      userDescription,\n      this.config,\n      (response: SubmissionResponse) => {\n        if (!response.success) {\n          this.config.log.error(\n            `Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`\n          );\n        }\n\n        callback && callback(response);\n      }\n    );\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      this.config.log.info(\n        `Update settings every ${interval}ms (${initialDelay || 0}ms delay)`\n      );\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    } else {\n      this.config.log.info(\"Turning off update settings\");\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this[\"@@_Exception\"] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this[\"@@_Exception\"];\n  }\n\n  public getException(): Error {\n    return this[\"@@_Exception\"] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this[\"@@_IsUnhandledError\"] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this[\"@@_IsUnhandledError\"];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this[\"@@_SubmissionMethod\"] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this[\"@@_SubmissionMethod\"] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (\n  status: number,\n  message: string,\n  data?: string,\n  headers?: any\n) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: Record<string, unknown> = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: Record<string, string> = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = \"https://collector.exceptionless.io\";\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @type {string}\n   * @private\n   */\n  private _configServerUrl: string = \"https://config.exceptionless.io\";\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = \"https://heartbeat.exceptionless.io\";\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  private _includePrivateInformation: boolean;\n  private _includeUserName: boolean;\n  private _includeMachineName: boolean;\n  private _includeIpAddress: boolean;\n  private _includeCookies: boolean;\n  private _includePostData: boolean;\n  private _includeQueryString: boolean;\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === \"function\" ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.configServerUrl = configSettings.configServerUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval =\n      configSettings.updateSettingsWhenIdleInterval;\n    this.includePrivateInformation = configSettings.includePrivateInformation;\n\n    this.environmentInfoCollector = inject(\n      configSettings.environmentInfoCollector\n    );\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager =\n      inject(configSettings.lastReferenceIdManager) ||\n      new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient =\n      inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage =\n      inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (value) {\n      this._serverUrl = value;\n      this._configServerUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @returns {string}\n   */\n  public get configServerUrl(): string {\n    return this._configServerUrl;\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @param value\n   */\n  public set configServerUrl(value: string) {\n    if (value) {\n      this._configServerUrl = value;\n      this.log.info(`configServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 120000) {\n      value = 120000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings[\"@@DataExclusions\"];\n    return this._dataExclusions.concat(\n      (exclusions && exclusions.split(\",\")) || []\n    );\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(\n      this._dataExclusions,\n      ...exclusions\n    );\n  }\n\n  /**\n   * Gets a value indicating whether to include private information about the local machine.\n   * @returns {boolean}\n   */\n  public get includePrivateInformation(): boolean {\n    return this._includePrivateInformation;\n  }\n\n  /**\n   * Sets a value indicating whether to include private information about the local machine\n   * @param value\n   */\n  public set includePrivateInformation(value: boolean) {\n    const val = value || false;\n    this._includePrivateInformation = val;\n    this._includeUserName = val;\n    this._includeMachineName = val;\n    this._includeIpAddress = val;\n    this._includeCookies = val;\n    this._includePostData = val;\n    this._includeQueryString = val;\n    this.log.info(`includePrivateInformation: ${val}`);\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include User Name.\n   * @returns {boolean}\n   */\n  public get includeUserName(): boolean {\n    return this._includeUserName;\n  }\n\n  /**\n   * Sets a value indicating whether to include User Name.\n   * @param value\n   */\n  public set includeUserName(value: boolean) {\n    this._includeUserName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include MachineName in MachineInfo.\n   * @returns {boolean}\n   */\n  public get includeMachineName(): boolean {\n    return this._includeMachineName;\n  }\n\n  /**\n   * Sets a value indicating whether to include MachineName in MachineInfo.\n   * @param value\n   */\n  public set includeMachineName(value: boolean) {\n    this._includeMachineName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @returns {boolean}\n   */\n  public get includeIpAddress(): boolean {\n    return this._includeIpAddress;\n  }\n\n  /**\n   * Sets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @param value\n   */\n  public set includeIpAddress(value: boolean) {\n    this._includeIpAddress = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeCookies(): boolean {\n    return this._includeCookies;\n  }\n\n  /**\n   * Sets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @param value\n   */\n  public set includeCookies(value: boolean) {\n    this._includeCookies = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @returns {boolean}\n   */\n  public get includePostData(): boolean {\n    return this._includePostData;\n  }\n\n  /**\n   * Sets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @param value\n   */\n  public set includePostData(value: boolean) {\n    this._includePostData = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeQueryString(): boolean {\n    return this._includeQueryString;\n  }\n\n  /**\n   * Sets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @param value\n   */\n  public set includeQueryString(value: boolean) {\n    this._includeQueryString = value || false;\n    this.changed();\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings[\"@@UserAgentBotPatterns\"];\n    return this._userAgentBotPatterns.concat(\n      (patterns && patterns.split(\",\")) || []\n    );\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(\n      this._userAgentBotPatterns,\n      ...userAgentBotPatterns\n    );\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return p1.priority < p2.priority ? -1 : p1.priority > p2.priority ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(\n    name: string,\n    priority: number,\n    pluginAction: (context: EventPluginContext, next?: () => void) => void\n  ): void;\n  public addPlugin(\n    pluginOrName: IEventPlugin | string,\n    priority?: number,\n    pluginAction?: (context: EventPluginContext, next?: () => void) => void\n  ): void {\n    const plugin: IEventPlugin = pluginAction\n      ? { name: pluginOrName as string, priority, run: pluginAction }\n      : (pluginOrName as IEventPlugin);\n    if (!plugin || !plugin.run) {\n      this.log.error(\"Add plugin failed: Run method not defined\");\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string =\n      typeof pluginOrName === \"string\" ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error(\"Remove plugin failed: Plugin name not defined\");\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (version) {\n      this.defaultData[\"@version\"] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(\n    userInfoOrIdentity: IUserInfo | string,\n    name?: string\n  ): void {\n    const USER_KEY: string = \"@user\"; // optimization for minifier.\n    const userInfo: IUserInfo =\n      typeof userInfoOrIdentity !== \"string\"\n        ? userInfoOrIdentity\n        : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean =\n      !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(\n      `user identity: ${shouldRemove ? \"null\" : userInfo.identity}`\n    );\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return \"exceptionless-js/1.0.0.0\";\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(\n    sendHeartbeats: boolean = true,\n    heartbeatInterval: number = 30000\n  ): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void): void {\n    handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = { includePrivateInformation: true };\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(\n    success: boolean,\n    settings: any,\n    settingsVersion: number = -1,\n    exception: any = null,\n    message: string = null\n  ) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string =\n    \"must contain between 8 and 100 alphanumeric or '-' characters.\"; // optimization for minifier.\n\n  constructor(\n    event: IEvent,\n    client: ExceptionlessClient,\n    pluginContextData?: ContextData\n  ) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error(\"Invalid name\");\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty(\"@ref:\" + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error(\"Must be a valid latitude value between -90.0 and 90.0.\");\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error(\n        \"Must be a valid longitude value between -180.0 and 180.0.\"\n      );\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(\n    userInfoOrIdentity: IUserInfo | string,\n    name?: string\n  ): EventBuilder {\n    const userInfo =\n      typeof userInfoOrIdentity !== \"string\"\n        ? userInfoOrIdentity\n        : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty(\"@user\", userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(\n    emailAddress: string,\n    description: string\n  ): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty(\"@user_description\", {\n        email_address: emailAddress,\n        description,\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(\n    signatureData: any,\n    title?: string\n  ): EventBuilder {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty(\"@stack\", stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(\n    manualStackingKey: string,\n    title?: string\n  ): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(\n    name: string,\n    value: any,\n    maxDepth?: number,\n    excludedPropertyNames?: string[]\n  ): EventBuilder {\n    if (!name || value === undefined || value == null) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(\n      Utils.stringify(\n        value,\n        this.client.config.dataExclusions.concat(excludedPropertyNames || []),\n        maxDepth\n      )\n    );\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags(\"Critical\");\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: IRequestInfo): EventBuilder {\n    if (request) {\n      this.pluginContextData[\"@request\"] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = code >= 48 && code <= 57;\n      const isLetter =\n        (code >= 65 && code <= 90) || (code >= 97 && code <= 122);\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = \"ConfigurationDefaultsPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    const defaultData: Record<string, unknown> = config.defaultData || {};\n    for (const key in defaultData) {\n      if (defaultData[key]) {\n        const result = JSON.parse(\n          Utils.stringify(defaultData[key], config.dataExclusions)\n        );\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = \"DuplicateCheckerPlugin\";\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(\n    getCurrentTime: () => number = () => Date.now(),\n    interval: number = 30000\n  ) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(e: IInnerError): number {\n      let hash = 0;\n      while (e) {\n        if (e.message && e.message.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(e.message);\n        }\n        if (e.stack_trace && e.stack_trace.length) {\n          hash +=\n            (hash * 397) ^ Utils.getHashCode(JSON.stringify(e.stack_trace));\n        }\n        e = e.inner;\n      }\n\n      return hash;\n    }\n\n    const error = context.event.data[\"@error\"];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter(\n        (s) => s.hashCode === hashCode\n      )[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info(\"Ignoring duplicate event with hash: \" + hashCode);\n        context.cancelled = true;\n      }\n\n      if (\n        !context.cancelled &&\n        this._processedHashcodes.some(\n          (h) => h.hash === hashCode && h.timestamp >= now - this._interval\n        )\n      ) {\n        context.log.trace(\"Adding event with hash: \" + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace(\n          \"Enqueueing event with hash: \" + hashCode + \"to cache.\"\n        );\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = \"EnvironmentInfoPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = \"@environment\"; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(\n        context\n      );\n      if (environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = \"ErrorPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = \"@error\"; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      \"arguments\",\n      \"column\",\n      \"columnNumber\",\n      \"description\",\n      \"fileName\",\n      \"message\",\n      \"name\",\n      \"number\",\n      \"line\",\n      \"lineNumber\",\n      \"opera#sourceloc\",\n      \"sourceId\",\n      \"sourceURL\",\n      \"stack\",\n      \"stackArray\",\n      \"stacktrace\",\n    ];\n\n    const exception = context.contextData.getException();\n    if (exception) {\n      context.event.type = \"error\";\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error(\"No error parser was defined.\");\n        }\n\n        const result = parser.parse(context, exception);\n        if (result) {\n          const additionalData = JSON.parse(\n            Utils.stringify(\n              exception,\n              config.dataExclusions.concat(ignoredProperties)\n            )\n          );\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data[\"@ext\"] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = \"EventExclusionPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === \"log\") {\n      const minLogLevel = this.getMinLogLevel(settings, ev.source);\n      const logLevel = this.getLogLevel(ev.data[\"@level\"]);\n\n      if (logLevel !== -1 && (logLevel === 6 || logLevel < minLogLevel)) {\n        log.info(\"Cancelling log event due to minimum log level.\");\n        context.cancelled = true;\n      }\n    } else if (ev.type === \"error\") {\n      let error: IInnerError = ev.data[\"@error\"];\n      while (!context.cancelled && error) {\n        if (\n          this.getTypeAndSourceSetting(settings, ev.type, error.type, true) ===\n          false\n        ) {\n          log.info(\n            `Cancelling error from excluded exception type: ${error.type}`\n          );\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (\n      this.getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false\n    ) {\n      log.info(\n        `Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`\n      );\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n\n  public getLogLevel(level: string): number {\n    switch ((level || \"\").toLowerCase().trim()) {\n      case \"trace\":\n      case \"true\":\n      case \"1\":\n      case \"yes\":\n        return 0;\n      case \"debug\":\n        return 1;\n      case \"info\":\n        return 2;\n      case \"warn\":\n        return 3;\n      case \"error\":\n        return 4;\n      case \"fatal\":\n        return 5;\n      case \"off\":\n      case \"false\":\n      case \"0\":\n      case \"no\":\n        return 6;\n      default:\n        return -1;\n    }\n  }\n\n  public getMinLogLevel(\n    configSettings: Record<string, string>,\n    source\n  ): number {\n    return this.getLogLevel(\n      this.getTypeAndSourceSetting(configSettings, \"log\", source, \"other\") + \"\"\n    );\n  }\n\n  private getTypeAndSourceSetting(\n    configSettings: Record<string, string> = {},\n    type: string,\n    source: string,\n    defaultValue: string | boolean\n  ): string | boolean {\n    if (!type) {\n      return defaultValue;\n    }\n\n    if (!source) {\n      source = \"\";\n    }\n\n    const isLog: boolean = type === \"log\";\n    const sourcePrefix: string = `@@${type}:`;\n\n    const value: string = configSettings[sourcePrefix + source];\n    if (value) {\n      return isLog ? value : Utils.toBoolean(value);\n    }\n\n    // sort object keys longest first, then alphabetically.\n    const sortedKeys = Object.keys(configSettings).sort(\n      (a, b) => b.length - a.length || a.localeCompare(b)\n    );\n    for (const index in sortedKeys) {\n      const key: string = sortedKeys[index];\n      if (!Utils.startsWith(key.toLowerCase(), sourcePrefix)) {\n        continue;\n      }\n\n      // check for wildcard match\n      const cleanKey: string = key.substring(sourcePrefix.length);\n      if (Utils.isMatch(source, [cleanKey])) {\n        return isLog\n          ? configSettings[key]\n          : Utils.toBoolean(configSettings[key]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = \"ModuleInfoPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = \"@error\"; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (\n      context.event.data[ERROR_KEY] &&\n      !context.event.data[\"@error\"].modules &&\n      collector\n    ) {\n      const modules: IModule[] = collector.getModules();\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = \"RequestInfoPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = \"@request\"; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (requestInfo) {\n        if (\n          Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)\n        ) {\n          context.log.info(\n            \"Cancelling event as the request user agent matches a known bot pattern\"\n          );\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = \"SubmissionMethodPlugin\";\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (submissionMethod) {\n      context.event.data[\"@submission_method\"] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: Record<string, string>;\n  version: number;\n}\n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items\n      .slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n      // eslint-disable-next-line no-empty\n    } catch (error) {}\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys\n        .map((key) => {\n          try {\n            const timestamp = this.getTimestamp(key);\n            if (!timestamp) {\n              this.safeDelete(key);\n              return null;\n            }\n            return timestamp;\n          } catch (error) {\n            this.safeDelete(key);\n            return null;\n          }\n        })\n        .filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === \"string\") {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = \"__storage_test__\";\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(\n    namespace: string,\n    prefix: string = \"com.exceptionless.\",\n    maxItems: number = 20\n  ) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + \"-\";\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage).filter(\n      (key) => key.indexOf(this.prefix) === 0\n    );\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] =\n        (typeof parameters === \"string\" ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = \"<anonymous>\";\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace(\"?\", ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0,\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = \"@@_TraceKit.StackTrace\"; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = context.contextData[\n      TRACEKIT_STACK_TRACE_KEY\n    ]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error(\"Unable to parse the exceptions stack trace.\");\n    }\n\n    const message =\n      typeof exception === \"string\" ? (exception as any) : undefined;\n    return {\n      type: stackTrace.name || \"Error\",\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || []),\n    };\n  }\n}\n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(): IModule[] {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\n      \"script\"\n    );\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src.split(\"?\")[0],\n            version: Utils.parseVersion(scripts[index].src),\n          });\n        } else if (scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: \"Script Tag\",\n            version: Utils.getHashCode(scripts[index].innerHTML).toString(),\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === \"https:\",\n      host: location.hostname,\n      port:\n        location.port && location.port !== \"\"\n          ? parseInt(location.port, 10)\n          : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO'\n    };\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(document.cookie, exclusions);\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = Utils.parseQueryString(\n        location.search.substring(1),\n        exclusions\n      );\n    }\n\n    if (document.referrer && document.referrer !== \"\") {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage(\"q\", prefix, maxQueueItems);\n    this.settings = new BrowserStorage(\"settings\", prefix, 1);\n  }\n}\n\n// eslint-disable-next-line no-var\ndeclare var XDomainRequest: { new (); create() };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public sendRequest(\n    request: SubmissionRequest,\n    callback?: SubmissionCallback,\n    isAppExiting?: boolean\n  ) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = \"timeout\"; // optimization for minifier.\n    const LOADED: string = \"loaded\"; // optimization for minifier.\n    const WITH_CREDENTIALS: string = \"withCredentials\"; // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhrRequest: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr: string) {\n        function trim(value: string) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\n        }\n\n        const headers: Record<string, string> = {};\n        const headerPairs: string[] = (headerStr || \"\").split(\"\\u000d\\u000a\");\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf(\"\\u003a\\u0020\");\n          if (separator > 0) {\n            headers[\n              trim(headerPair.substring(0, separator).toLowerCase())\n            ] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhrRequest.statusText;\n      const responseText: string = xhrRequest.responseText;\n      let status: number = xhrRequest.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = \"Unable to connect to server.\";\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === \"POST\" ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhrRequest as any).responseBody;\n        if (responseBody && responseBody.message) {\n          message = responseBody.message;\n        } else if (responseText && responseText.indexOf(\"message\") !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback &&\n        callback(\n          status || 500,\n          message || \"\",\n          responseText,\n          parseResponseHeaders(\n            xhrRequest.getAllResponseHeaders &&\n              xhrRequest.getAllResponseHeaders()\n          )\n        );\n    }\n\n    function createRequest(\n      userAgent: string,\n      method: string,\n      uri: string\n    ): XMLHttpRequest {\n      let xmlRequest: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xmlRequest) {\n        xmlRequest.open(method, uri, true);\n\n        xmlRequest.setRequestHeader(\"X-Exceptionless-Client\", userAgent);\n        if (method === \"POST\") {\n          xmlRequest.setRequestHeader(\"Content-Type\", \"application/json\");\n        }\n      } else if (typeof XDomainRequest !== \"undefined\") {\n        useSetTimeout = true;\n        xmlRequest = new XDomainRequest();\n        xmlRequest.open(\n          method,\n          location.protocol === \"http:\" ? uri.replace(\"https:\", \"http:\") : uri\n        );\n      } else {\n        xmlRequest = null;\n      }\n\n      if (xmlRequest) {\n        xmlRequest.timeout = 10000;\n      }\n\n      return xmlRequest;\n    }\n\n    const url = `${request.url}${\n      request.url.indexOf(\"?\") === -1 ? \"?\" : \"&\"\n    }access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || \"POST\", url);\n    if (!xhr) {\n      return callback && callback(503, \"CORS not supported.\");\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => {};\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete(\"error\", xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\nexport class NodeFileStorage extends KeyValueStorageBase {\n  private directory: string;\n  private prefix: string;\n  private fs: any;\n\n  constructor(\n    namespace: string,\n    folder?: string,\n    prefix: string = \"ex-\",\n    maxItems: number = 20,\n    fs?: any\n  ) {\n    super(maxItems);\n\n    if (!folder) {\n      folder =\n        require.main && require.main.filename\n          ? Path.join(Path.dirname(require.main.filename), \".exceptionless\")\n          : \".exceptionless\";\n    }\n\n    const subFolder = Path.join(folder, namespace);\n    this.directory = Path.resolve(subFolder);\n    this.prefix = prefix;\n    this.fs = fs ? fs : Fs;\n\n    this.mkdir(this.directory);\n  }\n\n  public write(key: string, value: string) {\n    this.fs.writeFileSync(key, value);\n  }\n\n  public read(key: string) {\n    return this.fs.readFileSync(key, \"utf8\");\n  }\n\n  public readAllKeys() {\n    return this.fs\n      .readdirSync(this.directory)\n      .filter((file) => file.indexOf(this.prefix) === 0)\n      .map((file) => Path.join(this.directory, file));\n  }\n\n  public delete(key: string) {\n    this.fs.unlinkSync(key);\n  }\n\n  public getKey(timestamp): string {\n    return Path.join(this.directory, `${this.prefix}${timestamp}.json`);\n  }\n\n  public getTimestamp(key: string) {\n    return parseInt(Path.basename(key, \".json\").substr(this.prefix.length), 10);\n  }\n\n  private mkdir(path: string) {\n    const dirs = path.split(Path.sep);\n    let root = \"\";\n\n    while (dirs.length > 0) {\n      const dir = dirs.shift();\n      if (dir === \"\") {\n        root = Path.sep;\n      }\n      if (!this.fs.existsSync(root + dir)) {\n        this.fs.mkdirSync(root + dir);\n      }\n      root += dir + Path.sep;\n    }\n  }\n}\n\nexport class NodeEnvironmentInfoCollector implements IEnvironmentInfoCollector {\n  public getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo {\n    function getIpAddresses(): string {\n      const ips: string[] = [];\n      const interfaces = os.networkInterfaces();\n      Object.keys(interfaces).forEach((name) => {\n        interfaces[name].forEach((iface: any) => {\n          if (\"IPv4\" === iface.family && !iface.internal) {\n            ips.push(iface.address);\n          }\n        });\n      });\n\n      return ips.join(\", \");\n    }\n\n    if (!os) {\n      return null;\n    }\n\n    const environmentInfo: IEnvironmentInfo = {\n      processor_count: os.cpus().length,\n      total_physical_memory: os.totalmem(),\n      available_physical_memory: os.freemem(),\n      command_line: process.argv.join(\" \"),\n      process_name: (process.title || \"\").replace(/[\\uE000-\\uF8FF]/g, \"\"),\n      process_id: process.pid + \"\",\n      process_memory_size: process.memoryUsage().heapTotal,\n      // thread_id: '',\n      architecture: os.arch(),\n      o_s_name: os.type(),\n      o_s_version: os.release(),\n      // install_id: '',\n      runtime_version: process.version,\n      data: {\n        loadavg: os.loadavg(),\n        platform: os.platform(),\n        tmpdir: os.tmpdir(),\n        uptime: os.uptime(),\n      },\n    };\n\n    const config = context.client.config;\n    if (config.includeMachineName) {\n      environmentInfo.machine_name = os.hostname();\n    }\n\n    if (config.includeIpAddress) {\n      environmentInfo.ip_address = getIpAddresses();\n    }\n\n    if ((os as any).endianness) {\n      environmentInfo.data.endianness = (os as any).endianness();\n    }\n\n    return environmentInfo;\n  }\n}\n\nexport class NodeErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getStackFrames(frames: any[]): IStackFrame[] {\n      const result: IStackFrame[] = [];\n\n      for (const frame of frames) {\n        result.push({\n          name: frame.getMethodName() || frame.getFunctionName(),\n          // parameters: frame.args,\n          file_name: frame.getFileName(),\n          line_number: frame.getLineNumber() || 0,\n          column: frame.getColumnNumber() || 0,\n          declaring_type: frame.getTypeName(),\n          data: {\n            is_native:\n              frame.isNative() ||\n              (frame.filename &&\n                frame.filename[0] !== \"/\" &&\n                frame.filename[0] !== \".\"),\n          },\n        });\n      }\n\n      return result;\n    }\n\n    if (!nodestacktrace) {\n      throw new Error(\"Unable to load the stack trace library.\");\n    }\n\n    const stackFrames = nodestacktrace.parse(exception) || [];\n    return {\n      type: exception.name || \"Error\",\n      message: exception.message,\n      stack_trace: getStackFrames(stackFrames),\n    };\n  }\n}\n\nexport class NodeModuleCollector implements IModuleCollector {\n  private initialized: boolean = false;\n  private installedModules: { [id: string]: IModule } = {};\n\n  public getModules(): IModule[] {\n    if (!require.main || !require.main.filename) {\n      return [];\n    }\n\n    this.initialize();\n\n    const modulePath = path.dirname(require.main.filename) + \"/node_modules/\";\n    const pathLength = modulePath.length;\n\n    const loadedKeys = Object.keys(require.cache);\n    const loadedModules = {};\n\n    loadedKeys.forEach((key) => {\n      let id = key.substr(pathLength);\n      id = id.substr(0, id.indexOf(\"/\"));\n      loadedModules[id] = true;\n    });\n\n    return Object.keys(loadedModules)\n      .map((key) => this.installedModules[key])\n      .filter((m) => m !== undefined);\n  }\n\n  private initialize() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    let json;\n    try {\n      const output = child.spawnSync(\"npm\", [\"ls\", \"--depth=0\", \"--json\"])\n        .stdout;\n      if (!output) {\n        return;\n      }\n\n      json = JSON.parse(output.toString());\n    } catch (e) {\n      return;\n    }\n\n    const items = json.dependencies;\n    if (!items) {\n      return;\n    }\n\n    let id = 0;\n    this.installedModules = {};\n\n    Object.keys(items).forEach((key) => {\n      const item = items[key];\n      const theModule: IModule = {\n        module_id: id++,\n        name: key,\n        version: item.version,\n      };\n\n      this.installedModules[key] = theModule;\n    });\n  }\n}\n\nexport class NodeRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    const REQUEST_KEY: string = \"@request\"; // optimization for minifier.\n    if (!context.contextData[REQUEST_KEY]) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n\n    // TODO: include referrer\n    const request = context.contextData[REQUEST_KEY];\n    const requestInfo: IRequestInfo = {\n      user_agent: request.headers[\"user-agent\"],\n      is_secure: request.secure,\n      http_method: request.method,\n      host: request.hostname || request.host,\n      path: request.path,\n    };\n\n    const host = request.headers.host;\n    const port: number =\n      host && parseInt(host.slice(host.indexOf(\":\") + 1), 10);\n    if (port > 0) {\n      requestInfo.port = port;\n    }\n\n    if (config.includeIpAddress) {\n      requestInfo.client_ip_address = request.ip;\n    }\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(\n        request.headers.cookie,\n        exclusions\n      );\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = JSON.parse(\n        Utils.stringify(request.params || {}, exclusions)\n      );\n    }\n\n    if (config.includePostData) {\n      requestInfo.post_data = JSON.parse(\n        Utils.stringify(request.body || {}, exclusions)\n      );\n    }\n\n    return requestInfo;\n  }\n}\n\nexport class NodeFileStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(folder?: string, prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new NodeFileStorage(\"q\", folder, prefix, maxQueueItems);\n    this.settings = new NodeFileStorage(\"settings\", folder, prefix, 1);\n  }\n}\n\nexport class NodeSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(\n    request: SubmissionRequest,\n    callback?: SubmissionCallback,\n    isAppExiting?: boolean\n  ) {\n    if (isAppExiting) {\n      this.sendRequestSync(request, callback);\n      return;\n    }\n\n    const parsedHost = url.parse(request.url);\n\n    const options: https.RequestOptions = {\n      auth: `client:${request.apiKey}`,\n      headers: {},\n      hostname: parsedHost.hostname,\n      method: request.method,\n      port: parsedHost.port && parseInt(parsedHost.port, 10),\n      path: request.url,\n    };\n\n    options.headers[\"User-Agent\"] = request.userAgent;\n\n    if (request.method === \"POST\") {\n      options.headers = {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(request.data),\n      };\n    }\n\n    const protocol: any = parsedHost.protocol === \"https:\" ? https : http;\n    const clientRequest: http.ClientRequest = protocol.request(\n      options,\n      (response: http.IncomingMessage) => {\n        let body = \"\";\n        response.setEncoding(\"utf8\");\n        response.on(\"data\", (chunk) => (body += chunk));\n        response.on(\"end\", () =>\n          this.complete(response, body, response.headers, callback)\n        );\n      }\n    );\n\n    clientRequest.on(\n      \"error\",\n      (error: Error) => callback && callback(500, error.message)\n    );\n    clientRequest.end(request.data);\n  }\n\n  private complete(\n    response: http.IncomingMessage,\n    responseBody: string,\n    responseHeaders: IncomingHttpHeaders,\n    callback: SubmissionCallback\n  ): void {\n    let message: string;\n    if (response.statusCode === 0) {\n      message = \"Unable to connect to server.\";\n    } else if (response.statusCode < 200 || response.statusCode > 299) {\n      message = response.statusMessage || (response as any).message;\n    }\n\n    callback &&\n      callback(\n        response.statusCode || 500,\n        message,\n        responseBody,\n        responseHeaders\n      );\n  }\n\n  private sendRequestSync(\n    request: SubmissionRequest,\n    callback: SubmissionCallback\n  ): void {\n    const requestJson = JSON.stringify(request);\n    const res = child.spawnSync(\n      process.execPath,\n      [require.resolve(\"./submitSync.js\")],\n      {\n        input: requestJson,\n        stdio: [\"pipe\", \"pipe\", process.stderr],\n      }\n    );\n\n    const out = res.stdout.toString();\n    const result = JSON.parse(out);\n\n    callback &&\n      callback(result.status, result.message, result.data, result.headers);\n  }\n}\n\n(function init() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName(\"script\");\n    for (let index = 0; index < scripts.length; index++) {\n      if (\n        scripts[index].src &&\n        scripts[index].src.indexOf(\"/exceptionless\") > -1\n      ) {\n        return Utils.parseQueryString(scripts[index].src.split(\"?\").pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(\n    stackTrace: TraceKit.StackTrace,\n    options?: any\n  ): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(\n      new Error(stackTrace.message || (options || {}).status || \"Script error\"),\n      \"onerror\"\n    );\n    builder.pluginContextData[\"@@_TraceKit.StackTrace\"] = stackTrace;\n    builder.submit();\n  }\n\n  if (typeof document === \"undefined\") {\n    return;\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function () {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings) {\n    if (settings.apiKey) {\n      defaults.apiKey = settings.apiKey;\n    }\n\n    if (settings.serverUrl) {\n      defaults.serverUrl = settings.serverUrl;\n    }\n\n    if (typeof settings.includePrivateInformation === \"string\") {\n      defaults.includePrivateInformation =\n        settings.includePrivateInformation === \"false\" ? false : true;\n    }\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n//declare var $;\n\n(function init() {\n  if (typeof process === \"undefined\") {\n    return;\n  }\n\n  const defaults = Configuration.defaults;\n  defaults.environmentInfoCollector = new NodeEnvironmentInfoCollector();\n  defaults.errorParser = new NodeErrorParser();\n  defaults.moduleCollector = new NodeModuleCollector();\n  defaults.requestInfoCollector = new NodeRequestInfoCollector();\n  defaults.submissionAdapter = new NodeSubmissionAdapter();\n\n  Configuration.prototype.useLocalStorage = function () {\n    this.storage = new NodeFileStorageProvider();\n    SettingsManager.applySavedServerSettings(this);\n    this.changed();\n  };\n\n  process.addListener(\"uncaughtException\", (error: Error) => {\n    ExceptionlessClient.default.submitUnhandledException(\n      error,\n      \"uncaughtException\"\n    );\n  });\n\n  process.on(\"exit\", (code: number) => {\n    /**\n     * exit codes: https://nodejs.org/api/process.html#process_event_exit\n     * From now on, only synchronous code may run. As soon as this method\n     * ends, the application inevitably will exit.\n     */\n    function getExitCodeReason(exitCode: number): string {\n      if (exitCode === 1) {\n        return \"Uncaught Fatal Exception\";\n      }\n\n      if (exitCode === 3) {\n        return \"Internal JavaScript Parse Error\";\n      }\n\n      if (exitCode === 4) {\n        return \"Internal JavaScript Evaluation Failure\";\n      }\n\n      if (exitCode === 5) {\n        return \"Fatal Exception\";\n      }\n\n      if (exitCode === 6) {\n        return \"Non-function Internal Exception Handler \";\n      }\n\n      if (exitCode === 7) {\n        return \"Internal Exception Handler Run-Time Failure\";\n      }\n\n      if (exitCode === 8) {\n        return \"Uncaught Exception\";\n      }\n\n      if (exitCode === 9) {\n        return \"Invalid Argument\";\n      }\n\n      if (exitCode === 10) {\n        return \"Internal JavaScript Run-Time Failure\";\n      }\n\n      if (exitCode === 12) {\n        return \"Invalid Debug Argument\";\n      }\n\n      return null;\n    }\n\n    const client = ExceptionlessClient.default;\n    const message = getExitCodeReason(code);\n\n    if (message !== null) {\n      client.submitLog(\"exit\", message, \"Error\");\n    }\n\n    client.config.queue.process(true);\n    // Application will now exit.\n  });\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n"]}